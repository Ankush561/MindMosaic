{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Project\\\\client\\\\src\\\\components\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport api from '../services/api.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  nodes = [],\n  edges = [],\n  onNodeClick,\n  onCreateNew,\n  onCreateEdge,\n  onDeleteEdge,\n  interactionMode = 'select'\n}) => {\n  _s();\n  const svgRef = useRef();\n  const linkingState = useRef({\n    sourceNode: null,\n    tempLink: null,\n    isLinking: false\n  });\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  console.log('Graph received:', {\n    nodeCount: nodes.length,\n    edgeCount: edges.length,\n    mode: interactionMode\n  });\n\n  // Debug: Log the actual nodes and edges data\n  console.log('Nodes data:', JSON.stringify(nodes, null, 2));\n  console.log('Edges data:', JSON.stringify(edges, null, 2));\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n    if (!nodes || nodes.length === 0) {\n      return;\n    }\n    const width = svgRef.current.clientWidth;\n    const height = svgRef.current.clientHeight;\n\n    // Add arrow marker definition for edges\n    svg.append(\"defs\").selectAll(\"marker\").data([\"arrow\"]).enter().append(\"marker\").attr(\"id\", d => d).attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 15) // Position the arrow near the target node\n    .attr(\"refY\", 0).attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#6c757d\");\n\n    // Initialize node positions from stored values if available\n    nodes.forEach(node => {\n      if (node.position && node.position.x !== null && node.position.y !== null) {\n        node.x = node.position.x;\n        node.y = node.position.y;\n        node.fx = node.position.x; // Fixed position X\n        node.fy = node.position.y; // Fixed position Y\n      }\n    });\n\n    // Create a map of nodes by ID for easy lookup\n    const nodeMap = {};\n    nodes.forEach(node => {\n      nodeMap[node._id] = node;\n    });\n\n    // Process edges to ensure they reference actual node objects\n    const processedEdges = edges.map(edge => {\n      // Create a new edge object with proper source and target references\n      return {\n        id: edge._id,\n        source: nodeMap[edge.source] || edge.source,\n        target: nodeMap[edge.target] || edge.target,\n        type: edge.type,\n        _id: edge._id // Keep the original ID for later reference\n      };\n    });\n\n    // Debug: Log the processed edges\n    console.log('Processed edges:', JSON.stringify(processedEdges, null, 2));\n    const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(processedEdges).id(d => d._id).distance(100)).force('charge', d3.forceManyBody().strength(-200)).force('center', d3.forceCenter(width / 2, height / 2)).on('tick', ticked);\n\n    // Create edge paths with arrows\n    const linkElements = svg.append('g').attr('class', 'links').selectAll('path').data(processedEdges).enter().append('path').attr('class', 'link').attr('stroke', '#6c757d').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)').on('click', handleEdgeClick);\n    const nodeElements = svg.append('g').attr('class', 'nodes').selectAll('g').data(nodes).enter().append('g').attr('class', 'node').call(dragBehavior(simulation, interactionMode, svg, linkingState, onCreateEdge));\n    nodeElements.append('circle').attr('r', 10).on('click', handleNodeClick);\n    nodeElements.append('text').text(d => {\n      var _d$_id;\n      return d.title || ((_d$_id = d._id) === null || _d$_id === void 0 ? void 0 : _d$_id.substring(0, 6));\n    }).attr('x', 15).attr('y', 5);\n    function handleNodeClick(event, d) {\n      event.stopPropagation();\n      setSelectedEdge(null); // Clear selected edge when clicking a node\n      if (interactionMode === 'select' || interactionMode === 'reposition') {\n        if (onNodeClick) onNodeClick(d);\n      }\n      // In 'connect' mode, clicks are handled by drag start/end or ignored\n    }\n    function handleEdgeClick(event, d) {\n      event.stopPropagation();\n      if (interactionMode === 'select') {\n        // Highlight the selected edge\n        d3.selectAll('.link').classed('selected', false);\n        d3.select(event.currentTarget).classed('selected', true);\n        setSelectedEdge(d);\n\n        // Prevent node selection\n        if (onNodeClick) onNodeClick(null);\n      }\n    }\n\n    // Handle clicks on the background to deselect\n    svg.on('click', () => {\n      d3.selectAll('.link').classed('selected', false);\n      setSelectedEdge(null);\n    });\n    function ticked() {\n      // Update link paths for curved edges with arrows\n      linkElements.attr('d', d => {\n        const dx = d.target.x - d.source.x;\n        const dy = d.target.y - d.source.y;\n        const dr = Math.sqrt(dx * dx + dy * dy);\n\n        // Direct path for arrows\n        return `M${d.source.x},${d.source.y} L${d.target.x},${d.target.y}`;\n      });\n      nodeElements.attr('transform', d => `translate(${d.x},${d.y})`);\n    }\n    return () => {\n      simulation.stop();\n      if (linkingState.current.tempLink) linkingState.current.tempLink.remove();\n      linkingState.current = {\n        sourceNode: null,\n        tempLink: null,\n        isLinking: false\n      };\n    };\n  }, [nodes, edges, onNodeClick, onCreateEdge, interactionMode]);\n\n  // Drag handler factory - defined within Graph component scope, before return\n  function dragBehavior(simulation, currentMode, svg, linkingStateRef, onCreateEdgeCallback) {\n    function dragstarted(event, d) {\n      if (currentMode === 'connect') {\n        linkingStateRef.current.isLinking = true;\n        linkingStateRef.current.sourceNode = d;\n        linkingStateRef.current.tempLink = svg.append('path').attr('class', 'temp-link link').attr('d', `M${d.x},${d.y} L${d.x},${d.y}`).attr('stroke-dasharray', '5,5').attr('stroke', '#6c757d').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)');\n        event.sourceEvent.stopPropagation();\n      } else if (currentMode === 'reposition') {\n        if (!event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n    }\n    function dragged(event, d) {\n      if (currentMode === 'connect' && linkingStateRef.current.isLinking) {\n        linkingStateRef.current.tempLink.attr('d', `M${linkingStateRef.current.sourceNode.x},${linkingStateRef.current.sourceNode.y} L${event.x},${event.y}`);\n      } else if (currentMode === 'reposition') {\n        d.fx = event.x;\n        d.fy = event.y;\n      }\n    }\n    async function dragended(event, d) {\n      if (currentMode === 'connect' && linkingStateRef.current.isLinking) {\n        if (linkingStateRef.current.tempLink) linkingStateRef.current.tempLink.remove();\n        const targetElement = event.sourceEvent.target;\n        let targetNodeElement = targetElement;\n        while (targetNodeElement && !d3.select(targetNodeElement).classed('node')) {\n          targetNodeElement = targetNodeElement.parentNode;\n        }\n        const targetDatum = d3.select(targetNodeElement).datum();\n        if (targetDatum && targetDatum._id && linkingStateRef.current.sourceNode && targetDatum._id !== linkingStateRef.current.sourceNode._id) {\n          if (onCreateEdgeCallback) {\n            onCreateEdgeCallback(linkingStateRef.current.sourceNode._id, targetDatum._id);\n          }\n        }\n        linkingStateRef.current = {\n          sourceNode: null,\n          tempLink: null,\n          isLinking: false\n        };\n      } else if (currentMode === 'reposition') {\n        if (!event.active) simulation.alphaTarget(0);\n\n        // Save the node position to the database\n        try {\n          if (d._id) {\n            await api.updateNodePosition(d._id, {\n              x: d.x,\n              y: d.y\n            });\n            console.log(`Node position saved: ${d._id} at (${d.x}, ${d.y})`);\n          }\n        } catch (err) {\n          console.error('Failed to save node position:', err);\n        }\n      }\n    }\n    return d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended).filter(() => currentMode === 'connect' || currentMode === 'reposition'); // Filter based on currentMode\n  }\n\n  // Handle edge deletion\n  const handleDeleteEdge = () => {\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n      onDeleteEdge(selectedEdge._id);\n      setSelectedEdge(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: \"600\",\n      height: \"600\",\n      className: \"graph-svg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"edge-controls\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"delete-edge-btn\",\n        onClick: handleDeleteEdge,\n        children: \"Delete Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"2icq1sebClXcgoofp/iz1izgl/4=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useEffect","useState","d3","api","jsxDEV","_jsxDEV","Graph","nodes","edges","onNodeClick","onCreateNew","onCreateEdge","onDeleteEdge","interactionMode","_s","svgRef","linkingState","sourceNode","tempLink","isLinking","selectedEdge","setSelectedEdge","console","log","nodeCount","length","edgeCount","mode","JSON","stringify","svg","select","current","selectAll","remove","width","clientWidth","height","clientHeight","append","data","enter","attr","d","forEach","node","position","x","y","fx","fy","nodeMap","_id","processedEdges","map","edge","id","source","target","type","simulation","forceSimulation","force","forceLink","distance","forceManyBody","strength","forceCenter","on","ticked","linkElements","handleEdgeClick","nodeElements","call","dragBehavior","handleNodeClick","text","_d$_id","title","substring","event","stopPropagation","classed","currentTarget","dx","dy","dr","Math","sqrt","stop","currentMode","linkingStateRef","onCreateEdgeCallback","dragstarted","sourceEvent","active","alphaTarget","restart","dragged","dragended","targetElement","targetNodeElement","parentNode","targetDatum","datum","updateNodePosition","err","error","drag","filter","handleDeleteEdge","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Project/client/src/components/graph.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\nimport './Graph.css';\r\nimport api from '../services/api.js';\r\n\r\nconst Graph = ({ nodes = [], edges = [], onNodeClick, onCreateNew, onCreateEdge, onDeleteEdge, interactionMode = 'select' }) => {\r\n  const svgRef = useRef();\r\n  const linkingState = useRef({ sourceNode: null, tempLink: null, isLinking: false });\r\n  const [selectedEdge, setSelectedEdge] = useState(null);\r\n\r\n  console.log('Graph received:', {\r\n    nodeCount: nodes.length,\r\n    edgeCount: edges.length,\r\n    mode: interactionMode\r\n  });\r\n\r\n  // Debug: Log the actual nodes and edges data\r\n  console.log('Nodes data:', JSON.stringify(nodes, null, 2));\r\n  console.log('Edges data:', JSON.stringify(edges, null, 2));\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll('*').remove();\r\n\r\n    if (!nodes || nodes.length === 0) {\r\n      return;\r\n    }\r\n    \r\n    const width = svgRef.current.clientWidth;\r\n    const height = svgRef.current.clientHeight;\r\n\r\n    // Add arrow marker definition for edges\r\n    svg.append(\"defs\").selectAll(\"marker\")\r\n      .data([\"arrow\"])\r\n      .enter().append(\"marker\")\r\n      .attr(\"id\", d => d)\r\n      .attr(\"viewBox\", \"0 -5 10 10\")\r\n      .attr(\"refX\", 15) // Position the arrow near the target node\r\n      .attr(\"refY\", 0)\r\n      .attr(\"markerWidth\", 6)\r\n      .attr(\"markerHeight\", 6)\r\n      .attr(\"orient\", \"auto\")\r\n      .append(\"path\")\r\n      .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n      .attr(\"fill\", \"#6c757d\");\r\n\r\n    // Initialize node positions from stored values if available\r\n    nodes.forEach(node => {\r\n      if (node.position && node.position.x !== null && node.position.y !== null) {\r\n        node.x = node.position.x;\r\n        node.y = node.position.y;\r\n        node.fx = node.position.x; // Fixed position X\r\n        node.fy = node.position.y; // Fixed position Y\r\n      }\r\n    });\r\n\r\n    // Create a map of nodes by ID for easy lookup\r\n    const nodeMap = {};\r\n    nodes.forEach(node => {\r\n      nodeMap[node._id] = node;\r\n    });\r\n\r\n    // Process edges to ensure they reference actual node objects\r\n    const processedEdges = edges.map(edge => {\r\n      // Create a new edge object with proper source and target references\r\n      return {\r\n        id: edge._id,\r\n        source: nodeMap[edge.source] || edge.source,\r\n        target: nodeMap[edge.target] || edge.target,\r\n        type: edge.type,\r\n        _id: edge._id // Keep the original ID for later reference\r\n      };\r\n    });\r\n\r\n    // Debug: Log the processed edges\r\n    console.log('Processed edges:', JSON.stringify(processedEdges, null, 2));\r\n\r\n    const simulation = d3.forceSimulation(nodes)\r\n      .force('link', d3.forceLink(processedEdges).id(d => d._id).distance(100))\r\n      .force('charge', d3.forceManyBody().strength(-200))\r\n      .force('center', d3.forceCenter(width / 2, height / 2))\r\n      .on('tick', ticked);\r\n\r\n    // Create edge paths with arrows\r\n    const linkElements = svg.append('g')\r\n      .attr('class', 'links')\r\n      .selectAll('path')\r\n      .data(processedEdges)\r\n      .enter().append('path')\r\n      .attr('class', 'link')\r\n      .attr('stroke', '#6c757d')\r\n      .attr('stroke-width', 2)\r\n      .attr('fill', 'none')\r\n      .attr('marker-end', 'url(#arrow)')\r\n      .on('click', handleEdgeClick);\r\n\r\n    const nodeElements = svg.append('g')\r\n      .attr('class', 'nodes')\r\n      .selectAll('g')\r\n      .data(nodes)\r\n      .enter().append('g')\r\n      .attr('class', 'node')\r\n      .call(dragBehavior(simulation, interactionMode, svg, linkingState, onCreateEdge));\r\n\r\n    nodeElements.append('circle')\r\n      .attr('r', 10)\r\n      .on('click', handleNodeClick);\r\n\r\n    nodeElements.append('text')\r\n      .text(d => d.title || d._id?.substring(0, 6))\r\n      .attr('x', 15)\r\n      .attr('y', 5);\r\n\r\n    function handleNodeClick(event, d) {\r\n      event.stopPropagation();\r\n      setSelectedEdge(null); // Clear selected edge when clicking a node\r\n      if (interactionMode === 'select' || interactionMode === 'reposition') {\r\n        if (onNodeClick) onNodeClick(d);\r\n      }\r\n      // In 'connect' mode, clicks are handled by drag start/end or ignored\r\n    }\r\n\r\n    function handleEdgeClick(event, d) {\r\n      event.stopPropagation();\r\n      if (interactionMode === 'select') {\r\n        // Highlight the selected edge\r\n        d3.selectAll('.link').classed('selected', false);\r\n        d3.select(event.currentTarget).classed('selected', true);\r\n        setSelectedEdge(d);\r\n\r\n        // Prevent node selection\r\n        if (onNodeClick) onNodeClick(null);\r\n      }\r\n    }\r\n\r\n    // Handle clicks on the background to deselect\r\n    svg.on('click', () => {\r\n      d3.selectAll('.link').classed('selected', false);\r\n      setSelectedEdge(null);\r\n    });\r\n\r\n    function ticked() {\r\n      // Update link paths for curved edges with arrows\r\n      linkElements.attr('d', d => {\r\n        const dx = d.target.x - d.source.x;\r\n        const dy = d.target.y - d.source.y;\r\n        const dr = Math.sqrt(dx * dx + dy * dy);\r\n\r\n        // Direct path for arrows\r\n        return `M${d.source.x},${d.source.y} L${d.target.x},${d.target.y}`;\r\n      });\r\n      nodeElements\r\n        .attr('transform', d => `translate(${d.x},${d.y})`);\r\n    }\r\n\r\n    return () => {\r\n      simulation.stop();\r\n      if (linkingState.current.tempLink) linkingState.current.tempLink.remove();\r\n      linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n    };\r\n  }, [nodes, edges, onNodeClick, onCreateEdge, interactionMode]);\r\n\r\n  // Drag handler factory - defined within Graph component scope, before return\r\n  function dragBehavior(simulation, currentMode, svg, linkingStateRef, onCreateEdgeCallback) {\r\n    function dragstarted(event, d) {\r\n      if (currentMode === 'connect') {\r\n        linkingStateRef.current.isLinking = true;\r\n        linkingStateRef.current.sourceNode = d;\r\n        linkingStateRef.current.tempLink = svg.append('path')\r\n          .attr('class', 'temp-link link')\r\n          .attr('d', `M${d.x},${d.y} L${d.x},${d.y}`)\r\n          .attr('stroke-dasharray', '5,5')\r\n          .attr('stroke', '#6c757d')\r\n          .attr('stroke-width', 2)\r\n          .attr('fill', 'none')\r\n          .attr('marker-end', 'url(#arrow)');\r\n        event.sourceEvent.stopPropagation();\r\n      } else if (currentMode === 'reposition') {\r\n        if (!event.active) simulation.alphaTarget(0.3).restart();\r\n        d.fx = d.x;\r\n        d.fy = d.y;\r\n      }\r\n    }\r\n\r\n    function dragged(event, d) {\r\n      if (currentMode === 'connect' && linkingStateRef.current.isLinking) {\r\n        linkingStateRef.current.tempLink\r\n          .attr('d', `M${linkingStateRef.current.sourceNode.x},${linkingStateRef.current.sourceNode.y} L${event.x},${event.y}`);\r\n      } else if (currentMode === 'reposition') {\r\n        d.fx = event.x;\r\n        d.fy = event.y;\r\n      }\r\n    }\r\n\r\n    async function dragended(event, d) {\r\n      if (currentMode === 'connect' && linkingStateRef.current.isLinking) {\r\n        if (linkingStateRef.current.tempLink) linkingStateRef.current.tempLink.remove();\r\n\r\n        const targetElement = event.sourceEvent.target;\r\n        let targetNodeElement = targetElement;\r\n        while(targetNodeElement && !d3.select(targetNodeElement).classed('node')) {\r\n          targetNodeElement = targetNodeElement.parentNode;\r\n        }\r\n        const targetDatum = d3.select(targetNodeElement).datum();\r\n\r\n        if (targetDatum && targetDatum._id && linkingStateRef.current.sourceNode && targetDatum._id !== linkingStateRef.current.sourceNode._id) {\r\n          if (onCreateEdgeCallback) {\r\n            onCreateEdgeCallback(linkingStateRef.current.sourceNode._id, targetDatum._id);\r\n          }\r\n        }\r\n        linkingStateRef.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n      } else if (currentMode === 'reposition') {\r\n        if (!event.active) simulation.alphaTarget(0);\r\n\r\n        // Save the node position to the database\r\n        try {\r\n          if (d._id) {\r\n            await api.updateNodePosition(d._id, { x: d.x, y: d.y });\r\n            console.log(`Node position saved: ${d._id} at (${d.x}, ${d.y})`);\r\n          }\r\n        } catch (err) {\r\n          console.error('Failed to save node position:', err);\r\n        }\r\n      }\r\n    }\r\n\r\n    return d3.drag()\r\n        .on('start', dragstarted)\r\n        .on('drag', dragged)\r\n        .on('end', dragended)\r\n        .filter(() => currentMode === 'connect' || currentMode === 'reposition'); // Filter based on currentMode\r\n  }\r\n\r\n  // Handle edge deletion\r\n  const handleDeleteEdge = () => {\r\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\r\n      onDeleteEdge(selectedEdge._id);\r\n      setSelectedEdge(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-wrapper\">\r\n      <svg ref={svgRef} width=\"600\" height=\"600\" className=\"graph-svg\" />\r\n\r\n      {/* Edge deletion UI */}\r\n      {selectedEdge && (\r\n        <div className=\"edge-controls\">\r\n          <button\r\n            className=\"delete-edge-btn\"\r\n            onClick={handleDeleteEdge}\r\n          >\r\n            Delete Edge\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}