{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Project\\\\client\\\\src\\\\components\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport api from '../services/api.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  nodes = [],\n  edges = [],\n  onNodeClick,\n  onCreateNew,\n  onCreateEdge,\n  onDeleteEdge,\n  interactionMode = 'select',\n  setInteractionMode\n}) => {\n  _s();\n  const svgRef = useRef();\n  const linkingState = useRef({\n    sourceNode: null,\n    tempLink: null,\n    isLinking: false\n  });\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  console.log('Graph received:', {\n    nodeCount: nodes.length,\n    edgeCount: edges.length,\n    mode: interactionMode\n  });\n\n  // Debug: Log the actual nodes and edges data\n  console.log('Nodes data:', JSON.stringify(nodes, null, 2));\n  console.log('Edges data:', JSON.stringify(edges, null, 2));\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n    if (!nodes || nodes.length === 0) {\n      return;\n    }\n\n    // Get the actual dimensions of the container\n    const containerWidth = svgRef.current.clientWidth;\n    const containerHeight = svgRef.current.clientHeight;\n\n    // Set the SVG viewBox to match the container dimensions\n    svg.attr('viewBox', [0, 0, containerWidth, containerHeight]).attr('preserveAspectRatio', 'xMidYMid meet');\n\n    // Add arrow marker definition for edges\n    svg.append(\"defs\").selectAll(\"marker\").data([\"arrow\"]).enter().append(\"marker\").attr(\"id\", d => d).attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 20) // Increased from 15 to position arrow better\n    .attr(\"refY\", 0).attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#6c757d\");\n\n    // Initialize node positions if not set\n    nodes.forEach(node => {\n      if (!node.position || node.position.x === null && node.position.y === null) {\n        node.x = Math.random() * (containerWidth - 100) + 50;\n        node.y = Math.random() * (containerHeight - 100) + 50;\n        node.position = {\n          x: node.x,\n          y: node.y\n        };\n      } else {\n        node.x = node.position.x;\n        node.y = node.position.y;\n      }\n      // Don't fix positions by default to allow force layout to work\n      node.fx = null;\n      node.fy = null;\n    });\n\n    // Create a map of nodes by ID for easy lookup\n    const nodeMap = {};\n    nodes.forEach(node => {\n      nodeMap[node._id] = node;\n    });\n\n    // Process edges to ensure they reference actual node objects\n    const processedEdges = edges.map(edge => ({\n      id: edge._id,\n      source: nodeMap[edge.source] || edge.source,\n      target: nodeMap[edge.target] || edge.target,\n      type: edge.type,\n      _id: edge._id\n    }));\n    const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(processedEdges).id(d => d._id).distance(150)).force('charge', d3.forceManyBody().strength(-300)).force('center', d3.forceCenter(containerWidth / 2, containerHeight / 2)).force('collision', d3.forceCollide().radius(30)).alpha(0.3).alphaDecay(0.05);\n\n    // Create edge paths with arrows\n    const linkElements = svg.append('g').attr('class', 'links').selectAll('path').data(processedEdges).enter().append('path').attr('class', 'link').attr('stroke', '#6c757d').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)').on('click', handleEdgeClick);\n    const nodeElements = svg.append('g').attr('class', 'nodes').selectAll('g').data(nodes).enter().append('g').attr('class', 'node').call(dragBehavior(simulation));\n    nodeElements.append('circle').attr('r', 12).on('click', function (event, d) {\n      event.stopPropagation();\n      setSelectedEdge(null);\n      if (onNodeClick) {\n        onNodeClick(d);\n      }\n    });\n    nodeElements.append('text').text(d => {\n      var _d$_id;\n      return d.title || ((_d$_id = d._id) === null || _d$_id === void 0 ? void 0 : _d$_id.substring(0, 6));\n    }).attr('x', 16).attr('y', 5).attr('text-anchor', 'start').on('click', function (event, d) {\n      event.stopPropagation();\n      setSelectedEdge(null);\n      if (onNodeClick) {\n        onNodeClick(d);\n      }\n    });\n    function handleEdgeClick(event, d) {\n      event.stopPropagation();\n      if (interactionMode === 'select') {\n        d3.selectAll('.link').classed('selected', false);\n        d3.select(event.currentTarget).classed('selected', true);\n        setSelectedEdge(d);\n        if (onNodeClick) onNodeClick(null);\n      }\n    }\n    svg.on('click', () => {\n      d3.selectAll('.link').classed('selected', false);\n      setSelectedEdge(null);\n    });\n    function ticked() {\n      linkElements.attr('d', d => {\n        const sourceX = Math.max(30, Math.min(containerWidth - 30, d.source.x));\n        const sourceY = Math.max(30, Math.min(containerHeight - 30, d.source.y));\n        const targetX = Math.max(30, Math.min(containerWidth - 30, d.target.x));\n        const targetY = Math.max(30, Math.min(containerHeight - 30, d.target.y));\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\n      });\n      nodeElements.attr('transform', d => {\n        const x = Math.max(30, Math.min(containerWidth - 30, d.x));\n        const y = Math.max(30, Math.min(containerHeight - 30, d.y));\n        return `translate(${x},${y})`;\n      });\n    }\n    simulation.on('tick', ticked);\n    return () => {\n      simulation.stop();\n      if (linkingState.current.tempLink) {\n        linkingState.current.tempLink.remove();\n      }\n      linkingState.current = {\n        sourceNode: null,\n        tempLink: null,\n        isLinking: false\n      };\n    };\n  }, [nodes, edges, onNodeClick, onCreateEdge, interactionMode]);\n  function dragBehavior(simulation) {\n    function dragstarted(event, d) {\n      if (interactionMode === 'connect') {\n        linkingState.current.isLinking = true;\n        linkingState.current.sourceNode = d;\n        linkingState.current.tempLink = d3.select(svgRef.current).append('path').attr('class', 'temp-link link').attr('d', `M${d.x},${d.y}L${d.x},${d.y}`).attr('stroke-dasharray', '5,5').attr('stroke', '#6c757d').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)');\n      } else {\n        if (!event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n    }\n    function dragged(event, d) {\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\n        linkingState.current.tempLink.attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${event.x},${event.y}`);\n      } else {\n        d.fx = event.x;\n        d.fy = event.y;\n        d.position = {\n          x: event.x,\n          y: event.y\n        };\n      }\n    }\n    async function dragended(event, d) {\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\n        if (linkingState.current.tempLink) {\n          linkingState.current.tempLink.remove();\n        }\n        const targetElement = event.sourceEvent.target;\n        let targetNodeElement = targetElement;\n        while (targetNodeElement && !d3.select(targetNodeElement).classed('node')) {\n          targetNodeElement = targetNodeElement.parentNode;\n        }\n        const targetDatum = d3.select(targetNodeElement).datum();\n        if (targetDatum && targetDatum._id && linkingState.current.sourceNode && targetDatum._id !== linkingState.current.sourceNode._id) {\n          if (onCreateEdge) {\n            onCreateEdge(linkingState.current.sourceNode._id, targetDatum._id);\n          }\n        }\n        linkingState.current = {\n          sourceNode: null,\n          tempLink: null,\n          isLinking: false\n        };\n      } else {\n        if (!event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n        try {\n          if (d._id) {\n            await api.updateNodePosition(d._id, d.position);\n          }\n        } catch (err) {\n          console.error('Failed to save node position:', err);\n        }\n      }\n    }\n    return d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended);\n  }\n\n  // Handle edge deletion\n  const handleDeleteEdge = () => {\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n      onDeleteEdge(selectedEdge._id);\n      setSelectedEdge(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      className: \"graph-svg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-controls\",\n      children: [selectedEdge && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          if (selectedEdge && selectedEdge._id) {\n            onDeleteEdge(selectedEdge._id);\n            setSelectedEdge(null);\n          }\n        },\n        className: \"delete-edge-btn\",\n        children: \"Remove Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onCreateNew,\n          className: \"create-node-btn\",\n          children: \"Create New Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setInteractionMode(prevMode => prevMode === 'connect' ? 'select' : 'connect'),\n          className: `connect-btn ${interactionMode === 'connect' ? 'active' : ''}`,\n          children: interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"2icq1sebClXcgoofp/iz1izgl/4=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useEffect","useState","d3","api","jsxDEV","_jsxDEV","Graph","nodes","edges","onNodeClick","onCreateNew","onCreateEdge","onDeleteEdge","interactionMode","setInteractionMode","_s","svgRef","linkingState","sourceNode","tempLink","isLinking","selectedEdge","setSelectedEdge","console","log","nodeCount","length","edgeCount","mode","JSON","stringify","svg","select","current","selectAll","remove","containerWidth","clientWidth","containerHeight","clientHeight","attr","append","data","enter","d","forEach","node","position","x","y","Math","random","fx","fy","nodeMap","_id","processedEdges","map","edge","id","source","target","type","simulation","forceSimulation","force","forceLink","distance","forceManyBody","strength","forceCenter","forceCollide","radius","alpha","alphaDecay","linkElements","on","handleEdgeClick","nodeElements","call","dragBehavior","event","stopPropagation","text","_d$_id","title","substring","classed","currentTarget","ticked","sourceX","max","min","sourceY","targetX","targetY","stop","dragstarted","active","alphaTarget","restart","dragged","dragended","targetElement","sourceEvent","targetNodeElement","parentNode","targetDatum","datum","updateNodePosition","err","error","drag","handleDeleteEdge","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","prevMode","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Project/client/src/components/graph.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\nimport './Graph.css';\r\nimport api from '../services/api.js';\r\n\r\nconst Graph = ({ nodes = [], edges = [], onNodeClick, onCreateNew, onCreateEdge, onDeleteEdge, interactionMode = 'select', setInteractionMode }) => {\r\n  const svgRef = useRef();\r\n  const linkingState = useRef({ sourceNode: null, tempLink: null, isLinking: false });\r\n  const [selectedEdge, setSelectedEdge] = useState(null);\r\n\r\n  console.log('Graph received:', {\r\n    nodeCount: nodes.length,\r\n    edgeCount: edges.length,\r\n    mode: interactionMode\r\n  });\r\n\r\n  // Debug: Log the actual nodes and edges data\r\n  console.log('Nodes data:', JSON.stringify(nodes, null, 2));\r\n  console.log('Edges data:', JSON.stringify(edges, null, 2));\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll('*').remove();\r\n\r\n    if (!nodes || nodes.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // Get the actual dimensions of the container\r\n    const containerWidth = svgRef.current.clientWidth;\r\n    const containerHeight = svgRef.current.clientHeight;\r\n\r\n    // Set the SVG viewBox to match the container dimensions\r\n    svg\r\n      .attr('viewBox', [0, 0, containerWidth, containerHeight])\r\n      .attr('preserveAspectRatio', 'xMidYMid meet');\r\n\r\n    // Add arrow marker definition for edges\r\n    svg.append(\"defs\").selectAll(\"marker\")\r\n      .data([\"arrow\"])\r\n      .enter().append(\"marker\")\r\n      .attr(\"id\", d => d)\r\n      .attr(\"viewBox\", \"0 -5 10 10\")\r\n      .attr(\"refX\", 20) // Increased from 15 to position arrow better\r\n      .attr(\"refY\", 0)\r\n      .attr(\"markerWidth\", 6)\r\n      .attr(\"markerHeight\", 6)\r\n      .attr(\"orient\", \"auto\")\r\n      .append(\"path\")\r\n      .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n      .attr(\"fill\", \"#6c757d\");\r\n\r\n    // Initialize node positions if not set\r\n    nodes.forEach(node => {\r\n      if (!node.position || (node.position.x === null && node.position.y === null)) {\r\n        node.x = Math.random() * (containerWidth - 100) + 50;\r\n        node.y = Math.random() * (containerHeight - 100) + 50;\r\n        node.position = { x: node.x, y: node.y };\r\n      } else {\r\n        node.x = node.position.x;\r\n        node.y = node.position.y;\r\n      }\r\n      // Don't fix positions by default to allow force layout to work\r\n      node.fx = null;\r\n      node.fy = null;\r\n    });\r\n\r\n    // Create a map of nodes by ID for easy lookup\r\n    const nodeMap = {};\r\n    nodes.forEach(node => {\r\n      nodeMap[node._id] = node;\r\n    });\r\n\r\n    // Process edges to ensure they reference actual node objects\r\n    const processedEdges = edges.map(edge => ({\r\n      id: edge._id,\r\n      source: nodeMap[edge.source] || edge.source,\r\n      target: nodeMap[edge.target] || edge.target,\r\n      type: edge.type,\r\n      _id: edge._id\r\n    }));\r\n\r\n    const simulation = d3.forceSimulation(nodes)\r\n      .force('link', d3.forceLink(processedEdges).id(d => d._id).distance(150))\r\n      .force('charge', d3.forceManyBody().strength(-300))\r\n      .force('center', d3.forceCenter(containerWidth / 2, containerHeight / 2))\r\n      .force('collision', d3.forceCollide().radius(30))\r\n      .alpha(0.3)\r\n      .alphaDecay(0.05);\r\n\r\n    // Create edge paths with arrows\r\n    const linkElements = svg.append('g')\r\n      .attr('class', 'links')\r\n      .selectAll('path')\r\n      .data(processedEdges)\r\n      .enter().append('path')\r\n      .attr('class', 'link')\r\n      .attr('stroke', '#6c757d')\r\n      .attr('stroke-width', 2)\r\n      .attr('fill', 'none')\r\n      .attr('marker-end', 'url(#arrow)')\r\n      .on('click', handleEdgeClick);\r\n\r\n    const nodeElements = svg.append('g')\r\n      .attr('class', 'nodes')\r\n      .selectAll('g')\r\n      .data(nodes)\r\n      .enter().append('g')\r\n      .attr('class', 'node')\r\n      .call(dragBehavior(simulation));\r\n\r\n    nodeElements.append('circle')\r\n      .attr('r', 12)\r\n      .on('click', function(event, d) {\r\n        event.stopPropagation();\r\n        setSelectedEdge(null);\r\n        if (onNodeClick) {\r\n          onNodeClick(d);\r\n        }\r\n      });\r\n\r\n    nodeElements.append('text')\r\n      .text(d => d.title || d._id?.substring(0, 6))\r\n      .attr('x', 16)\r\n      .attr('y', 5)\r\n      .attr('text-anchor', 'start')\r\n      .on('click', function(event, d) {\r\n        event.stopPropagation();\r\n        setSelectedEdge(null);\r\n        if (onNodeClick) {\r\n          onNodeClick(d);\r\n        }\r\n      });\r\n\r\n    function handleEdgeClick(event, d) {\r\n      event.stopPropagation();\r\n      if (interactionMode === 'select') {\r\n        d3.selectAll('.link').classed('selected', false);\r\n        d3.select(event.currentTarget).classed('selected', true);\r\n        setSelectedEdge(d);\r\n        if (onNodeClick) onNodeClick(null);\r\n      }\r\n    }\r\n\r\n    svg.on('click', () => {\r\n      d3.selectAll('.link').classed('selected', false);\r\n      setSelectedEdge(null);\r\n    });\r\n\r\n    function ticked() {\r\n      linkElements.attr('d', d => {\r\n        const sourceX = Math.max(30, Math.min(containerWidth - 30, d.source.x));\r\n        const sourceY = Math.max(30, Math.min(containerHeight - 30, d.source.y));\r\n        const targetX = Math.max(30, Math.min(containerWidth - 30, d.target.x));\r\n        const targetY = Math.max(30, Math.min(containerHeight - 30, d.target.y));\r\n        \r\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\r\n      });\r\n\r\n      nodeElements.attr('transform', d => {\r\n        const x = Math.max(30, Math.min(containerWidth - 30, d.x));\r\n        const y = Math.max(30, Math.min(containerHeight - 30, d.y));\r\n        return `translate(${x},${y})`;\r\n      });\r\n    }\r\n\r\n    simulation.on('tick', ticked);\r\n\r\n    return () => {\r\n      simulation.stop();\r\n      if (linkingState.current.tempLink) {\r\n        linkingState.current.tempLink.remove();\r\n      }\r\n      linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n    };\r\n  }, [nodes, edges, onNodeClick, onCreateEdge, interactionMode]);\r\n\r\n  function dragBehavior(simulation) {\r\n    function dragstarted(event, d) {\r\n      if (interactionMode === 'connect') {\r\n        linkingState.current.isLinking = true;\r\n        linkingState.current.sourceNode = d;\r\n        linkingState.current.tempLink = d3.select(svgRef.current).append('path')\r\n          .attr('class', 'temp-link link')\r\n          .attr('d', `M${d.x},${d.y}L${d.x},${d.y}`)\r\n          .attr('stroke-dasharray', '5,5')\r\n          .attr('stroke', '#6c757d')\r\n          .attr('stroke-width', 2)\r\n          .attr('fill', 'none')\r\n          .attr('marker-end', 'url(#arrow)');\r\n      } else {\r\n        if (!event.active) simulation.alphaTarget(0.3).restart();\r\n        d.fx = d.x;\r\n        d.fy = d.y;\r\n      }\r\n    }\r\n\r\n    function dragged(event, d) {\r\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\r\n        linkingState.current.tempLink\r\n          .attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${event.x},${event.y}`);\r\n      } else {\r\n        d.fx = event.x;\r\n        d.fy = event.y;\r\n        d.position = { x: event.x, y: event.y };\r\n      }\r\n    }\r\n\r\n    async function dragended(event, d) {\r\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\r\n        if (linkingState.current.tempLink) {\r\n          linkingState.current.tempLink.remove();\r\n        }\r\n\r\n        const targetElement = event.sourceEvent.target;\r\n        let targetNodeElement = targetElement;\r\n        while (targetNodeElement && !d3.select(targetNodeElement).classed('node')) {\r\n          targetNodeElement = targetNodeElement.parentNode;\r\n        }\r\n        const targetDatum = d3.select(targetNodeElement).datum();\r\n\r\n        if (targetDatum && targetDatum._id && linkingState.current.sourceNode && targetDatum._id !== linkingState.current.sourceNode._id) {\r\n          if (onCreateEdge) {\r\n            onCreateEdge(linkingState.current.sourceNode._id, targetDatum._id);\r\n          }\r\n        }\r\n        linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n      } else {\r\n        if (!event.active) simulation.alphaTarget(0);\r\n        d.fx = null;\r\n        d.fy = null;\r\n\r\n        try {\r\n          if (d._id) {\r\n            await api.updateNodePosition(d._id, d.position);\r\n          }\r\n        } catch (err) {\r\n          console.error('Failed to save node position:', err);\r\n        }\r\n      }\r\n    }\r\n\r\n    return d3.drag()\r\n      .on('start', dragstarted)\r\n      .on('drag', dragged)\r\n      .on('end', dragended);\r\n  }\r\n\r\n  // Handle edge deletion\r\n  const handleDeleteEdge = () => {\r\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\r\n      onDeleteEdge(selectedEdge._id);\r\n      setSelectedEdge(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-wrapper\">\r\n      <svg ref={svgRef} className=\"graph-svg\" />\r\n      <div className=\"graph-controls\">\r\n        {selectedEdge && (\r\n          <button\r\n            onClick={() => {\r\n              if (selectedEdge && selectedEdge._id) {\r\n                onDeleteEdge(selectedEdge._id);\r\n                setSelectedEdge(null);\r\n              }\r\n            }}\r\n            className=\"delete-edge-btn\"\r\n          >\r\n            Remove Edge\r\n          </button>\r\n        )}\r\n        <div className=\"button-row\">\r\n          <button onClick={onCreateNew} className=\"create-node-btn\">\r\n            Create New Node\r\n          </button>\r\n          <button\r\n            onClick={() => setInteractionMode(prevMode => prevMode === 'connect' ? 'select' : 'connect')}\r\n            className={`connect-btn ${interactionMode === 'connect' ? 'active' : ''}`}\r\n          >\r\n            {interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}