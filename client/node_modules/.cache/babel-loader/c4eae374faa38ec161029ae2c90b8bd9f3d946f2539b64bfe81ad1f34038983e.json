{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Mind Mosaic\\\\client\\\\src\\\\components\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport api from '../services/api.js';\nimport PlusIcon from './icons/PlusIcon';\nimport LinkIcon from './icons/LinkIcon';\nimport TrashIcon from './icons/TrashIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  nodes = [],\n  edges = [],\n  onNodeClick,\n  onNodeDoubleClick,\n  onCreateNew,\n  onCreateEdge,\n  onDeleteEdge,\n  interactionMode = 'select',\n  setInteractionMode,\n  onBackgroundClick,\n  isAnyPanelVisible\n}) => {\n  _s();\n  // Early return if no nodes or edges are provided\n  if (!nodes || !Array.isArray(nodes) || nodes.length === 0) {\n    return null;\n  }\n\n  // Validate edges and ensure they have required properties\n  const validEdges = edges.filter(edge => edge && edge.source && edge.target && nodes.some(n => n._id === edge.source) && nodes.some(n => n._id === edge.target));\n  const svgRef = useRef(null);\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const linkingState = useRef({\n    sourceNode: null,\n    tempLink: null,\n    isLinking: false\n  });\n  const [liveContainerWidth, setLiveContainerWidth] = useState(0);\n  const [liveContainerHeight, setLiveContainerHeight] = useState(0);\n\n  // Connect button component\n  const ConnectButton = ({\n    mode,\n    setMode,\n    linkState,\n    svg\n  }) => {\n    const handleClick = () => {\n      const newMode = mode === 'connect' ? 'select' : 'connect';\n      setMode(newMode);\n      if (newMode === 'select') {\n        d3.select(svg.current).selectAll('.temp-link').remove();\n        linkState.current = {\n          sourceNode: null,\n          tempLink: null,\n          isLinking: false\n        };\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      className: `button accent ${mode === 'connect' ? 'active' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(LinkIcon, {\n        style: {\n          width: '1rem',\n          height: '1rem',\n          marginRight: '0.5rem'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), mode === 'connect' ? 'Stop Connecting' : 'Connect Nodes']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Drag behavior\n  const dragBehavior = (sim, svgInstance, containerWidth, containerHeight) => {\n    return d3.drag().on('start', function (event, d) {\n      if (interactionMode !== 'select') return;\n      event.sourceEvent.stopPropagation();\n      if (!event.active) sim.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }).on('drag', function (event, d) {\n      if (interactionMode !== 'select') return;\n      event.sourceEvent.stopPropagation();\n      d.fx = event.x;\n      d.fy = event.y;\n    }).on('end', function (event, d) {\n      if (interactionMode !== 'select') return;\n      if (!event.active) sim.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    });\n  };\n\n  // Create a node map for quick lookup\n  const nodeMap = new Map(nodes.map(node => [node._id, node]));\n  console.log(\"CURRENT INTERACTION MODE:\", interactionMode);\n  const [isSvgMounted, setIsSvgMounted] = useState(false);\n  const simulationRef = useRef(); // Ref to store the D3 simulation instance\n  const clickTimeout = useRef(null);\n  const graphDimensionsRef = useRef({\n    width: 600,\n    height: 400\n  }); // For App.js, needs live dimensions\n  const stableViewBoxDimensionsRef = useRef({\n    width: 600,\n    height: 400\n  }); // For D3 viewBox, needs initial stable dimensions\n\n  // console.log('Graph received:', {\n  //   nodeCount: nodes.length,\n  //   edgeCount: edges.length,\n  //   mode: interactionMode\n  // });\n\n  // Debug: Log the actual nodes and edges data\n  // console.log('Nodes data:', JSON.stringify(nodes, null, 2));\n  // console.log('Edges data:', JSON.stringify(edges, null, 2));\n\n  console.log(\"Current onCreateEdge function:\", onCreateEdge);\n  const handleMouseMoveLinking = useCallback(event => {\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\n      return;\n    }\n    if (!svgRef.current) return;\n    const [x, y] = d3.pointer(event, svgRef.current);\n\n    // Update the temp link to follow the mouse\n    linkingState.current.tempLink.attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\n  }, [svgRef, linkingState]);\n  const handleMouseUpLinking = useCallback(event => {\n    if (linkingState.current.isLinking) {\n      var _linkingState$current5;\n      if (!svgRef.current) return;\n      const clickedDomElement = event.target;\n      const closestNodeGroup = clickedDomElement.closest('.node');\n      const isNode = !!closestNodeGroup;\n      if (!isNode) {\n        var _linkingState$current;\n        console.log('Clicked on empty space - cancelling connection');\n\n        // Clean up\n        (_linkingState$current = linkingState.current.tempLink) === null || _linkingState$current === void 0 ? void 0 : _linkingState$current.remove();\n\n        // Reset visual feedback\n        d3.selectAll('.node circle').attr('stroke', '#1B5E20').attr('stroke-width', 1.5);\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Get the target node ID\n      const targetNodeElement = d3.select(closestNodeGroup);\n      if (!targetNodeElement || !targetNodeElement.node()) {\n        var _linkingState$current2;\n        console.log('Failed to find target node element');\n        (_linkingState$current2 = linkingState.current.tempLink) === null || _linkingState$current2 === void 0 ? void 0 : _linkingState$current2.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n      const targetNode = targetNodeElement.datum();\n      if (!targetNode || !targetNode._id) {\n        var _linkingState$current3;\n        console.log('Failed to get valid target node data');\n        (_linkingState$current3 = linkingState.current.tempLink) === null || _linkingState$current3 === void 0 ? void 0 : _linkingState$current3.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Complete the connection\n      const sourceNode = linkingState.current.sourceNode;\n      if (sourceNode._id === targetNode._id) {\n        var _linkingState$current4;\n        console.log('Cannot connect node to itself');\n        (_linkingState$current4 = linkingState.current.tempLink) === null || _linkingState$current4 === void 0 ? void 0 : _linkingState$current4.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Create the edge\n      const edgeData = {\n        source: sourceNode._id,\n        target: targetNode._id,\n        type: 'related',\n        weight: 1\n      };\n\n      // Call the onCreateEdge callback\n      if (onCreateEdge) {\n        onCreateEdge(edgeData);\n      }\n\n      // Clean up\n      (_linkingState$current5 = linkingState.current.tempLink) === null || _linkingState$current5 === void 0 ? void 0 : _linkingState$current5.remove();\n      linkingState.current.isLinking = false;\n      linkingState.current.sourceNode = null;\n      linkingState.current.tempLink = null;\n\n      // Reset visual feedback\n      d3.selectAll('.node circle').attr('stroke', '#1B5E20').attr('stroke-width', 1.5);\n    }\n  }, [svgRef, linkingState, onCreateEdge]);\n  useEffect(() => {\n    const svgInstance = d3.select(svgRef.current);\n    if (interactionMode === 'connect') {\n      const onMouseMoveLinking = handleMouseMoveLinking;\n      const onMouseUpLinking = handleMouseUpLinking;\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\n      // console.log('Global linking listeners ADDED to SVG for connect mode.');\n\n      return () => {\n        svgInstance.on('mousemove.linking', null);\n        svgInstance.on('mouseup.linking', null);\n        // console.log('Global linking listeners REMOVED from SVG.');\n      };\n    } else {\n      svgInstance.on('mousemove.linking', null);\n      svgInstance.on('mouseup.linking', null);\n      if (linkingState.current.isLinking) {\n        var _linkingState$current6;\n        // console.log('Exited connect mode with active link: Forcibly cleaning up.');\n        (_linkingState$current6 = linkingState.current.tempLink) === null || _linkingState$current6 === void 0 ? void 0 : _linkingState$current6.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return () => {};\n    }\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]);\n\n  // Main effect for D3 rendering and updates\n  useEffect(() => {\n    // console.log('[Graph Effect - Main D3] Running. Nodes count:', nodes.length, 'Edges count:', edges.length);\n    // console.log('[Graph Effect - Main D3] Nodes prop:', JSON.parse(JSON.stringify(nodes)));\n    // console.log('[Graph Effect - Main D3] Edges prop:', JSON.parse(JSON.stringify(edges)));\n\n    const currentSvg = svgRef.current;\n    if (!currentSvg) {\n      // console.log('[Graph Effect - Main D3] SVG ref not available yet. Aborting D3 setup.');\n      return; // SVG element isn't rendered yet (e.g. nodes are empty)\n    }\n\n    // Initialize and update simulation\n    const initialWidth = graphDimensionsRef.current.width;\n    const initialHeight = graphDimensionsRef.current.height;\n    if (!simulationRef.current) {\n      simulationRef.current = d3.forceSimulation(nodes).force('link', d3.forceLink(edges).id(d => d._id).distance(150)).force('charge', d3.forceManyBody().strength(-500)).force('center', d3.forceCenter(initialWidth / 2, initialHeight / 2));\n    } else {\n      simulationRef.current.nodes(nodes).force('link', d3.forceLink(edges).id(d => d._id).distance(150));\n    }\n\n    // Start simulation with a gentle kick\n    simulationRef.current.alpha(0.3).restart();\n    const svg = d3.select(currentSvg); // Use currentSvg directly as it's confirmed not null\n    const simulation = simulationRef.current;\n\n    // This check should ideally not be hit if the above init logic works, but keep as safeguard\n    if (!simulation) {\n      // console.error('[Graph Effect - Main D3] Simulation ref is STILL not set! This is unexpected. Aborting.');\n      return;\n    }\n    // console.log('[Graph Effect - Main D3] Simulation instance retrieved:', simulation);\n\n    svg.on('click.diagnostic', event => {\n      // console.log('[SVG DIAGNOSTIC CLICK] SVG itself was clicked. Target:', event.target);\n    });\n\n    // 1. Manage the background rectangle: append if not exists, ensure attributes.\n    let backgroundRect = svg.select('rect.background');\n    if (backgroundRect.empty()) {\n      backgroundRect = svg.append('rect').attr('class', 'background');\n    }\n    backgroundRect // Ensure attributes are set on every run if they could change (e.g. dimensions)\n    .attr('width', '100%').attr('height', '100%').attr('fill', 'transparent').on('click', event => {\n      // console.log('[Background Rect Clicked Directly] Target:', event.target);\n      if (event.target.classList.contains('background')) {\n        d3.selectAll('.link').classed('selected', false);\n        setSelectedEdge(null);\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    });\n\n    // 2. Ensure dedicated groups for links and nodes exist (append if not).\n    let linkGroup = svg.select('g.links-group');\n    if (linkGroup.empty()) {\n      linkGroup = svg.append('g').attr('class', 'links-group');\n    }\n    let nodeGroup = svg.select('g.nodes-group');\n    if (nodeGroup.empty()) {\n      nodeGroup = svg.append('g').attr('class', 'nodes-group');\n    }\n\n    // 3. Manage defs for markers: append if not exists.\n    let defs = svg.select('defs');\n    if (defs.empty()) {\n      defs = svg.append('defs');\n    }\n    // Check if marker already exists before appending\n    if (defs.select('#arrow').empty()) {\n      defs.append(\"marker\").attr(\"id\", \"arrow\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 20).attr(\"refY\", 0).attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#A8C3A4\");\n    }\n\n    // Determine live dimensions for clamping and for App.js new node positioning\n    const liveContainerWidth = currentSvg.clientWidth;\n    const liveContainerHeight = currentSvg.clientHeight;\n    graphDimensionsRef.current = {\n      width: liveContainerWidth,\n      height: liveContainerHeight\n    }; // Update for App.js\n\n    // Set stable viewBox dimensions only once when valid live dimensions are first available\n    if (stableViewBoxDimensionsRef.current.width === 0 && liveContainerWidth > 0) {\n      stableViewBoxDimensionsRef.current.width = liveContainerWidth;\n      // console.log(`[Graph Dimensions] Stable viewBoxWidth SET to: ${liveContainerWidth}`);\n    }\n    if (stableViewBoxDimensionsRef.current.height === 0 && liveContainerHeight > 0) {\n      stableViewBoxDimensionsRef.current.height = liveContainerHeight;\n      // console.log(`[Graph Dimensions] Stable viewBoxHeight SET to: ${liveContainerHeight}`);\n    }\n\n    // Use stable dimensions for the viewBox if available, otherwise fallback to live (should only be for very first paint)\n    const viewBoxWidth = stableViewBoxDimensionsRef.current.width > 0 ? stableViewBoxDimensionsRef.current.width : liveContainerWidth;\n    const viewBoxHeight = stableViewBoxDimensionsRef.current.height > 0 ? stableViewBoxDimensionsRef.current.height : liveContainerHeight;\n\n    // console.log(`[Graph Dimensions] Using for viewBox: ${viewBoxWidth}x${viewBoxHeight}. Live: ${liveContainerWidth}x${liveContainerHeight}`);\n\n    svg.attr('viewBox', [0, 0, viewBoxWidth, viewBoxHeight]).attr('preserveAspectRatio', 'xMidYMid meet');\n\n    // Update node positions (fx, fy) before passing to simulation\n    nodes.forEach(node => {\n      const hasValidPositionProp = node.position && typeof node.position.x === 'number' && typeof node.position.y === 'number';\n      if (hasValidPositionProp) {\n        node.x = node.position.x;\n        node.y = node.position.y;\n        node.fx = node.position.x;\n        node.fy = node.position.y;\n      } else {\n        // Position from prop is invalid or missing. Node should be allowed to be placed by simulation.\n        // Or, if it's a new node without prior x/y, give it a random start.\n        node.x = typeof node.x === 'number' ? node.x : Math.random() * (liveContainerWidth - 100) + 50;\n        node.y = typeof node.y === 'number' ? node.y : Math.random() * (liveContainerHeight - 100) + 50;\n        node.fx = null; // Explicitly nullify fx/fy if position from prop is not definitive.\n        node.fy = null;\n\n        // For consistency or if other parts of the code expect node.position to exist:\n        // Update node.position to reflect the initial x,y that will be used by the simulation (if fx/fy are null).\n        // This ensures that if this node object is reused, its .position reflects its current state.\n        node.position = {\n          x: node.x,\n          y: node.y\n        };\n      }\n    });\n    // console.log('[D3 Data] Nodes after position init:', JSON.parse(JSON.stringify(nodes))); // Deep copy for logging\n\n    // Validate and process nodes and edges\n    const nodeMap = {};\n    nodes.forEach(node => {\n      if (node && node._id) {\n        nodeMap[node._id] = node;\n      }\n    });\n\n    // Filter out invalid edges\n    const validEdges = edges.filter(edge => edge && edge.source && edge.target && nodeMap[edge.source] && nodeMap[edge.target]);\n    const processedEdges = validEdges.map(edge => ({\n      id: edge._id,\n      source: nodeMap[edge.source],\n      target: nodeMap[edge.target],\n      type: edge.type || 'related',\n      _id: edge._id\n    }));\n\n    // Log edge processing for debugging\n    console.log('Processed edges count:', processedEdges.length);\n    console.log('Invalid edges count:', edges.length - validEdges.length);\n    // console.log('[D3 Data] Processed Edges:', JSON.parse(JSON.stringify(processedEdges)));\n\n    simulation.nodes(nodes).force('link').links(edges);\n\n    // Handle link rendering\n    const linkElements = linkGroup.selectAll('path.link').data(edges, d => d.id).join('path').attr('class', 'link').attr('data-id', d => (d === null || d === void 0 ? void 0 : d.id) || '').attr('stroke', '#A8C3A4').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)').style('cursor', 'pointer').on('click', handleEdgeClick);\n\n    // Add error handling for click events\n    linkElements.on('click', (event, d) => {\n      try {\n        if (interactionMode === 'select') {\n          handleEdgeClick(event, d);\n        }\n      } catch (err) {\n        console.error('Error handling edge click:', err);\n      }\n    });\n    // console.log('[D3 Elements] linkElements count:', linkElements.size());\n\n    // Handle node rendering\n    const nodeElements = nodeGroup.selectAll('g.node').data(nodes, d => d._id).join(enter => {\n      const g = enter.append('g').attr('class', 'node').attr('data-id', d => d._id).style('cursor', 'pointer').call(dragBehavior(simulation, svg.node(), liveContainerWidth, liveContainerHeight));\n\n      // Create circle\n      const circle = g.append('circle').attr('r', 12).attr('fill', '#2E7D32').attr('stroke', '#1B5E20').attr('stroke-width', 1.5).style('pointer-events', 'all');\n\n      // Create text\n      g.append('text').text(d => d.title || d._id.substring(0, 6) || 'Node').attr('x', 16).attr('y', 5).attr('fill', '#FAF3E0').attr('text-anchor', 'start').style('pointer-events', 'none');\n\n      // Add click and double-click handlers\n      g.on('click', (event, d) => {\n        event.stopPropagation();\n        if (interactionMode === 'select' && onNodeClick) {\n          onNodeClick(d);\n        }\n      }).on('dblclick', (event, d) => {\n        event.stopPropagation();\n        if (interactionMode === 'select' && onNodeDoubleClick) {\n          onNodeDoubleClick(d);\n        }\n      });\n      return g;\n    }, update => {\n      const circle = update.select('circle');\n      if (circle.node()) {\n        circle.call(dragBehavior(simulation, svg.node(), liveContainerWidth, liveContainerHeight));\n      }\n      update.on('click', (event, d) => {\n        event.stopPropagation();\n        if (interactionMode === 'select' && onNodeClick) {\n          onNodeClick(d);\n        }\n      }).on('dblclick', (event, d) => {\n        event.stopPropagation();\n        if (interactionMode === 'select' && onNodeDoubleClick) {\n          onNodeDoubleClick(d);\n        }\n      });\n      return update;\n    }, exit => {\n      exit.remove();\n    });\n    simulation.on('tick', () => {\n      linkElements.attr('d', d => `M${d.source.x},${d.source.y}L${d.target.x},${d.target.y}`);\n      nodeElements.attr('transform', d => `translate(${d.x},${d.y})`);\n    });\n    function handleEdgeClick(event, d) {\n      event.stopPropagation();\n      if (interactionMode === 'select') {\n        d3.selectAll('.link').classed('selected', false);\n        d3.select(event.currentTarget).classed('selected', true);\n        setSelectedEdge(d);\n        if (onNodeClick) {\n          onNodeClick(null);\n        }\n      }\n    }\n    function handleLinking(event, d) {\n      if (interactionMode !== 'connect') return;\n      if (!linkingState.current.isLinking) {\n        // Start connecting\n        linkingState.current.sourceNode = d;\n        linkingState.current.isLinking = true;\n\n        // Create temporary link\n        const tempLink = linkGroup.append('path').attr('class', 'temp-link').attr('stroke', '#B87333').attr('stroke-width', 2).attr('stroke-dasharray', '5,5').attr('marker-end', 'url(#arrow)');\n        linkingState.current.tempLink = tempLink;\n\n        // Add visual feedback to the source node\n        d3.select(event.currentTarget).select('circle').attr('stroke', '#B87333').attr('stroke-width', 3);\n      } else {\n        var _linkingState$current7, _linkingState$current8;\n        // Complete the connection\n        const targetNode = d;\n        if (((_linkingState$current7 = linkingState.current.sourceNode) === null || _linkingState$current7 === void 0 ? void 0 : _linkingState$current7._id) !== (targetNode === null || targetNode === void 0 ? void 0 : targetNode._id)) {\n          const edgeData = {\n            source: linkingState.current.sourceNode._id,\n            target: targetNode._id,\n            type: 'related',\n            weight: 1\n          };\n          if (onCreateEdge) {\n            onCreateEdge(edgeData);\n          }\n        }\n\n        // Clean up\n        (_linkingState$current8 = linkingState.current.tempLink) === null || _linkingState$current8 === void 0 ? void 0 : _linkingState$current8.remove();\n\n        // Reset visual feedback\n        d3.selectAll('.node circle').attr('stroke', '#1B5E20').attr('stroke-width', 1.5);\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return;\n    }\n\n    // Handle select mode\n    if (interactionMode === 'select') {\n      // Single click opens node viewer\n      if (onNodeClick) {\n        onNodeClick(d);\n      }\n    }\n  }, [interactionMode, linkingState, onCreateEdge, svgRef]);\n\n  // Handle keyboard delete for selected edges\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n          onDeleteEdge(selectedEdge._id);\n          setSelectedEdge(null);\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedEdge, onDeleteEdge]);\n  useEffect(() => {\n    if (svgRef.current) {\n      setIsSvgMounted(true);\n    }\n    return () => setIsSvgMounted(false);\n  }, []);\n\n  // Node click handler\n  const handleNodeClick = useCallback((event, d) => {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    // Handle connection mode\n    if (interactionMode === 'connect') {\n      if (!linkingState.current.isLinking) {\n        // Start a new connection\n        linkingState.current = {\n          isLinking: true,\n          sourceNode: d,\n          tempLink: d3.select(svgRef.current).append('path').attr('class', 'temp-link').attr('d', `M${d.x},${d.y}L${d.x},${d.y}`).attr('stroke-dasharray', '5,5').attr('stroke', '#B87333').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)').raise()\n        };\n\n        // Add visual feedback to the source node\n        d3.select(event.currentTarget).select('circle').attr('stroke', '#B87333').attr('stroke-width', 3);\n      } else {\n        var _linkingState$current9, _linkingState$current10;\n        // Complete the connection\n        const targetNode = d;\n        if (((_linkingState$current9 = linkingState.current.sourceNode) === null || _linkingState$current9 === void 0 ? void 0 : _linkingState$current9._id) !== (targetNode === null || targetNode === void 0 ? void 0 : targetNode._id)) {\n          const edgeData = {\n            source: linkingState.current.sourceNode._id,\n            target: targetNode._id,\n            type: 'related',\n            weight: 1\n          };\n          if (onCreateEdge) {\n            onCreateEdge(edgeData);\n          }\n        }\n\n        // Clean up\n        (_linkingState$current10 = linkingState.current.tempLink) === null || _linkingState$current10 === void 0 ? void 0 : _linkingState$current10.remove();\n        d3.selectAll('.node circle').attr('stroke', '#1B5E20').attr('stroke-width', 1.5);\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return;\n    }\n    if (interactionMode === 'select') {\n      if (onNodeClick) {\n        onNodeClick(d);\n      }\n    }\n  }, [interactionMode, linkingState, onCreateEdge, svgRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-container\",\n    style: {\n      width: '100%',\n      height: '100%',\n      padding: '1rem',\n      boxSizing: 'border-box',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      className: \"graph\",\n      style: {\n        width: '100%',\n        height: '100%',\n        pointerEvents: 'all'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n        children: /*#__PURE__*/_jsxDEV(\"marker\", {\n          id: \"arrow\",\n          markerWidth: \"10\",\n          markerHeight: \"10\",\n          refX: \"5\",\n          refY: \"5\",\n          orient: \"auto\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M0,0 L0,10 L10,5 z\",\n            fill: \"#A8C3A4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 677,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"links-group\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"nodes-group\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      style: {\n        position: 'absolute',\n        bottom: '1rem',\n        left: '50%',\n        transform: 'translateX(-50%)',\n        display: 'flex',\n        gap: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onCreateNew,\n        className: \"button primary\",\n        children: [/*#__PURE__*/_jsxDEV(PlusIcon, {\n          style: {\n            width: '1rem',\n            height: '1rem',\n            marginRight: '0.5rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 11\n        }, this), \"Create New Node\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ConnectButton, {\n        interactionMode: interactionMode,\n        setInteractionMode: setInteractionMode,\n        linkingState: linkingState,\n        svgRef: svgRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 683,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 669,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"P24T1b3ZFgxQXyZYrL2BZ7KiXRE=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","d3","api","PlusIcon","LinkIcon","TrashIcon","jsxDEV","_jsxDEV","Graph","nodes","edges","onNodeClick","onNodeDoubleClick","onCreateNew","onCreateEdge","onDeleteEdge","interactionMode","setInteractionMode","onBackgroundClick","isAnyPanelVisible","_s","Array","isArray","length","validEdges","filter","edge","source","target","some","n","_id","svgRef","selectedEdge","setSelectedEdge","linkingState","sourceNode","tempLink","isLinking","liveContainerWidth","setLiveContainerWidth","liveContainerHeight","setLiveContainerHeight","ConnectButton","mode","setMode","linkState","svg","handleClick","newMode","select","current","selectAll","remove","onClick","className","children","style","width","height","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","dragBehavior","sim","svgInstance","containerWidth","containerHeight","drag","on","event","d","sourceEvent","stopPropagation","active","alphaTarget","restart","fx","x","fy","y","nodeMap","Map","map","node","console","log","isSvgMounted","setIsSvgMounted","simulationRef","clickTimeout","graphDimensionsRef","stableViewBoxDimensionsRef","handleMouseMoveLinking","pointer","attr","handleMouseUpLinking","_linkingState$current5","clickedDomElement","closestNodeGroup","closest","isNode","_linkingState$current","targetNodeElement","_linkingState$current2","targetNode","datum","_linkingState$current3","_linkingState$current4","edgeData","type","weight","onMouseMoveLinking","onMouseUpLinking","_linkingState$current6","currentSvg","initialWidth","initialHeight","forceSimulation","force","forceLink","id","distance","forceManyBody","strength","forceCenter","alpha","simulation","backgroundRect","empty","append","classList","contains","classed","linkGroup","nodeGroup","defs","clientWidth","clientHeight","viewBoxWidth","viewBoxHeight","forEach","hasValidPositionProp","position","Math","random","processedEdges","links","linkElements","data","join","handleEdgeClick","err","error","nodeElements","enter","g","call","circle","text","title","substring","update","exit","currentTarget","handleLinking","_linkingState$current7","_linkingState$current8","handleKeyDown","key","window","addEventListener","removeEventListener","handleNodeClick","defaultPrevented","raise","_linkingState$current9","_linkingState$current10","padding","boxSizing","ref","pointerEvents","markerWidth","markerHeight","refX","refY","orient","fill","bottom","left","transform","display","gap","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Mind Mosaic/client/src/components/graph.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport api from '../services/api.js';\nimport PlusIcon from './icons/PlusIcon';\nimport LinkIcon from './icons/LinkIcon';\nimport TrashIcon from './icons/TrashIcon';\n\nconst Graph = ({ nodes = [], edges = [], onNodeClick, onNodeDoubleClick, onCreateNew, onCreateEdge, onDeleteEdge, interactionMode = 'select', setInteractionMode, onBackgroundClick, isAnyPanelVisible }) => { \n  // Early return if no nodes or edges are provided\n  if (!nodes || !Array.isArray(nodes) || nodes.length === 0) {\n    return null;\n  }\n\n  // Validate edges and ensure they have required properties\n  const validEdges = edges.filter(edge => \n    edge && edge.source && edge.target && \n    nodes.some(n => n._id === edge.source) && \n    nodes.some(n => n._id === edge.target)\n  );\n\n  const svgRef = useRef(null);\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const linkingState = useRef({ sourceNode: null, tempLink: null, isLinking: false });\n  const [liveContainerWidth, setLiveContainerWidth] = useState(0);\n  const [liveContainerHeight, setLiveContainerHeight] = useState(0);\n\n  // Connect button component\n  const ConnectButton = ({ mode, setMode, linkState, svg }) => {\n    const handleClick = () => {\n      const newMode = mode === 'connect' ? 'select' : 'connect';\n      setMode(newMode);\n      if (newMode === 'select') {\n        d3.select(svg.current).selectAll('.temp-link').remove();\n        linkState.current = { sourceNode: null, tempLink: null, isLinking: false };\n      }\n    };\n\n    return (\n      <button\n        onClick={handleClick}\n        className={`button accent ${mode === 'connect' ? 'active' : ''}`}\n      >\n        <LinkIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\n        {mode === 'connect' ? 'Stop Connecting' : 'Connect Nodes'}\n      </button>\n    );\n  };\n\n  // Drag behavior\n  const dragBehavior = (sim, svgInstance, containerWidth, containerHeight) => {\n    return d3.drag()\n      .on('start', function(event, d) {\n        if (interactionMode !== 'select') return;\n        event.sourceEvent.stopPropagation();\n        if (!event.active) sim.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      })\n      .on('drag', function(event, d) {\n        if (interactionMode !== 'select') return;\n        event.sourceEvent.stopPropagation();\n        d.fx = event.x;\n        d.fy = event.y;\n      })\n      .on('end', function(event, d) {\n        if (interactionMode !== 'select') return;\n        if (!event.active) sim.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      });\n  };\n\n  // Create a node map for quick lookup\n  const nodeMap = new Map(nodes.map(node => [node._id, node]));\n\n  console.log(\"CURRENT INTERACTION MODE:\", interactionMode);\n  const [isSvgMounted, setIsSvgMounted] = useState(false);\n  const simulationRef = useRef(); // Ref to store the D3 simulation instance\n  const clickTimeout = useRef(null);\n  const graphDimensionsRef = useRef({ width: 600, height: 400 }); // For App.js, needs live dimensions\n  const stableViewBoxDimensionsRef = useRef({ width: 600, height: 400 }); // For D3 viewBox, needs initial stable dimensions\n\n\n\n  // console.log('Graph received:', {\n  //   nodeCount: nodes.length,\n  //   edgeCount: edges.length,\n  //   mode: interactionMode\n  // });\n\n  // Debug: Log the actual nodes and edges data\n  // console.log('Nodes data:', JSON.stringify(nodes, null, 2));\n  // console.log('Edges data:', JSON.stringify(edges, null, 2));\n\n  console.log(\"Current onCreateEdge function:\", onCreateEdge);\n\n  const handleMouseMoveLinking = useCallback((event) => {\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\n      return;\n    }\n\n    if (!svgRef.current) return;\n    \n    const [x, y] = d3.pointer(event, svgRef.current);\n    \n    // Update the temp link to follow the mouse\n    linkingState.current.tempLink\n      .attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\n  }, [svgRef, linkingState]);\n\n  const handleMouseUpLinking = useCallback((event) => {\n    if (linkingState.current.isLinking) {\n      if (!svgRef.current) return;\n      \n      const clickedDomElement = event.target;\n      const closestNodeGroup = clickedDomElement.closest('.node');\n      const isNode = !!closestNodeGroup;\n\n      if (!isNode) {\n        console.log('Clicked on empty space - cancelling connection');\n        \n        // Clean up\n        linkingState.current.tempLink?.remove();\n        \n        // Reset visual feedback\n        d3.selectAll('.node circle')\n          .attr('stroke', '#1B5E20')\n          .attr('stroke-width', 1.5);\n        \n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Get the target node ID\n      const targetNodeElement = d3.select(closestNodeGroup);\n      if (!targetNodeElement || !targetNodeElement.node()) {\n        console.log('Failed to find target node element');\n        linkingState.current.tempLink?.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      const targetNode = targetNodeElement.datum();\n      if (!targetNode || !targetNode._id) {\n        console.log('Failed to get valid target node data');\n        linkingState.current.tempLink?.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Complete the connection\n      const sourceNode = linkingState.current.sourceNode;\n      if (sourceNode._id === targetNode._id) {\n        console.log('Cannot connect node to itself');\n        linkingState.current.tempLink?.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Create the edge\n      const edgeData = {\n        source: sourceNode._id,\n        target: targetNode._id,\n        type: 'related',\n        weight: 1\n      };\n\n      // Call the onCreateEdge callback\n      if (onCreateEdge) {\n        onCreateEdge(edgeData);\n      }\n\n      // Clean up\n      linkingState.current.tempLink?.remove();\n      linkingState.current.isLinking = false;\n      linkingState.current.sourceNode = null;\n      linkingState.current.tempLink = null;\n\n      // Reset visual feedback\n      d3.selectAll('.node circle')\n        .attr('stroke', '#1B5E20')\n        .attr('stroke-width', 1.5);\n    }\n  }, [svgRef, linkingState, onCreateEdge]);\n\n  useEffect(() => {\n    const svgInstance = d3.select(svgRef.current);\n\n    if (interactionMode === 'connect') {\n      const onMouseMoveLinking = handleMouseMoveLinking;\n      const onMouseUpLinking = handleMouseUpLinking;\n\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\n      // console.log('Global linking listeners ADDED to SVG for connect mode.');\n\n      return () => {\n        svgInstance.on('mousemove.linking', null);\n        svgInstance.on('mouseup.linking', null);\n        // console.log('Global linking listeners REMOVED from SVG.');\n      };\n    } else {\n      svgInstance.on('mousemove.linking', null);\n      svgInstance.on('mouseup.linking', null);\n\n      if (linkingState.current.isLinking) {\n        // console.log('Exited connect mode with active link: Forcibly cleaning up.');\n        linkingState.current.tempLink?.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return () => { };\n    }\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]);\n\n  // Main effect for D3 rendering and updates\n  useEffect(() => {\n    // console.log('[Graph Effect - Main D3] Running. Nodes count:', nodes.length, 'Edges count:', edges.length);\n    // console.log('[Graph Effect - Main D3] Nodes prop:', JSON.parse(JSON.stringify(nodes)));\n    // console.log('[Graph Effect - Main D3] Edges prop:', JSON.parse(JSON.stringify(edges)));\n\n    const currentSvg = svgRef.current;\n    if (!currentSvg) {\n      // console.log('[Graph Effect - Main D3] SVG ref not available yet. Aborting D3 setup.');\n      return; // SVG element isn't rendered yet (e.g. nodes are empty)\n    }\n\n    // Initialize and update simulation\n    const initialWidth = graphDimensionsRef.current.width;\n    const initialHeight = graphDimensionsRef.current.height;\n    \n    if (!simulationRef.current) {\n      simulationRef.current = d3.forceSimulation(nodes)\n        .force('link', d3.forceLink(edges).id(d => d._id).distance(150))\n        .force('charge', d3.forceManyBody().strength(-500))\n        .force('center', d3.forceCenter(initialWidth / 2, initialHeight / 2));\n    } else {\n      simulationRef.current\n        .nodes(nodes)\n        .force('link', d3.forceLink(edges).id(d => d._id).distance(150));\n    }\n    \n    // Start simulation with a gentle kick\n    simulationRef.current.alpha(0.3).restart();\n\n    const svg = d3.select(currentSvg); // Use currentSvg directly as it's confirmed not null\n    const simulation = simulationRef.current;\n\n    // This check should ideally not be hit if the above init logic works, but keep as safeguard\n    if (!simulation) {\n      // console.error('[Graph Effect - Main D3] Simulation ref is STILL not set! This is unexpected. Aborting.');\n      return;\n    }\n    // console.log('[Graph Effect - Main D3] Simulation instance retrieved:', simulation);\n\n    svg.on('click.diagnostic', (event) => {\n      // console.log('[SVG DIAGNOSTIC CLICK] SVG itself was clicked. Target:', event.target);\n    });\n\n    // 1. Manage the background rectangle: append if not exists, ensure attributes.\n    let backgroundRect = svg.select('rect.background');\n    if (backgroundRect.empty()) {\n      backgroundRect = svg.append('rect')\n        .attr('class', 'background');\n    }\n    backgroundRect // Ensure attributes are set on every run if they could change (e.g. dimensions)\n      .attr('width', '100%')\n      .attr('height', '100%')\n      .attr('fill', 'transparent')\n      .on('click', (event) => {\n        // console.log('[Background Rect Clicked Directly] Target:', event.target);\n        if (event.target.classList.contains('background')) {\n          d3.selectAll('.link').classed('selected', false);\n          setSelectedEdge(null);\n          if (onBackgroundClick) {\n            onBackgroundClick();\n          }\n        }\n      });\n\n    // 2. Ensure dedicated groups for links and nodes exist (append if not).\n    let linkGroup = svg.select('g.links-group');\n    if (linkGroup.empty()) {\n      linkGroup = svg.append('g').attr('class', 'links-group');\n    }\n    let nodeGroup = svg.select('g.nodes-group');\n    if (nodeGroup.empty()) {\n      nodeGroup = svg.append('g').attr('class', 'nodes-group');\n    }\n\n    // 3. Manage defs for markers: append if not exists.\n    let defs = svg.select('defs');\n    if (defs.empty()) {\n      defs = svg.append('defs');\n    }\n    // Check if marker already exists before appending\n    if (defs.select('#arrow').empty()) {\n      defs.append(\"marker\")\n        .attr(\"id\", \"arrow\")\n        .attr(\"viewBox\", \"0 -5 10 10\")\n        .attr(\"refX\", 20)\n        .attr(\"refY\", 0)\n        .attr(\"markerWidth\", 6)\n        .attr(\"markerHeight\", 6)\n        .attr(\"orient\", \"auto\")\n        .append(\"path\")\n        .attr(\"d\", \"M0,-5L10,0L0,5\")\n        .attr(\"fill\", \"#A8C3A4\");\n    }\n\n    // Determine live dimensions for clamping and for App.js new node positioning\n    const liveContainerWidth = currentSvg.clientWidth;\n    const liveContainerHeight = currentSvg.clientHeight;\n    graphDimensionsRef.current = { width: liveContainerWidth, height: liveContainerHeight }; // Update for App.js\n\n    // Set stable viewBox dimensions only once when valid live dimensions are first available\n    if (stableViewBoxDimensionsRef.current.width === 0 && liveContainerWidth > 0) {\n      stableViewBoxDimensionsRef.current.width = liveContainerWidth;\n      // console.log(`[Graph Dimensions] Stable viewBoxWidth SET to: ${liveContainerWidth}`);\n    }\n    if (stableViewBoxDimensionsRef.current.height === 0 && liveContainerHeight > 0) {\n      stableViewBoxDimensionsRef.current.height = liveContainerHeight;\n      // console.log(`[Graph Dimensions] Stable viewBoxHeight SET to: ${liveContainerHeight}`);\n    }\n\n    // Use stable dimensions for the viewBox if available, otherwise fallback to live (should only be for very first paint)\n    const viewBoxWidth = stableViewBoxDimensionsRef.current.width > 0 ? stableViewBoxDimensionsRef.current.width : liveContainerWidth;\n    const viewBoxHeight = stableViewBoxDimensionsRef.current.height > 0 ? stableViewBoxDimensionsRef.current.height : liveContainerHeight;\n\n    // console.log(`[Graph Dimensions] Using for viewBox: ${viewBoxWidth}x${viewBoxHeight}. Live: ${liveContainerWidth}x${liveContainerHeight}`);\n\n    svg\n      .attr('viewBox', [0, 0, viewBoxWidth, viewBoxHeight])\n      .attr('preserveAspectRatio', 'xMidYMid meet');\n\n    // Update node positions (fx, fy) before passing to simulation\n    nodes.forEach(node => {\n      const hasValidPositionProp = node.position && typeof node.position.x === 'number' && typeof node.position.y === 'number';\n\n      if (hasValidPositionProp) {\n        node.x = node.position.x;\n        node.y = node.position.y;\n        node.fx = node.position.x;\n        node.fy = node.position.y;\n      } else {\n        // Position from prop is invalid or missing. Node should be allowed to be placed by simulation.\n        // Or, if it's a new node without prior x/y, give it a random start.\n        node.x = typeof node.x === 'number' ? node.x : (Math.random() * (liveContainerWidth - 100) + 50);\n        node.y = typeof node.y === 'number' ? node.y : (Math.random() * (liveContainerHeight - 100) + 50);\n        node.fx = null; // Explicitly nullify fx/fy if position from prop is not definitive.\n        node.fy = null;\n\n        // For consistency or if other parts of the code expect node.position to exist:\n        // Update node.position to reflect the initial x,y that will be used by the simulation (if fx/fy are null).\n        // This ensures that if this node object is reused, its .position reflects its current state.\n        node.position = { x: node.x, y: node.y };\n      }\n    });\n    // console.log('[D3 Data] Nodes after position init:', JSON.parse(JSON.stringify(nodes))); // Deep copy for logging\n\n    // Validate and process nodes and edges\n    const nodeMap = {};\n    nodes.forEach(node => {\n      if (node && node._id) {\n        nodeMap[node._id] = node;\n      }\n    });\n\n    // Filter out invalid edges\n    const validEdges = edges.filter(edge => \n      edge && \n      edge.source && \n      edge.target && \n      nodeMap[edge.source] && \n      nodeMap[edge.target]\n    );\n\n    const processedEdges = validEdges.map(edge => ({\n      id: edge._id,\n      source: nodeMap[edge.source],\n      target: nodeMap[edge.target],\n      type: edge.type || 'related',\n      _id: edge._id\n    }));\n\n    // Log edge processing for debugging\n    console.log('Processed edges count:', processedEdges.length);\n    console.log('Invalid edges count:', edges.length - validEdges.length);\n    // console.log('[D3 Data] Processed Edges:', JSON.parse(JSON.stringify(processedEdges)));\n\n    simulation\n      .nodes(nodes)\n      .force('link').links(edges);\n\n    // Handle link rendering\n    const linkElements = linkGroup.selectAll('path.link')\n      .data(edges, d => d.id)\n      .join('path')\n      .attr('class', 'link')\n      .attr('data-id', d => d?.id || '')\n      .attr('stroke', '#A8C3A4')\n      .attr('stroke-width', 2)\n      .attr('fill', 'none')\n      .attr('marker-end', 'url(#arrow)')\n      .style('cursor', 'pointer')\n      .on('click', handleEdgeClick);\n\n    // Add error handling for click events\n    linkElements.on('click', (event, d) => {\n      try {\n        if (interactionMode === 'select') {\n          handleEdgeClick(event, d);\n        }\n      } catch (err) {\n        console.error('Error handling edge click:', err);\n      }\n    });\n    // console.log('[D3 Elements] linkElements count:', linkElements.size());\n\n    // Handle node rendering\n    const nodeElements = nodeGroup.selectAll('g.node')\n      .data(nodes, d => d._id)\n      .join(\n        enter => {\n          const g = enter.append('g')\n            .attr('class', 'node')\n            .attr('data-id', d => d._id)\n            .style('cursor', 'pointer')\n            .call(dragBehavior(simulation, svg.node(), liveContainerWidth, liveContainerHeight));\n\n          // Create circle\n          const circle = g.append('circle')\n            .attr('r', 12)\n            .attr('fill', '#2E7D32')\n            .attr('stroke', '#1B5E20')\n            .attr('stroke-width', 1.5)\n            .style('pointer-events', 'all');\n\n          // Create text\n          g.append('text')\n            .text(d => d.title || d._id.substring(0, 6) || 'Node')\n            .attr('x', 16)\n            .attr('y', 5)\n            .attr('fill', '#FAF3E0')\n            .attr('text-anchor', 'start')\n            .style('pointer-events', 'none');\n\n          // Add click and double-click handlers\n          g.on('click', (event, d) => {\n            event.stopPropagation();\n            if (interactionMode === 'select' && onNodeClick) {\n              onNodeClick(d);\n            }\n          })\n          .on('dblclick', (event, d) => {\n            event.stopPropagation();\n            if (interactionMode === 'select' && onNodeDoubleClick) {\n              onNodeDoubleClick(d);\n            }\n          });\n\n          return g;\n        },\n        update => {\n          const circle = update.select('circle');\n          if (circle.node()) {\n            circle.call(dragBehavior(simulation, svg.node(), liveContainerWidth, liveContainerHeight));\n          }\n\n          update.on('click', (event, d) => {\n            event.stopPropagation();\n            if (interactionMode === 'select' && onNodeClick) {\n              onNodeClick(d);\n            }\n          })\n          .on('dblclick', (event, d) => {\n            event.stopPropagation();\n            if (interactionMode === 'select' && onNodeDoubleClick) {\n              onNodeDoubleClick(d);\n            }\n          });\n\n          return update;\n        },\n        exit => {\n          exit.remove();\n        }\n      );\n\n    simulation.on('tick', () => {\n      linkElements.attr('d', d => `M${d.source.x},${d.source.y}L${d.target.x},${d.target.y}`);\n      nodeElements.attr('transform', d => `translate(${d.x},${d.y})`);\n    });\n\n    function handleEdgeClick(event, d) {\n      event.stopPropagation();\n      if (interactionMode === 'select') {\n        d3.selectAll('.link').classed('selected', false);\n        d3.select(event.currentTarget).classed('selected', true);\n        setSelectedEdge(d);\n        if (onNodeClick) {\n          onNodeClick(null);\n        }\n      }\n    }\n\n    function handleLinking(event, d) {\n      if (interactionMode !== 'connect') return;\n\n      if (!linkingState.current.isLinking) {\n        // Start connecting\n        linkingState.current.sourceNode = d;\n        linkingState.current.isLinking = true;\n\n        // Create temporary link\n        const tempLink = linkGroup.append('path')\n          .attr('class', 'temp-link')\n          .attr('stroke', '#B87333')\n          .attr('stroke-width', 2)\n          .attr('stroke-dasharray', '5,5')\n          .attr('marker-end', 'url(#arrow)');\n\n        linkingState.current.tempLink = tempLink;\n\n        // Add visual feedback to the source node\n        d3.select(event.currentTarget).select('circle')\n          .attr('stroke', '#B87333')\n          .attr('stroke-width', 3);\n      } else {\n        // Complete the connection\n        const targetNode = d;\n        if (linkingState.current.sourceNode?._id !== targetNode?._id) {\n          const edgeData = {\n            source: linkingState.current.sourceNode._id,\n            target: targetNode._id,\n            type: 'related',\n            weight: 1\n          };\n          \n          if (onCreateEdge) {\n            onCreateEdge(edgeData);\n          }\n        }\n        \n        // Clean up\n        linkingState.current.tempLink?.remove();\n        \n        // Reset visual feedback\n        d3.selectAll('.node circle')\n          .attr('stroke', '#1B5E20')\n          .attr('stroke-width', 1.5);\n          \n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return;\n    }\n\n    // Handle select mode\n    if (interactionMode === 'select') {\n      // Single click opens node viewer\n      if (onNodeClick) {\n        onNodeClick(d);\n      }\n    }\n  }, [interactionMode, linkingState, onCreateEdge, svgRef]);\n\n  // Handle keyboard delete for selected edges\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n          onDeleteEdge(selectedEdge._id);\n          setSelectedEdge(null);\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedEdge, onDeleteEdge]);\n\n  useEffect(() => {\n    if (svgRef.current) {\n      setIsSvgMounted(true);\n    }\n    return () => setIsSvgMounted(false);\n  }, []);\n\n  // Node click handler\n  const handleNodeClick = useCallback((event, d) => {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    // Handle connection mode\n    if (interactionMode === 'connect') {\n      if (!linkingState.current.isLinking) {\n        // Start a new connection\n        linkingState.current = {\n          isLinking: true,\n          sourceNode: d,\n          tempLink: d3.select(svgRef.current).append('path')\n            .attr('class', 'temp-link')\n            .attr('d', `M${d.x},${d.y}L${d.x},${d.y}`)\n            .attr('stroke-dasharray', '5,5')\n            .attr('stroke', '#B87333')\n            .attr('stroke-width', 2)\n            .attr('fill', 'none')\n            .attr('marker-end', 'url(#arrow)')\n            .raise()\n        };\n        \n        // Add visual feedback to the source node\n        d3.select(event.currentTarget).select('circle')\n          .attr('stroke', '#B87333')\n          .attr('stroke-width', 3);\n      } else {\n        // Complete the connection\n        const targetNode = d;\n        if (linkingState.current.sourceNode?._id !== targetNode?._id) {\n          const edgeData = {\n            source: linkingState.current.sourceNode._id,\n            target: targetNode._id,\n            type: 'related',\n            weight: 1\n          };\n          \n          if (onCreateEdge) {\n            onCreateEdge(edgeData);\n          }\n        }\n        \n        // Clean up\n        linkingState.current.tempLink?.remove();\n        \n        d3.selectAll('.node circle')\n          .attr('stroke', '#1B5E20')\n          .attr('stroke-width', 1.5);\n          \n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return;\n    }\n\n    if (interactionMode === 'select') {\n      if (onNodeClick) {\n        onNodeClick(d);\n      }\n    }\n  }, [interactionMode, linkingState, onCreateEdge, svgRef]);\n\n  return (\n    <div className=\"graph-container\" style={{ width: '100%', height: '100%', padding: '1rem', boxSizing: 'border-box', position: 'relative' }}>\n      <svg ref={svgRef} className=\"graph\" style={{ \n        width: '100%', \n        height: '100%', \n        pointerEvents: 'all'\n      }}>\n        <defs>\n          <marker id=\"arrow\" markerWidth=\"10\" markerHeight=\"10\" refX=\"5\" refY=\"5\" orient=\"auto\">\n            <path d=\"M0,0 L0,10 L10,5 z\" fill=\"#A8C3A4\" />\n          </marker>\n        </defs>\n        <g className=\"links-group\"></g>\n        <g className=\"nodes-group\"></g>\n      </svg>\n      <div className=\"controls\" style={{ \n        position: 'absolute', \n        bottom: '1rem', \n        left: '50%', \n        transform: 'translateX(-50%)',\n        display: 'flex',\n        gap: '1rem'\n      }}>\n        <button\n          onClick={onCreateNew}\n          className=\"button primary\"\n        >\n          <PlusIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\n          Create New Node\n        </button>\n        <ConnectButton \n          interactionMode={interactionMode}\n          setInteractionMode={setInteractionMode}\n          linkingState={linkingState}\n          svgRef={svgRef}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Graph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}