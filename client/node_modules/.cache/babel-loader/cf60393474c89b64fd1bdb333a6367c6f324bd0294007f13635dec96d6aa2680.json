{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Mind Mosaic\\\\client\\\\src\\\\components\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport api from '../services/api.js';\nimport PlusIcon from './icons/PlusIcon';\nimport LinkIcon from './icons/LinkIcon';\nimport TrashIcon from './icons/TrashIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  nodes = [],\n  edges = [],\n  onNodeClick,\n  onNodeDoubleClick,\n  onCreateNew,\n  onCreateEdge,\n  onDeleteEdge,\n  interactionMode = 'select',\n  setInteractionMode,\n  onBackgroundClick,\n  isAnyPanelVisible /*, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete */\n}) => {\n  _s();\n  const svgRef = useRef();\n  const simulationRef = useRef(); // Ref to store the D3 simulation instance\n  const linkingState = useRef({\n    sourceNode: null,\n    tempLink: null,\n    isLinking: false\n  });\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const clickTimeout = useRef(null);\n  const graphDimensionsRef = useRef({\n    width: 800,\n    height: 600\n  }); // For App.js, needs live dimensions\n  const stableViewBoxDimensionsRef = useRef({\n    width: 0,\n    height: 0\n  }); // For D3 viewBox, needs initial stable dimensions\n\n  console.log('Graph received:', {\n    nodeCount: nodes.length,\n    edgeCount: edges.length,\n    mode: interactionMode\n  });\n\n  // Debug: Log the actual nodes and edges data\n  console.log('Nodes data:', JSON.stringify(nodes, null, 2));\n  console.log('Edges data:', JSON.stringify(edges, null, 2));\n  const handleMouseMoveLinking = useCallback(event => {\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\n      return;\n    }\n    if (!svgRef.current) return;\n    const [x, y] = d3.pointer(event, svgRef.current);\n    const tempLinkNode = linkingState.current.tempLink.node();\n    if (!tempLinkNode) return;\n    const tagName = tempLinkNode.tagName.toLowerCase();\n    if (tagName === 'line') {\n      linkingState.current.tempLink.attr('x2', x).attr('y2', y);\n    } else if (tagName === 'path') {\n      linkingState.current.tempLink.attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\n    }\n  }, [svgRef, linkingState]);\n  const handleMouseUpLinking = useCallback(event => {\n    console.log('SVG mouseup.linking triggered. Target:', event.target, 'isLinking:', linkingState.current.isLinking);\n    if (linkingState.current.isLinking) {\n      if (!svgRef.current) return;\n      const clickedDomElement = event.target;\n      const closestNodeGroup = clickedDomElement.closest('.node');\n      const isNode = !!closestNodeGroup;\n      console.log('SVG mouseup.linking: Is target related to a node?', isNode, 'Clicked DOM Element:', clickedDomElement, 'Closest Node Group:', closestNodeGroup);\n      if (!isNode) {\n        var _linkingState$current;\n        console.log('SVG mouseup.linking: Target is NOT a node. Cancelling link.');\n        (_linkingState$current = linkingState.current.tempLink) === null || _linkingState$current === void 0 ? void 0 : _linkingState$current.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        setInteractionMode('select');\n      } else {\n        console.log('SVG mouseup.linking: Target IS a node. Deferring to node\\'s click handler for completion.');\n        // If the mouseup is on a node, the `handleNodeClick` for that target node will handle the link completion (if applicable based on drag state).\n        // Or, if it was a drag operation ending on a node, that node's click event (which might be this one)\n        // needs to correctly interpret the state. The dragended + this mouseup should correctly lead to link creation if conditions are met.\n      }\n    }\n  }, [svgRef, linkingState, setInteractionMode, onCreateEdge]); // onCreateEdge might be relevant if we decide to complete link here\n\n  useEffect(() => {\n    const svgInstance = d3.select(svgRef.current);\n    if (!svgRef.current || !simulationRef.current) return;\n    const nodeElements = d3.select(svgRef.current).selectAll('g.node');\n    nodeElements.call(dragBehavior(simulationRef.current, svgRef.current, liveContainerWidth, liveContainerHeight));\n    if (interactionMode === 'connect') {\n      const onMouseMoveLinking = handleMouseMoveLinking;\n      const onMouseUpLinking = handleMouseUpLinking;\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\n      console.log('Global linking listeners ADDED to SVG for connect mode.');\n      return () => {\n        svgInstance.on('mousemove.linking', null);\n        svgInstance.on('mouseup.linking', null);\n        console.log('Global linking listeners REMOVED from SVG.');\n      };\n    } else {\n      svgInstance.on('mousemove.linking', null);\n      svgInstance.on('mouseup.linking', null);\n      if (linkingState.current.isLinking) {\n        var _linkingState$current2;\n        console.log('Exited connect mode with active link: Forcibly cleaning up.');\n        (_linkingState$current2 = linkingState.current.tempLink) === null || _linkingState$current2 === void 0 ? void 0 : _linkingState$current2.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return () => {};\n    }\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]);\n\n  // Main effect for D3 rendering and updates\n  useEffect(() => {\n    console.log('[Graph Effect - Main D3] Running. Nodes count:', nodes.length, 'Edges count:', edges.length);\n    console.log('[Graph Effect - Main D3] Nodes prop:', JSON.parse(JSON.stringify(nodes)));\n    console.log('[Graph Effect - Main D3] Edges prop:', JSON.parse(JSON.stringify(edges)));\n    const currentSvg = svgRef.current;\n    if (!currentSvg) {\n      console.log('[Graph Effect - Main D3] SVG ref not available yet. Aborting D3 setup.');\n      return; // SVG element isn't rendered yet (e.g. nodes are empty)\n    }\n\n    // Initialize simulation IF it doesn't exist yet AND currentSvg is available\n    if (!simulationRef.current) {\n      console.log('[Graph Effect - Main D3] Initializing simulation.');\n      const initialWidth = graphDimensionsRef.current.width;\n      const initialHeight = graphDimensionsRef.current.height;\n      simulationRef.current = d3.forceSimulation().force('link', d3.forceLink([]).id(d => d._id).distance(150)).alpha(0).alphaDecay(1).alphaTarget(0);\n      console.log('[Graph Effect - Main D3] Simulation initialized:', simulationRef.current);\n    }\n    const svg = d3.select(currentSvg); // Use currentSvg directly as it's confirmed not null\n    const simulation = simulationRef.current;\n\n    // This check should ideally not be hit if the above init logic works, but keep as safeguard\n    if (!simulation) {\n      console.error('[Graph Effect - Main D3] Simulation ref is STILL not set! This is unexpected. Aborting.');\n      return;\n    }\n    console.log('[Graph Effect - Main D3] Simulation instance retrieved:', simulation);\n    svg.on('click.diagnostic', event => {\n      console.log('[SVG DIAGNOSTIC CLICK] SVG itself was clicked. Target:', event.target);\n    });\n\n    // 1. Manage the background rectangle: append if not exists, ensure attributes.\n    let backgroundRect = svg.select('rect.background');\n    if (backgroundRect.empty()) {\n      backgroundRect = svg.append('rect').attr('class', 'background');\n    }\n    backgroundRect // Ensure attributes are set on every run if they could change (e.g. dimensions)\n    .attr('width', '100%').attr('height', '100%').attr('fill', 'transparent').on('click', event => {\n      console.log('[Background Rect Clicked Directly] Target:', event.target);\n      if (event.target.classList.contains('background')) {\n        d3.selectAll('.link').classed('selected', false);\n        setSelectedEdge(null);\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    });\n\n    // 2. Ensure dedicated groups for links and nodes exist (append if not).\n    let linkGroup = svg.select('g.links-group');\n    if (linkGroup.empty()) {\n      linkGroup = svg.append('g').attr('class', 'links-group');\n    }\n    let nodeGroup = svg.select('g.nodes-group');\n    if (nodeGroup.empty()) {\n      nodeGroup = svg.append('g').attr('class', 'nodes-group');\n    }\n\n    // 3. Manage defs for markers: append if not exists.\n    let defs = svg.select('defs');\n    if (defs.empty()) {\n      defs = svg.append('defs');\n    }\n    // Check if marker already exists before appending\n    if (defs.select('#arrow').empty()) {\n      defs.append(\"marker\").attr(\"id\", \"arrow\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 20).attr(\"refY\", 0).attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#A8C3A4\");\n    }\n\n    // Determine live dimensions for clamping and for App.js new node positioning\n    const liveContainerWidth = currentSvg.clientWidth;\n    const liveContainerHeight = currentSvg.clientHeight;\n    graphDimensionsRef.current = {\n      width: liveContainerWidth,\n      height: liveContainerHeight\n    }; // Update for App.js\n\n    // Set stable viewBox dimensions only once when valid live dimensions are first available\n    if (stableViewBoxDimensionsRef.current.width === 0 && liveContainerWidth > 0) {\n      stableViewBoxDimensionsRef.current.width = liveContainerWidth;\n      console.log(`[Graph Dimensions] Stable viewBoxWidth SET to: ${liveContainerWidth}`);\n    }\n    if (stableViewBoxDimensionsRef.current.height === 0 && liveContainerHeight > 0) {\n      stableViewBoxDimensionsRef.current.height = liveContainerHeight;\n      console.log(`[Graph Dimensions] Stable viewBoxHeight SET to: ${liveContainerHeight}`);\n    }\n\n    // Use stable dimensions for the viewBox if available, otherwise fallback to live (should only be for very first paint)\n    const viewBoxWidth = stableViewBoxDimensionsRef.current.width > 0 ? stableViewBoxDimensionsRef.current.width : liveContainerWidth;\n    const viewBoxHeight = stableViewBoxDimensionsRef.current.height > 0 ? stableViewBoxDimensionsRef.current.height : liveContainerHeight;\n    console.log(`[Graph Dimensions] Using for viewBox: ${viewBoxWidth}x${viewBoxHeight}. Live: ${liveContainerWidth}x${liveContainerHeight}`);\n    svg.attr('viewBox', [0, 0, viewBoxWidth, viewBoxHeight]).attr('preserveAspectRatio', 'xMidYMid meet');\n\n    // Update node positions (fx, fy) before passing to simulation\n    nodes.forEach(node => {\n      const hasValidPositionProp = node.position && typeof node.position.x === 'number' && typeof node.position.y === 'number';\n      if (hasValidPositionProp) {\n        node.x = node.position.x;\n        node.y = node.position.y;\n        node.fx = node.position.x;\n        node.fy = node.position.y;\n      } else {\n        // Position from prop is invalid or missing. Node should be allowed to be placed by simulation.\n        // Or, if it's a new node without prior x/y, give it a random start.\n        node.x = typeof node.x === 'number' ? node.x : Math.random() * (liveContainerWidth - 100) + 50;\n        node.y = typeof node.y === 'number' ? node.y : Math.random() * (liveContainerHeight - 100) + 50;\n        node.fx = null; // Explicitly nullify fx/fy if position from prop is not definitive.\n        node.fy = null;\n\n        // For consistency or if other parts of the code expect node.position to exist:\n        // Update node.position to reflect the initial x,y that will be used by the simulation (if fx/fy are null).\n        // This ensures that if this node object is reused, its .position reflects its current state.\n        node.position = {\n          x: node.x,\n          y: node.y\n        };\n      }\n    });\n    console.log('[D3 Data] Nodes after position init:', JSON.parse(JSON.stringify(nodes))); // Deep copy for logging\n\n    const nodeMap = {};\n    nodes.forEach(node => {\n      nodeMap[node._id] = node;\n    });\n    const processedEdges = edges.map(edge => ({\n      id: edge._id,\n      source: nodeMap[edge.source] || edge.source,\n      target: nodeMap[edge.target] || edge.target,\n      type: edge.type,\n      _id: edge._id\n    }));\n    console.log('[D3 Data] Processed Edges:', JSON.parse(JSON.stringify(processedEdges)));\n    simulation.nodes(nodes).on('tick', ticked);\n    simulation.force('link').links(processedEdges);\n    const linkElements = linkGroup.selectAll('path.link').data(processedEdges, d => d.id).join('path').attr('class', 'link').attr('data-id', d => d.id).attr('stroke', '#A8C3A4').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)');\n    linkElements.on('click', handleEdgeClick);\n    console.log('[D3 Elements] linkElements count:', linkElements.size());\n    const nodeElements = nodeGroup.selectAll('g.node').data(nodes, d => d._id).join(enter => {\n      const g = enter.append('g').attr('class', 'node').attr('data-id', d => d._id).call(dragBehavior(simulation, svg, liveContainerWidth, liveContainerHeight));\n      console.log('Node elements:', nodeGroup.selectAll('g.node').size());\n      g.append('circle').attr('r', 12).attr('fill', '#2E7D32').attr('stroke', '#1B5E20').attr('stroke-width', 1.5).style('pointer-events', 'all');\n      g.append('text').text(d => {\n        var _d$_id;\n        return d.title || ((_d$_id = d._id) === null || _d$_id === void 0 ? void 0 : _d$_id.substring(0, 6));\n      }).attr('x', 16).attr('y', 5).attr('fill', '#FAF3E0').attr('text-anchor', 'start');\n      return g;\n    }, update => update, exit => exit.remove());\n    // console.log('[D3 Elements] nodeElements count:', nodeElements.size());\n\n    const circles = nodeElements.select('circle');\n    circles.on('click', handleNodeClick).style('pointer-events', 'all');\n    function handleEdgeClick(event, d) {\n      console.log('[Edge Click] Attempted on edge:', d.id, 'Mode:', interactionMode);\n      event.stopPropagation();\n      if (interactionMode === 'select') {\n        d3.selectAll('.link').classed('selected', false);\n        d3.select(event.currentTarget).classed('selected', true);\n        setSelectedEdge(d);\n        if (onNodeClick) {\n          // This onNodeClick(null) is to deselect any selected node\n          console.log(\"handleEdgeClick: Calling onNodeClick(null) to deselect node.\");\n          onNodeClick(null); // Deselects any selected node in App.js\n        } else {\n          console.log(\"handleEdgeClick: onNodeClick prop is undefined (cannot deselect node).\");\n        }\n      } else {\n        console.log(\"handleEdgeClick: Not in 'select' mode. Current mode:\", interactionMode, \"No action taken.\");\n      }\n    }\n    function ticked() {\n      console.log('[Ticked] Simulation tick occurred.');\n      if (nodes.length > 0 && nodes[0]) {\n        console.log(`[Ticked] Sample node 0: x=${nodes[0].x}, y=${nodes[0].y}, fx=${nodes[0].fx}, fy=${nodes[0].fy}`);\n      }\n      if (linkElements.size() > 0 && processedEdges.length > 0 && processedEdges[0]) {\n        const firstEdge = processedEdges[0];\n        if (firstEdge && firstEdge.source && typeof firstEdge.source.x === 'number' && firstEdge.target && typeof firstEdge.target.x === 'number') {\n          console.log(`[Ticked] Sample link 0 source: x=${firstEdge.source.x}, y=${firstEdge.source.y}. Target: x=${firstEdge.target.x}, y=${firstEdge.target.y}`);\n        }\n      }\n      linkElements.attr('d', d => {\n        const sourceXPos = d.source.fx != null ? d.source.fx : d.source.x;\n        const sourceYPos = d.source.fy != null ? d.source.fy : d.source.y;\n        const targetXPos = d.target.fx != null ? d.target.fx : d.target.x;\n        const targetYPos = d.target.fy != null ? d.target.fy : d.target.y;\n        const sourceX = typeof sourceXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, sourceXPos)) : 0;\n        const sourceY = typeof sourceYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, sourceYPos)) : 0;\n        const targetX = typeof targetXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, targetXPos)) : 0;\n        const targetY = typeof targetYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, targetYPos)) : 0;\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\n      });\n      nodeElements.attr('transform', d => {\n        const xPos = d.fx != null ? d.fx : d.x;\n        const yPos = d.fy != null ? d.fy : d.y;\n        const x = typeof xPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, xPos)) : 0;\n        const y = typeof yPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, yPos)) : 0;\n        return `translate(${x},${y})`;\n      });\n    }\n\n    // TEMPORARILY COMMENT OUT THE SIMULATION KICK TO TEST ZOOM ISSUE\n    // simulation.alpha(0.3).restart(); // Previous state\n    simulation.alpha(0.1).restart(); // Re-enable with a gentle kick\n    simulation.alphaTarget(0); // Ensure this runs to keep the simulation cool\n    console.log('[Graph Effect - Main D3] Gentle simulation kick (alpha 0.1) re-enabled. Alpha target set to 0.');\n\n    // Cleanup for the main useEffect\n    return () => {\n      svg.on('click.diagnostic', null);\n      // Do not stop simulation here as it's persistent. Stop on unmount.\n      if (linkingState.current.tempLink) {\n        linkingState.current.tempLink.remove();\n      }\n      linkingState.current = {\n        sourceNode: null,\n        tempLink: null,\n        isLinking: false\n      };\n      if (clickTimeout.current) {\n        clearTimeout(clickTimeout.current);\n      }\n    };\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, onDeleteEdge, interactionMode, setInteractionMode, onBackgroundClick, isAnyPanelVisible, handleMouseMoveLinking, handleMouseUpLinking]);\n\n  // Add a separate useEffect for stopping the simulation on component unmount\n  useEffect(() => {\n    return () => {\n      if (simulationRef.current) {\n        console.log('[Graph Unmount] Stopping simulation.');\n        simulationRef.current.stop();\n      }\n    };\n  }, []); // Empty dependency array means this runs once on mount for the return (cleanup) function\n\n  // Handle keyboard delete for selected edges\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n          onDeleteEdge(selectedEdge._id);\n          setSelectedEdge(null);\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedEdge, onDeleteEdge]);\n  function dragBehavior(sim, svgInstance, containerWidth, containerHeight) {\n    function dragstarted(event, d) {\n      const currentSim = simulationRef.current; // Use the ref\n      if (!currentSim) return;\n      console.log(\"[Drag Start] Mode:\", interactionMode, \"Node:\", d._id);\n      if (interactionMode === 'connect') {\n        if (linkingState.current.tempLink) {\n          linkingState.current.tempLink.remove();\n          linkingState.current.tempLink = null;\n        }\n        linkingState.current.isLinking = true;\n        linkingState.current.sourceNode = d;\n        event.sourceEvent.stopPropagation(); // KEEP for connect mode\n        if (svgInstance) {\n          linkingState.current.tempLink = d3.select(svgInstance).append('path').attr('class', 'temp-link').attr('d', `M${d.x},${d.y}L${d.x},${d.y}`).attr('stroke-dasharray', '5,5').attr('stroke', '#B87333').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)').raise();\n        }\n      } else {\n        // 'select' mode (regular node dragging)\n        // event.sourceEvent.stopPropagation(); // CRITICAL: Ensure this is commented out or removed for select mode clicks to work\n        console.log(\"[Drag Start - Select Mode] Active sim:\", event.active);\n        if (!event.active) currentSim.alphaTarget(0.3).restart();\n        d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\n        d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\n      }\n    }\n    function dragged(event, d) {\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\n        event.sourceEvent.stopPropagation();\n        if (!svgInstance || !linkingState.current.tempLink) return;\n        const [targetX, targetY] = d3.pointer(event.sourceEvent, svgInstance);\n        linkingState.current.tempLink.attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${targetX},${targetY}`);\n      } else {\n        event.sourceEvent.stopPropagation();\n        d.fx = Math.max(15, Math.min(containerWidth - 15, event.x));\n        d.fy = Math.max(15, Math.min(containerHeight - 15, event.y));\n        d.position = {\n          x: d.fx,\n          y: d.fy\n        };\n      }\n    }\n    async function dragended(event, d) {\n      const currentSim = simulationRef.current; // Use the ref\n      if (!currentSim) return;\n      if (!event.active) currentSim.alphaTarget(0);\n\n      // Check if this was a click (no significant drag movement)\n      const wasClick = Math.abs(event.dx) < 2 && Math.abs(event.dy) < 2;\n      if (interactionMode === 'connect') {\n        // This block handles ending a connection attempt (drag-based)\n        console.log(\"[Drag End - Connect Mode] isLinking:\", linkingState.current.isLinking);\n        if (linkingState.current.isLinking) {\n          var _linkingState$current3;\n          const [pointerX, pointerY] = d3.pointer(event.sourceEvent, svgInstance);\n          const releaseTargetElement = document.elementFromPoint(event.sourceEvent.clientX, event.sourceEvent.clientY);\n          const closestNodeGroup = releaseTargetElement ? releaseTargetElement.closest('.node') : null;\n          if (closestNodeGroup) {\n            const targetNodeData = d3.select(closestNodeGroup).datum();\n            if (targetNodeData && linkingState.current.sourceNode && linkingState.current.sourceNode._id !== targetNodeData._id) {\n              console.log(`[Drag End - Connect Mode] Creating edge from ${linkingState.current.sourceNode._id} to ${targetNodeData._id}`);\n              if (onCreateEdge) {\n                // console.log(`[CreateEdge] from ${linkingState.current.sourceNode._id} to ${targetNodeData._id}`);\n                onCreateEdge(linkingState.current.sourceNode._id, targetNodeData._id);\n              }\n            } else {\n              console.log(\"[Drag End - Connect Mode] Drag ended on source node or invalid target. Cancelling link.\");\n            }\n          } else {\n            console.log(\"[Drag End - Connect Mode] Drag ended NOT on a node. Cancelling link.\");\n          }\n          (_linkingState$current3 = linkingState.current.tempLink) === null || _linkingState$current3 === void 0 ? void 0 : _linkingState$current3.remove();\n          linkingState.current.isLinking = false;\n          linkingState.current.sourceNode = null;\n          linkingState.current.tempLink = null;\n          setInteractionMode('select');\n        } else if (wasClick) {\n          // A \"click\" (drag with no movement) on a node while in connect mode.\n          // Currently, click-linking is disabled. So, this action effectively does nothing for linking.\n          // We might want to select the node or provide feedback, but handleNodeClick will also fire.\n          console.log(`[Drag End - Connect Mode] Click detected on node ${d._id}. No drag-linking action.`);\n        }\n      } else {\n        // interactionMode === 'select' (or other modes)\n        // TEMPORARILY REMOVE CLICK HANDLING FROM DRAGEND TO ISOLATE\n        /*\r\n        if (wasClick && !event.defaultPrevented) { \r\n          console.log(`[Drag End - Select Mode] Click detected on node ${d._id}. Calling onNodeClick.`);\r\n          if (clickTimeout.current) {\r\n            clearTimeout(clickTimeout.current);\r\n            clickTimeout.current = null;\r\n          }\r\n          setSelectedEdge(null); \r\n          if (onNodeClick) {\r\n            onNodeClick(d);\r\n          }\r\n        } else if (!wasClick) { // It was a drag\r\n        */\n        // Ensure only actual drags are handled here for now\n        if (!wasClick) {\n          // It was a drag\n          console.log(`[Drag End - Select Mode] Drag finished for node ${d._id}. Updating position.`);\n          d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\n          d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\n          d.position = {\n            x: d.fx,\n            y: d.fy\n          };\n          if (api && typeof api.updateNode === 'function') {\n            api.updateNode(d._id, {\n              position: {\n                x: d.fx,\n                y: d.fy\n              }\n            }).catch(err => console.error(\"Failed to update node position:\", err));\n          }\n        } else {\n          console.log(\"[Drag End - Select Mode] Click was detected (dx/dy small), but not processing as click here. Letting handleNodeClick manage it.\");\n        }\n      }\n    }\n    return d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended);\n  }\n  const handleNodeClick = (event, d) => {\n    console.log(`[Node Click Handler] Node: ${d._id}, Mode: ${interactionMode}, DefaultPrevented: ${event.defaultPrevented}`);\n    if (event.defaultPrevented) {\n      console.log('[Node Click Handler] DefaultPrevented, returning early (likely drag related).');\n      return;\n    }\n    if (clickTimeout.current) {\n      // Double-click\n      clearTimeout(clickTimeout.current);\n      clickTimeout.current = null;\n      console.log(`[Node Click Handler] Double-click on node ${d._id}.`);\n      if (onNodeDoubleClick) {\n        onNodeDoubleClick(d);\n      }\n      return;\n    }\n\n    // For single-click, set a timeout. \n    clickTimeout.current = setTimeout(() => {\n      clickTimeout.current = null;\n      console.log(`[Node Click Handler] Timeout for single click on ${d._id}. Mode: ${interactionMode}.`);\n      if (interactionMode === 'connect') {\n        console.log(`[Node Click Handler - Connect Mode] Single click on node ${d._id}. No action for click-linking.`);\n      } else {\n        // interactionMode === 'select'\n        console.log(`[Node Click Handler - Select Mode] Processing single click for node ${d._id}.`);\n        setSelectedEdge(null);\n        if (onNodeClick) {\n          onNodeClick(d);\n        }\n      }\n    }, 250);\n  };\n\n  // Handle edge deletion\n  const handleDeleteEdge = () => {\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n      onDeleteEdge(selectedEdge._id);\n      setSelectedEdge(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-wrapper\",\n    onClick: e => {\n      console.log('[Graph Wrapper Click] Target:', e.target, 'CurrentTarget:', e.currentTarget);\n      if (e.target === e.currentTarget) {\n        console.log('[Graph Wrapper Click] Click was directly on wrapper.');\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    },\n    children: [nodes && nodes.length > 0 ? /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      className: \"graph-svg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-svg empty-graph-placeholder\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-graph-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This canvas is empty. Start by creating a new node!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-controls\",\n      children: [selectedEdge && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteEdge,\n        className: \"button danger\",\n        children: [/*#__PURE__*/_jsxDEV(TrashIcon, {\n          style: {\n            width: '1rem',\n            height: '1rem',\n            marginRight: '0.5rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 13\n        }, this), \"Remove Edge\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            // Pass current dimensions when calling onCreateNew\n            if (onCreateNew) {\n              onCreateNew({\n                graphWidth: graphDimensionsRef.current.width,\n                graphHeight: graphDimensionsRef.current.height\n              });\n            }\n          },\n          className: \"button primary\",\n          children: [/*#__PURE__*/_jsxDEV(PlusIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 13\n          }, this), \"Create New Node\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setInteractionMode(prevMode => prevMode === 'connect' ? 'select' : 'connect'),\n          className: `button accent ${interactionMode === 'connect' ? 'active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(LinkIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 13\n          }, this), interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 574,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"j6181wR5kLz0MTr5+mPyO/KcrUw=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","d3","api","PlusIcon","LinkIcon","TrashIcon","jsxDEV","_jsxDEV","Graph","nodes","edges","onNodeClick","onNodeDoubleClick","onCreateNew","onCreateEdge","onDeleteEdge","interactionMode","setInteractionMode","onBackgroundClick","isAnyPanelVisible","_s","svgRef","simulationRef","linkingState","sourceNode","tempLink","isLinking","selectedEdge","setSelectedEdge","clickTimeout","graphDimensionsRef","width","height","stableViewBoxDimensionsRef","console","log","nodeCount","length","edgeCount","mode","JSON","stringify","handleMouseMoveLinking","event","current","x","y","pointer","tempLinkNode","node","tagName","toLowerCase","attr","handleMouseUpLinking","target","clickedDomElement","closestNodeGroup","closest","isNode","_linkingState$current","remove","svgInstance","select","nodeElements","selectAll","call","dragBehavior","liveContainerWidth","liveContainerHeight","onMouseMoveLinking","onMouseUpLinking","on","_linkingState$current2","parse","currentSvg","initialWidth","initialHeight","forceSimulation","force","forceLink","id","d","_id","distance","alpha","alphaDecay","alphaTarget","svg","simulation","error","backgroundRect","empty","append","classList","contains","classed","linkGroup","nodeGroup","defs","clientWidth","clientHeight","viewBoxWidth","viewBoxHeight","forEach","hasValidPositionProp","position","fx","fy","Math","random","nodeMap","processedEdges","map","edge","source","type","ticked","links","linkElements","data","join","handleEdgeClick","size","enter","g","style","text","_d$_id","title","substring","update","exit","circles","handleNodeClick","stopPropagation","currentTarget","firstEdge","sourceXPos","sourceYPos","targetXPos","targetYPos","sourceX","max","min","sourceY","targetX","targetY","xPos","yPos","restart","clearTimeout","stop","handleKeyDown","key","window","addEventListener","removeEventListener","sim","containerWidth","containerHeight","dragstarted","currentSim","sourceEvent","raise","active","dragged","dragended","wasClick","abs","dx","dy","_linkingState$current3","pointerX","pointerY","releaseTargetElement","document","elementFromPoint","clientX","clientY","targetNodeData","datum","updateNode","catch","err","drag","defaultPrevented","setTimeout","handleDeleteEdge","className","onClick","e","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","marginRight","graphWidth","graphHeight","prevMode","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Mind Mosaic/client/src/components/graph.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\r\nimport * as d3 from 'd3';\r\nimport './Graph.css';\r\nimport api from '../services/api.js';\r\nimport PlusIcon from './icons/PlusIcon';\r\nimport LinkIcon from './icons/LinkIcon';\r\nimport TrashIcon from './icons/TrashIcon';\r\n\r\nconst Graph = ({ nodes = [], edges = [], onNodeClick, onNodeDoubleClick, onCreateNew, onCreateEdge, onDeleteEdge, interactionMode = 'select', setInteractionMode, onBackgroundClick, isAnyPanelVisible /*, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete */ }) => {\r\n  const svgRef = useRef();\r\n  const simulationRef = useRef(); // Ref to store the D3 simulation instance\r\n  const linkingState = useRef({ sourceNode: null, tempLink: null, isLinking: false });\r\n  const [selectedEdge, setSelectedEdge] = useState(null);\r\n  const clickTimeout = useRef(null);\r\n  const graphDimensionsRef = useRef({ width: 800, height: 600 }); // For App.js, needs live dimensions\r\n  const stableViewBoxDimensionsRef = useRef({ width: 0, height: 0 }); // For D3 viewBox, needs initial stable dimensions\r\n\r\n  console.log('Graph received:', {\r\n    nodeCount: nodes.length,\r\n    edgeCount: edges.length,\r\n    mode: interactionMode\r\n  });\r\n\r\n  // Debug: Log the actual nodes and edges data\r\n  console.log('Nodes data:', JSON.stringify(nodes, null, 2));\r\n  console.log('Edges data:', JSON.stringify(edges, null, 2));\r\n\r\n  const handleMouseMoveLinking = useCallback((event) => { \r\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\r\n        return;\r\n    }\r\n    if (!svgRef.current) return; \r\n    const [x, y] = d3.pointer(event, svgRef.current);\r\n    \r\n    const tempLinkNode = linkingState.current.tempLink.node();\r\n    if (!tempLinkNode) return;\r\n\r\n    const tagName = tempLinkNode.tagName.toLowerCase();\r\n\r\n    if (tagName === 'line') {\r\n        linkingState.current.tempLink.attr('x2', x).attr('y2', y);\r\n    } else if (tagName === 'path') {\r\n        linkingState.current.tempLink\r\n          .attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\r\n    }\r\n  }, [svgRef, linkingState]);\r\n\r\n  const handleMouseUpLinking = useCallback((event) => {\r\n    console.log('SVG mouseup.linking triggered. Target:', event.target, 'isLinking:', linkingState.current.isLinking);\r\n    if (linkingState.current.isLinking) { \r\n      if (!svgRef.current) return; \r\n      \r\n      const clickedDomElement = event.target;\r\n      const closestNodeGroup = clickedDomElement.closest('.node');\r\n      const isNode = !!closestNodeGroup; \r\n      \r\n      console.log('SVG mouseup.linking: Is target related to a node?', isNode, 'Clicked DOM Element:', clickedDomElement, 'Closest Node Group:', closestNodeGroup);\r\n\r\n      if (!isNode) { \r\n        console.log('SVG mouseup.linking: Target is NOT a node. Cancelling link.');\r\n        linkingState.current.tempLink?.remove();\r\n        linkingState.current.isLinking = false;\r\n        linkingState.current.sourceNode = null;\r\n        linkingState.current.tempLink = null;\r\n        setInteractionMode('select'); \r\n      } else {\r\n        console.log('SVG mouseup.linking: Target IS a node. Deferring to node\\'s click handler for completion.');\r\n        // If the mouseup is on a node, the `handleNodeClick` for that target node will handle the link completion (if applicable based on drag state).\r\n        // Or, if it was a drag operation ending on a node, that node's click event (which might be this one)\r\n        // needs to correctly interpret the state. The dragended + this mouseup should correctly lead to link creation if conditions are met.\r\n      }\r\n    }\r\n  }, [svgRef, linkingState, setInteractionMode, onCreateEdge]); // onCreateEdge might be relevant if we decide to complete link here\r\n\r\n  useEffect(() => {\r\n    const svgInstance = d3.select(svgRef.current);\r\n    if (!svgRef.current || !simulationRef.current) return;\r\n\r\n  const nodeElements = d3.select(svgRef.current).selectAll('g.node');\r\n  nodeElements.call(dragBehavior(simulationRef.current, svgRef.current, liveContainerWidth, liveContainerHeight));\r\n    if (interactionMode === 'connect') {\r\n      const onMouseMoveLinking = handleMouseMoveLinking;\r\n      const onMouseUpLinking = handleMouseUpLinking;\r\n\r\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\r\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\r\n      console.log('Global linking listeners ADDED to SVG for connect mode.');\r\n\r\n      return () => {\r\n        svgInstance.on('mousemove.linking', null);\r\n        svgInstance.on('mouseup.linking', null);\r\n        console.log('Global linking listeners REMOVED from SVG.');\r\n      };\r\n    } else {\r\n      svgInstance.on('mousemove.linking', null);\r\n      svgInstance.on('mouseup.linking', null);\r\n      \r\n      if (linkingState.current.isLinking) {\r\n        console.log('Exited connect mode with active link: Forcibly cleaning up.');\r\n        linkingState.current.tempLink?.remove();\r\n        linkingState.current.isLinking = false;\r\n        linkingState.current.sourceNode = null;\r\n        linkingState.current.tempLink = null;\r\n      }\r\n      return () => {};\r\n    }\r\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]); \r\n\r\n  // Main effect for D3 rendering and updates\r\n  useEffect(() => {\r\n    console.log('[Graph Effect - Main D3] Running. Nodes count:', nodes.length, 'Edges count:', edges.length);\r\n    console.log('[Graph Effect - Main D3] Nodes prop:', JSON.parse(JSON.stringify(nodes)));\r\n    console.log('[Graph Effect - Main D3] Edges prop:', JSON.parse(JSON.stringify(edges)));\r\n\r\n    const currentSvg = svgRef.current;\r\n    if (!currentSvg) {\r\n      console.log('[Graph Effect - Main D3] SVG ref not available yet. Aborting D3 setup.');\r\n      return; // SVG element isn't rendered yet (e.g. nodes are empty)\r\n    }\r\n\r\n    // Initialize simulation IF it doesn't exist yet AND currentSvg is available\r\n    if (!simulationRef.current) {\r\n      console.log('[Graph Effect - Main D3] Initializing simulation.');\r\n      const initialWidth = graphDimensionsRef.current.width;\r\n      const initialHeight = graphDimensionsRef.current.height;\r\n      simulationRef.current = d3.forceSimulation()\r\n        .force('link', d3.forceLink([]).id(d => d._id).distance(150))\r\n        .alpha(0).alphaDecay(1).alphaTarget(0);\r\n      console.log('[Graph Effect - Main D3] Simulation initialized:', simulationRef.current);\r\n    }\r\n\r\n    const svg = d3.select(currentSvg); // Use currentSvg directly as it's confirmed not null\r\n    const simulation = simulationRef.current;\r\n\r\n    // This check should ideally not be hit if the above init logic works, but keep as safeguard\r\n    if (!simulation) {\r\n      console.error('[Graph Effect - Main D3] Simulation ref is STILL not set! This is unexpected. Aborting.');\r\n      return; \r\n    }\r\n    console.log('[Graph Effect - Main D3] Simulation instance retrieved:', simulation);\r\n\r\n    svg.on('click.diagnostic', (event) => {\r\n      console.log('[SVG DIAGNOSTIC CLICK] SVG itself was clicked. Target:', event.target);\r\n    });\r\n\r\n    // 1. Manage the background rectangle: append if not exists, ensure attributes.\r\n    let backgroundRect = svg.select('rect.background');\r\n    if (backgroundRect.empty()) {\r\n      backgroundRect = svg.append('rect')\r\n        .attr('class', 'background');\r\n    }\r\n    backgroundRect // Ensure attributes are set on every run if they could change (e.g. dimensions)\r\n      .attr('width', '100%')\r\n      .attr('height', '100%')\r\n      .attr('fill', 'transparent')\r\n      .on('click', (event) => {\r\n        console.log('[Background Rect Clicked Directly] Target:', event.target);\r\n        if (event.target.classList.contains('background')) {\r\n          d3.selectAll('.link').classed('selected', false);\r\n          setSelectedEdge(null);\r\n          if (onBackgroundClick) {\r\n            onBackgroundClick();\r\n          }\r\n        }\r\n      });\r\n\r\n    // 2. Ensure dedicated groups for links and nodes exist (append if not).\r\n    let linkGroup = svg.select('g.links-group');\r\n    if (linkGroup.empty()) {\r\n      linkGroup = svg.append('g').attr('class', 'links-group');\r\n    }\r\n    let nodeGroup = svg.select('g.nodes-group');\r\n    if (nodeGroup.empty()) {\r\n      nodeGroup = svg.append('g').attr('class', 'nodes-group');\r\n    }\r\n\r\n    // 3. Manage defs for markers: append if not exists.\r\n    let defs = svg.select('defs');\r\n    if (defs.empty()) {\r\n      defs = svg.append('defs');\r\n    }\r\n    // Check if marker already exists before appending\r\n    if (defs.select('#arrow').empty()) { \r\n      defs.append(\"marker\")\r\n        .attr(\"id\", \"arrow\")\r\n        .attr(\"viewBox\", \"0 -5 10 10\")\r\n        .attr(\"refX\", 20)\r\n        .attr(\"refY\", 0)\r\n        .attr(\"markerWidth\", 6)\r\n        .attr(\"markerHeight\", 6)\r\n        .attr(\"orient\", \"auto\")\r\n        .append(\"path\")\r\n        .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n        .attr(\"fill\", \"#A8C3A4\");\r\n    }\r\n\r\n    // Determine live dimensions for clamping and for App.js new node positioning\r\n    const liveContainerWidth = currentSvg.clientWidth;\r\n    const liveContainerHeight = currentSvg.clientHeight;\r\n    graphDimensionsRef.current = { width: liveContainerWidth, height: liveContainerHeight }; // Update for App.js\r\n\r\n    // Set stable viewBox dimensions only once when valid live dimensions are first available\r\n    if (stableViewBoxDimensionsRef.current.width === 0 && liveContainerWidth > 0) {\r\n      stableViewBoxDimensionsRef.current.width = liveContainerWidth;\r\n      console.log(`[Graph Dimensions] Stable viewBoxWidth SET to: ${liveContainerWidth}`);\r\n    }\r\n    if (stableViewBoxDimensionsRef.current.height === 0 && liveContainerHeight > 0) {\r\n      stableViewBoxDimensionsRef.current.height = liveContainerHeight;\r\n      console.log(`[Graph Dimensions] Stable viewBoxHeight SET to: ${liveContainerHeight}`);\r\n    }\r\n\r\n    // Use stable dimensions for the viewBox if available, otherwise fallback to live (should only be for very first paint)\r\n    const viewBoxWidth = stableViewBoxDimensionsRef.current.width > 0 ? stableViewBoxDimensionsRef.current.width : liveContainerWidth;\r\n    const viewBoxHeight = stableViewBoxDimensionsRef.current.height > 0 ? stableViewBoxDimensionsRef.current.height : liveContainerHeight;\r\n\r\n    console.log(`[Graph Dimensions] Using for viewBox: ${viewBoxWidth}x${viewBoxHeight}. Live: ${liveContainerWidth}x${liveContainerHeight}`);\r\n\r\n    svg\r\n      .attr('viewBox', [0, 0, viewBoxWidth, viewBoxHeight])\r\n      .attr('preserveAspectRatio', 'xMidYMid meet');\r\n\r\n    // Update node positions (fx, fy) before passing to simulation\r\n    nodes.forEach(node => {\r\n      const hasValidPositionProp = node.position && typeof node.position.x === 'number' && typeof node.position.y === 'number';\r\n\r\n      if (hasValidPositionProp) {\r\n        node.x = node.position.x;\r\n        node.y = node.position.y;\r\n        node.fx = node.position.x;\r\n        node.fy = node.position.y;\r\n      } else {\r\n        // Position from prop is invalid or missing. Node should be allowed to be placed by simulation.\r\n        // Or, if it's a new node without prior x/y, give it a random start.\r\n        node.x = typeof node.x === 'number' ? node.x : (Math.random() * (liveContainerWidth - 100) + 50);\r\n        node.y = typeof node.y === 'number' ? node.y : (Math.random() * (liveContainerHeight - 100) + 50);\r\n        node.fx = null; // Explicitly nullify fx/fy if position from prop is not definitive.\r\n        node.fy = null;\r\n\r\n        // For consistency or if other parts of the code expect node.position to exist:\r\n        // Update node.position to reflect the initial x,y that will be used by the simulation (if fx/fy are null).\r\n        // This ensures that if this node object is reused, its .position reflects its current state.\r\n        node.position = { x: node.x, y: node.y };\r\n      }\r\n    });\r\n    console.log('[D3 Data] Nodes after position init:', JSON.parse(JSON.stringify(nodes))); // Deep copy for logging\r\n\r\n    const nodeMap = {};\r\n    nodes.forEach(node => { nodeMap[node._id] = node; });\r\n    const processedEdges = edges.map(edge => ({\r\n      id: edge._id,\r\n      source: nodeMap[edge.source] || edge.source,\r\n      target: nodeMap[edge.target] || edge.target,\r\n      type: edge.type,\r\n      _id: edge._id\r\n    }));\r\n    console.log('[D3 Data] Processed Edges:', JSON.parse(JSON.stringify(processedEdges)));\r\n\r\n    simulation\r\n      .nodes(nodes)\r\n      .on('tick', ticked);\r\n    simulation.force('link').links(processedEdges);\r\n\r\n    const linkElements = linkGroup.selectAll('path.link')\r\n      .data(processedEdges, d => d.id)\r\n      .join('path')\r\n        .attr('class', 'link')\r\n        .attr('data-id', d => d.id)\r\n        .attr('stroke', '#A8C3A4')\r\n        .attr('stroke-width', 2)\r\n        .attr('fill', 'none')\r\n        .attr('marker-end', 'url(#arrow)');\r\n    linkElements.on('click', handleEdgeClick);\r\n    console.log('[D3 Elements] linkElements count:', linkElements.size());\r\n\r\n    const nodeElements = nodeGroup.selectAll('g.node')\r\n      .data(nodes, d => d._id)\r\n      .join(\r\n        enter => {\r\n          const g = enter.append('g')\r\n            .attr('class', 'node')\r\n            .attr('data-id', d => d._id)\r\n            .call(dragBehavior(simulation, svg, liveContainerWidth, liveContainerHeight));\r\n            console.log('Node elements:', nodeGroup.selectAll('g.node').size());\r\n          g.append('circle')\r\n            .attr('r', 12)\r\n            .attr('fill', '#2E7D32')\r\n            .attr('stroke', '#1B5E20')\r\n            .attr('stroke-width', 1.5)\r\n            .style('pointer-events', 'all');\r\n          g.append('text')\r\n            .text(d => d.title || d._id?.substring(0, 6))\r\n            .attr('x', 16).attr('y', 5).attr('fill', '#FAF3E0').attr('text-anchor', 'start');\r\n          return g;\r\n        },\r\n        update => update,\r\n        exit => exit.remove()\r\n      );\r\n    // console.log('[D3 Elements] nodeElements count:', nodeElements.size());\r\n    \r\n    const circles = nodeElements.select('circle');\r\n    circles.on('click', handleNodeClick).style('pointer-events', 'all');\r\n\r\n    function handleEdgeClick(event, d) {\r\n      console.log('[Edge Click] Attempted on edge:', d.id, 'Mode:', interactionMode);\r\n      event.stopPropagation();\r\n      if (interactionMode === 'select') {\r\n        d3.selectAll('.link').classed('selected', false);\r\n        d3.select(event.currentTarget).classed('selected', true);\r\n        setSelectedEdge(d);\r\n        if (onNodeClick) { // This onNodeClick(null) is to deselect any selected node\r\n            console.log(\"handleEdgeClick: Calling onNodeClick(null) to deselect node.\");\r\n            onNodeClick(null); // Deselects any selected node in App.js\r\n        } else {\r\n            console.log(\"handleEdgeClick: onNodeClick prop is undefined (cannot deselect node).\");\r\n        }\r\n      } else {\r\n        console.log(\"handleEdgeClick: Not in 'select' mode. Current mode:\", interactionMode, \"No action taken.\");\r\n      }\r\n    }\r\n\r\n    function ticked() {\r\n      console.log('[Ticked] Simulation tick occurred.');\r\n      if (nodes.length > 0 && nodes[0]) {\r\n          console.log(`[Ticked] Sample node 0: x=${nodes[0].x}, y=${nodes[0].y}, fx=${nodes[0].fx}, fy=${nodes[0].fy}`);\r\n      }\r\n      if (linkElements.size() > 0 && processedEdges.length > 0 && processedEdges[0]) {\r\n        const firstEdge = processedEdges[0];\r\n        if (firstEdge && firstEdge.source && typeof firstEdge.source.x === 'number' && firstEdge.target && typeof firstEdge.target.x === 'number') {\r\n             console.log(`[Ticked] Sample link 0 source: x=${firstEdge.source.x}, y=${firstEdge.source.y}. Target: x=${firstEdge.target.x}, y=${firstEdge.target.y}`);\r\n        }\r\n      }\r\n\r\n      linkElements.attr('d', d => {\r\n        const sourceXPos = d.source.fx != null ? d.source.fx : d.source.x;\r\n        const sourceYPos = d.source.fy != null ? d.source.fy : d.source.y;\r\n        const targetXPos = d.target.fx != null ? d.target.fx : d.target.x;\r\n        const targetYPos = d.target.fy != null ? d.target.fy : d.target.y;\r\n\r\n        const sourceX = typeof sourceXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, sourceXPos)) : 0;\r\n        const sourceY = typeof sourceYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, sourceYPos)) : 0;\r\n        const targetX = typeof targetXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, targetXPos)) : 0;\r\n        const targetY = typeof targetYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, targetYPos)) : 0;\r\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\r\n      });\r\n      \r\n      nodeElements.attr('transform', d => {\r\n        const xPos = d.fx != null ? d.fx : d.x;\r\n        const yPos = d.fy != null ? d.fy : d.y;\r\n        \r\n        const x = typeof xPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, xPos)) : 0;\r\n        const y = typeof yPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, yPos)) : 0;\r\n        return `translate(${x},${y})`;\r\n      });\r\n    }\r\n\r\n    // TEMPORARILY COMMENT OUT THE SIMULATION KICK TO TEST ZOOM ISSUE\r\n    // simulation.alpha(0.3).restart(); // Previous state\r\n    simulation.alpha(0.1).restart(); // Re-enable with a gentle kick\r\n    simulation.alphaTarget(0); // Ensure this runs to keep the simulation cool\r\n    console.log('[Graph Effect - Main D3] Gentle simulation kick (alpha 0.1) re-enabled. Alpha target set to 0.');\r\n\r\n    // Cleanup for the main useEffect\r\n    return () => {\r\n      svg.on('click.diagnostic', null);\r\n      // Do not stop simulation here as it's persistent. Stop on unmount.\r\n      if (linkingState.current.tempLink) {\r\n        linkingState.current.tempLink.remove();\r\n      }\r\n      linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n      if (clickTimeout.current) {\r\n        clearTimeout(clickTimeout.current);\r\n      }\r\n    };\r\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, onDeleteEdge, interactionMode, setInteractionMode, onBackgroundClick, isAnyPanelVisible, handleMouseMoveLinking, handleMouseUpLinking]);\r\n\r\n  // Add a separate useEffect for stopping the simulation on component unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (simulationRef.current) {\r\n        console.log('[Graph Unmount] Stopping simulation.');\r\n        simulationRef.current.stop();\r\n      }\r\n    };\r\n  }, []); // Empty dependency array means this runs once on mount for the return (cleanup) function\r\n\r\n  // Handle keyboard delete for selected edges\r\n  useEffect(() => {\r\n    const handleKeyDown = (event) => {\r\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\r\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\r\n          onDeleteEdge(selectedEdge._id);\r\n          setSelectedEdge(null); \r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [selectedEdge, onDeleteEdge]);\r\n\r\n  function dragBehavior(sim, svgInstance, containerWidth, containerHeight) {\r\n    function dragstarted(event, d) {\r\n        const currentSim = simulationRef.current; // Use the ref\r\n        if (!currentSim) return;\r\n      console.log(\"[Drag Start] Mode:\", interactionMode, \"Node:\", d._id);\r\n      if (interactionMode === 'connect') {\r\n        if (linkingState.current.tempLink) {\r\n            linkingState.current.tempLink.remove();\r\n            linkingState.current.tempLink = null;\r\n        }\r\n\r\n        linkingState.current.isLinking = true;\r\n        linkingState.current.sourceNode = d;\r\n        event.sourceEvent.stopPropagation(); // KEEP for connect mode\r\n        if (svgInstance) {\r\n            linkingState.current.tempLink = d3.select(svgInstance).append('path')\r\n              .attr('class', 'temp-link')\r\n              .attr('d', `M${d.x},${d.y}L${d.x},${d.y}`)\r\n              .attr('stroke-dasharray', '5,5')\r\n              .attr('stroke', '#B87333') \r\n              .attr('stroke-width', 2)\r\n              .attr('fill', 'none')\r\n              .attr('marker-end', 'url(#arrow)')\r\n              .raise();\r\n        }\r\n      } else { // 'select' mode (regular node dragging)\r\n        // event.sourceEvent.stopPropagation(); // CRITICAL: Ensure this is commented out or removed for select mode clicks to work\r\n        console.log(\"[Drag Start - Select Mode] Active sim:\", event.active);\r\n        if (!event.active) currentSim.alphaTarget(0.3).restart();\r\n        d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\r\n        d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\r\n      }\r\n    }\r\n\r\n    function dragged(event, d) {\r\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\r\n        event.sourceEvent.stopPropagation();\r\n        if (!svgInstance || !linkingState.current.tempLink) return; \r\n        const [targetX, targetY] = d3.pointer(event.sourceEvent, svgInstance); \r\n        linkingState.current.tempLink\r\n          .attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${targetX},${targetY}`);\r\n      } else {\r\n        event.sourceEvent.stopPropagation();\r\n        d.fx = Math.max(15, Math.min(containerWidth - 15, event.x));\r\n        d.fy = Math.max(15, Math.min(containerHeight - 15, event.y));\r\n        d.position = { x: d.fx, y: d.fy };\r\n      }\r\n    }\r\n\r\n    async function dragended(event, d) {\r\n        const currentSim = simulationRef.current; // Use the ref\r\n        if (!currentSim) return;\r\n        if (!event.active) currentSim.alphaTarget(0);\r\n\r\n        // Check if this was a click (no significant drag movement)\r\n        const wasClick = Math.abs(event.dx) < 2 && Math.abs(event.dy) < 2;\r\n\r\n        if (interactionMode === 'connect') {\r\n          // This block handles ending a connection attempt (drag-based)\r\n          console.log(\"[Drag End - Connect Mode] isLinking:\", linkingState.current.isLinking);\r\n          if (linkingState.current.isLinking) {\r\n            const [pointerX, pointerY] = d3.pointer(event.sourceEvent, svgInstance);\r\n            const releaseTargetElement = document.elementFromPoint(event.sourceEvent.clientX, event.sourceEvent.clientY);\r\n            const closestNodeGroup = releaseTargetElement ? releaseTargetElement.closest('.node') : null;\r\n\r\n            if (closestNodeGroup) {\r\n              const targetNodeData = d3.select(closestNodeGroup).datum();\r\n              if (targetNodeData && linkingState.current.sourceNode && linkingState.current.sourceNode._id !== targetNodeData._id) {\r\n                console.log(`[Drag End - Connect Mode] Creating edge from ${linkingState.current.sourceNode._id} to ${targetNodeData._id}`);\r\n                if (onCreateEdge) {\r\n                  // console.log(`[CreateEdge] from ${linkingState.current.sourceNode._id} to ${targetNodeData._id}`);\r\n                  onCreateEdge(linkingState.current.sourceNode._id, targetNodeData._id);\r\n                }\r\n              } else {\r\n                console.log(\"[Drag End - Connect Mode] Drag ended on source node or invalid target. Cancelling link.\");\r\n              }\r\n            } else {\r\n              console.log(\"[Drag End - Connect Mode] Drag ended NOT on a node. Cancelling link.\");\r\n            }\r\n            linkingState.current.tempLink?.remove();\r\n            linkingState.current.isLinking = false;\r\n            linkingState.current.sourceNode = null;\r\n            linkingState.current.tempLink = null;\r\n            setInteractionMode('select');\r\n          } else if (wasClick) {\r\n            // A \"click\" (drag with no movement) on a node while in connect mode.\r\n            // Currently, click-linking is disabled. So, this action effectively does nothing for linking.\r\n            // We might want to select the node or provide feedback, but handleNodeClick will also fire.\r\n            console.log(`[Drag End - Connect Mode] Click detected on node ${d._id}. No drag-linking action.`);\r\n          }\r\n        } else { // interactionMode === 'select' (or other modes)\r\n          // TEMPORARILY REMOVE CLICK HANDLING FROM DRAGEND TO ISOLATE\r\n          /*\r\n          if (wasClick && !event.defaultPrevented) { \r\n            console.log(`[Drag End - Select Mode] Click detected on node ${d._id}. Calling onNodeClick.`);\r\n            if (clickTimeout.current) {\r\n              clearTimeout(clickTimeout.current);\r\n              clickTimeout.current = null;\r\n            }\r\n            setSelectedEdge(null); \r\n            if (onNodeClick) {\r\n              onNodeClick(d);\r\n            }\r\n          } else if (!wasClick) { // It was a drag\r\n          */\r\n          // Ensure only actual drags are handled here for now\r\n          if (!wasClick) { // It was a drag\r\n            console.log(`[Drag End - Select Mode] Drag finished for node ${d._id}. Updating position.`);\r\n            d.fx = Math.max(15, Math.min(containerWidth - 15, d.x)); \r\n            d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\r\n            d.position = { x: d.fx, y: d.fy };\r\n            if (api && typeof api.updateNode === 'function') {\r\n              api.updateNode(d._id, { position: { x: d.fx, y: d.fy } })\r\n                .catch(err => console.error(\"Failed to update node position:\", err));\r\n            }\r\n          } else {\r\n              console.log(\"[Drag End - Select Mode] Click was detected (dx/dy small), but not processing as click here. Letting handleNodeClick manage it.\");\r\n          }\r\n        }\r\n    }\r\n\r\n    return d3.drag()\r\n      .on('start', dragstarted)\r\n      .on('drag', dragged)\r\n      .on('end', dragended);\r\n  }\r\n\r\n  const handleNodeClick = (event, d) => {\r\n    console.log(`[Node Click Handler] Node: ${d._id}, Mode: ${interactionMode}, DefaultPrevented: ${event.defaultPrevented}`);\r\n\r\n    if (event.defaultPrevented ) { \r\n      console.log('[Node Click Handler] DefaultPrevented, returning early (likely drag related).');\r\n      return;\r\n    }\r\n\r\n    if (clickTimeout.current) { // Double-click\r\n      clearTimeout(clickTimeout.current);\r\n      clickTimeout.current = null;\r\n      console.log(`[Node Click Handler] Double-click on node ${d._id}.`);\r\n      if (onNodeDoubleClick) {\r\n        onNodeDoubleClick(d);\r\n      }\r\n      return;\r\n    }\r\n\r\n    // For single-click, set a timeout. \r\n    clickTimeout.current = setTimeout(() => {\r\n      clickTimeout.current = null;\r\n      console.log(`[Node Click Handler] Timeout for single click on ${d._id}. Mode: ${interactionMode}.`);\r\n      \r\n      if (interactionMode === 'connect') {\r\n        console.log(`[Node Click Handler - Connect Mode] Single click on node ${d._id}. No action for click-linking.`);\r\n      } else { // interactionMode === 'select'\r\n        console.log(`[Node Click Handler - Select Mode] Processing single click for node ${d._id}.`);\r\n        setSelectedEdge(null); \r\n        if (onNodeClick) { \r\n          onNodeClick(d);\r\n        }\r\n      }\r\n    }, 250); \r\n  };\r\n\r\n  // Handle edge deletion\r\n  const handleDeleteEdge = () => {\r\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\r\n      onDeleteEdge(selectedEdge._id);\r\n      setSelectedEdge(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-wrapper\" onClick={(e) => {\r\n      console.log('[Graph Wrapper Click] Target:', e.target, 'CurrentTarget:', e.currentTarget);\r\n      if (e.target === e.currentTarget) {\r\n        console.log('[Graph Wrapper Click] Click was directly on wrapper.');\r\n        if (onBackgroundClick) {\r\n          onBackgroundClick();\r\n        }\r\n      }\r\n    }}>\r\n      {nodes && nodes.length > 0 ? (\r\n        <svg ref={svgRef} className=\"graph-svg\" />\r\n      ) : (\r\n        <div className=\"graph-svg empty-graph-placeholder\">\r\n          <div className=\"empty-graph-message\">\r\n            <p>This canvas is empty. Start by creating a new node!</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className=\"graph-controls\">\r\n        {selectedEdge && (\r\n          <button\r\n            onClick={handleDeleteEdge}\r\n            className=\"button danger\"\r\n          >\r\n            <TrashIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            Remove Edge\r\n          </button>\r\n        )}\r\n        <div className=\"button-row\">\r\n          <button \r\n            onClick={() => {\r\n              // Pass current dimensions when calling onCreateNew\r\n              if (onCreateNew) {\r\n                onCreateNew({ \r\n                  graphWidth: graphDimensionsRef.current.width, \r\n                  graphHeight: graphDimensionsRef.current.height \r\n                });\r\n              }\r\n            }}\r\n            className=\"button primary\"\r\n          >\r\n            <PlusIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            Create New Node\r\n          </button>\r\n          <button\r\n            onClick={() => setInteractionMode(prevMode => prevMode === 'connect' ? 'select' : 'connect')}\r\n            className={`button accent ${interactionMode === 'connect' ? 'active' : ''}`}\r\n          >\r\n            <LinkIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            {interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}