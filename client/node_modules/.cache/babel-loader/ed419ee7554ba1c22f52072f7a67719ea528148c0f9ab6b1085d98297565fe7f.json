{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Project\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport NodeEditor from './components/NodeEditor';\nimport Graph from './components/Graph.js';\nimport api from './services/api';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isCreating, setIsCreating] = useState(false);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    try {\n      const [nodesRes, edgesRes] = await Promise.all([api.getNodes(), api.getEdges()]);\n      setNodes(nodesRes.data);\n      setEdges(edgesRes.data);\n    } catch (err) {\n      console.error('Error fetching data:', err);\n    }\n  };\n  const handleCreateNew = () => {\n    setSelectedNode(null);\n    setIsCreating(true);\n  };\n  const handleSave = async nodeData => {\n    try {\n      console.log('Saving node:', nodeData); // Debug log\n\n      if (nodeData._id) {\n        // Update existing node\n        await api.updateNode(nodeData._id, {\n          title: nodeData.title,\n          content: nodeData.content,\n          tags: nodeData.tags\n        });\n      } else {\n        // Create new node\n        await api.createNode({\n          title: nodeData.title,\n          content: nodeData.content,\n          tags: nodeData.tags\n        });\n      }\n\n      // Refresh data and reset UI\n      await fetchData();\n      setSelectedNode(null);\n      setIsCreating(false);\n    } catch (err) {\n      var _err$response, _err$response2, _err$response2$data;\n      console.error('Save failed:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n      alert(`Save failed: ${((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || err.message}`);\n    }\n  };\n  const handleDelete = async id => {\n    try {\n      await api.deleteNode(id);\n      await fetchData();\n      setSelectedNode(null);\n    } catch (err) {\n      console.error('Error deleting node:', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-container\",\n      children: /*#__PURE__*/_jsxDEV(Graph, {\n        nodes: nodes,\n        edges: edges,\n        onNodeClick: setSelectedNode,\n        onCreateNew: handleCreateNew\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-container\",\n      children: selectedNode || isCreating ? /*#__PURE__*/_jsxDEV(NodeEditor, {\n        node: selectedNode || {\n          title: '',\n          content: '',\n          tags: []\n        },\n        onSave: handleSave,\n        onDelete: selectedNode ? () => handleDelete(selectedNode._id) : null,\n        onCancel: () => {\n          setSelectedNode(null);\n          setIsCreating(false);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-state\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select a node or\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCreateNew,\n          children: \"Create New Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LvZRcnROCOc2lm3QVMEMNODRyTc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","NodeEditor","Graph","api","jsxDEV","_jsxDEV","App","_s","nodes","setNodes","edges","setEdges","selectedNode","setSelectedNode","isCreating","setIsCreating","fetchData","nodesRes","edgesRes","Promise","all","getNodes","getEdges","data","err","console","error","handleCreateNew","handleSave","nodeData","log","_id","updateNode","title","content","tags","createNode","_err$response","_err$response2","_err$response2$data","response","message","alert","handleDelete","id","deleteNode","className","children","onNodeClick","onCreateNew","fileName","_jsxFileName","lineNumber","columnNumber","node","onSave","onDelete","onCancel","onClick","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Project/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport NodeEditor from './components/NodeEditor';\r\nimport Graph from './components/Graph.js';\r\nimport api from './services/api';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const [isCreating, setIsCreating] = useState(false);\r\n\r\n  useEffect(() => { fetchData(); }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const [nodesRes, edgesRes] = await Promise.all([\r\n        api.getNodes(),\r\n        api.getEdges()\r\n      ]);\r\n      setNodes(nodesRes.data);\r\n      setEdges(edgesRes.data);\r\n    } catch (err) {\r\n      console.error('Error fetching data:', err);\r\n    }\r\n  };\r\n\r\n  const handleCreateNew = () => {\r\n    setSelectedNode(null);\r\n    setIsCreating(true);\r\n  };\r\n  \r\n  const handleSave = async (nodeData) => {\r\n    try {\r\n      console.log('Saving node:', nodeData); // Debug log\r\n      \r\n      if (nodeData._id) {\r\n        // Update existing node\r\n        await api.updateNode(nodeData._id, {\r\n          title: nodeData.title,\r\n          content: nodeData.content,\r\n          tags: nodeData.tags\r\n        });\r\n      } else {\r\n        // Create new node\r\n        await api.createNode({\r\n          title: nodeData.title,\r\n          content: nodeData.content,\r\n          tags: nodeData.tags\r\n        });\r\n      }\r\n      \r\n      // Refresh data and reset UI\r\n      await fetchData();\r\n      setSelectedNode(null);\r\n      setIsCreating(false);\r\n      \r\n    } catch (err) {\r\n      console.error('Save failed:', err.response?.data || err.message);\r\n      alert(`Save failed: ${err.response?.data?.message || err.message}`);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    try {\r\n      await api.deleteNode(id);\r\n      await fetchData();\r\n      setSelectedNode(null);\r\n    } catch (err) {\r\n      console.error('Error deleting node:', err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <div className=\"graph-container\">\r\n        <Graph \r\n          nodes={nodes} \r\n          edges={edges} \r\n          onNodeClick={setSelectedNode}\r\n          onCreateNew={handleCreateNew}\r\n        />\r\n      </div>\r\n      <div className=\"editor-container\">\r\n        {(selectedNode || isCreating) ? (\r\n          <NodeEditor \r\n            node={selectedNode || { title: '', content: '', tags: [] }}\r\n            onSave={handleSave}\r\n            onDelete={selectedNode ? () => handleDelete(selectedNode._id) : null}\r\n            onCancel={() => {\r\n              setSelectedNode(null);\r\n              setIsCreating(false);\r\n            }}\r\n          />\r\n        ) : (\r\n          <div className=\"empty-state\">\r\n            <p>Select a node or</p>\r\n            <button onClick={handleCreateNew}>Create New Node</button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}