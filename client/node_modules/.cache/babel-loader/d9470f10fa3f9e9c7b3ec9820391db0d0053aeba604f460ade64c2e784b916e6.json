{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Mind Mosaic\\\\client\\\\src\\\\components\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport api from '../services/api.js';\nimport PlusIcon from './icons/PlusIcon';\nimport LinkIcon from './icons/LinkIcon';\nimport TrashIcon from './icons/TrashIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  nodes = [],\n  edges = [],\n  onNodeClick,\n  onNodeDoubleClick,\n  onCreateNew,\n  onCreateEdge,\n  onDeleteEdge,\n  interactionMode = 'select',\n  setInteractionMode,\n  onBackgroundClick,\n  isAnyPanelVisible\n}) => {\n  _s();\n  const svgRef = useRef();\n  const linkingState = useRef({\n    sourceNode: null,\n    tempLink: null,\n    isLinking: false\n  });\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const clickTimeout = useRef(null);\n  console.log('Graph received:', {\n    nodeCount: nodes.length,\n    edgeCount: edges.length,\n    mode: interactionMode\n  });\n\n  // Debug: Log the actual nodes and edges data\n  console.log('Nodes data:', JSON.stringify(nodes, null, 2));\n  console.log('Edges data:', JSON.stringify(edges, null, 2));\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n    const currentSvg = svgRef.current;\n    if (!currentSvg) return;\n    let localContainerWidth = currentSvg.clientWidth;\n    let localContainerHeight = currentSvg.clientHeight;\n\n    // Guard against zero or very small dimensions\n    if (localContainerWidth < 50) localContainerWidth = 50;\n    if (localContainerHeight < 50) localContainerHeight = 50;\n    const setupBackgroundClickHandler = () => {\n      svg.append('rect').attr('class', 'background').attr('width', '100%').attr('height', '100%').attr('fill', 'transparent').on('click', event => {\n        event.stopPropagation();\n        if (event.target.classList.contains('background')) {\n          setSelectedEdge(null);\n          if (onBackgroundClick) {\n            onBackgroundClick();\n          }\n        }\n      });\n    };\n    if (!nodes || nodes.length === 0) {\n      setupBackgroundClickHandler(); // Ensure background click is available for empty graph\n      // Render empty state message (already handled by App.js or Graph.css)\n      return;\n    }\n\n    // Use the guarded dimensions from now on\n    const containerWidth = localContainerWidth;\n    const containerHeight = localContainerHeight;\n    svg.attr('viewBox', [0, 0, containerWidth, containerHeight]).attr('preserveAspectRatio', 'xMidYMid meet');\n    svg.append('rect').attr('class', 'background').attr('width', '100%').attr('height', '100%').attr('fill', 'transparent').on('click', event => {\n      event.stopPropagation();\n      if (event.target.classList.contains('background')) {\n        setSelectedEdge(null);\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    });\n\n    // Add arrow marker definition for edges\n    svg.append(\"defs\").selectAll(\"marker\").data([\"arrow\"]).enter().append(\"marker\").attr(\"id\", d => d).attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 20) // Increased from 15 to position arrow better\n    .attr(\"refY\", 0).attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#A8C3A4\"); // Sage for arrowheads\n\n    // Initialize node positions if not set\n    nodes.forEach(node => {\n      if (!node.position || node.position.x === null && node.position.y === null) {\n        node.x = Math.random() * (containerWidth - 100) + 50;\n        node.y = Math.random() * (containerHeight - 100) + 50;\n        node.position = {\n          x: node.x,\n          y: node.y\n        };\n      } else {\n        node.x = node.position.x;\n        node.y = node.position.y;\n      }\n      // Don't fix positions by default to allow force layout to work\n      node.fx = null;\n      node.fy = null;\n    });\n\n    // Create a map of nodes by ID for easy lookup\n    const nodeMap = {};\n    nodes.forEach(node => {\n      nodeMap[node._id] = node;\n    });\n\n    // Process edges to ensure they reference actual node objects\n    const processedEdges = edges.map(edge => ({\n      id: edge._id,\n      source: nodeMap[edge.source] || edge.source,\n      target: nodeMap[edge.target] || edge.target,\n      type: edge.type,\n      _id: edge._id\n    }));\n    const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(processedEdges).id(d => d._id).distance(150)).alpha(0).alphaDecay(1).alphaTarget(0);\n\n    // Fix node positions immediately\n    nodes.forEach(node => {\n      if (node.position) {\n        node.fx = node.position.x;\n        node.fy = node.position.y;\n      } else {\n        node.fx = Math.random() * (containerWidth - 100) + 50;\n        node.fy = Math.random() * (containerHeight - 100) + 50;\n        node.position = {\n          x: node.fx,\n          y: node.fy\n        };\n      }\n    });\n\n    // Create edge paths with arrows, appended directly to svg\n    const linkElements = svg.append('g').attr('class', 'links').selectAll('path').data(processedEdges).enter().append('path').attr('class', 'link').attr('stroke', '#A8C3A4') // Sage for links\n    .attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)').on('click', handleEdgeClick);\n\n    // Create node elements, appended directly to svg\n    const nodeElements = svg.append('g').attr('class', 'nodes').selectAll('g').data(nodes).enter().append('g').attr('class', 'node').call(dragBehavior(simulation, svg, containerWidth, containerHeight));\n    nodeElements.append('circle').attr('r', 12).attr('fill', '#2E7D32') // Forest Green for nodes\n    .attr('stroke', '#1B5E20') // Darker Forest Green for node stroke\n    .attr('stroke-width', 1.5).on('click', handleNodeClick);\n    nodeElements.append('text').text(d => {\n      var _d$_id;\n      return d.title || ((_d$_id = d._id) === null || _d$_id === void 0 ? void 0 : _d$_id.substring(0, 6));\n    }).attr('x', 16).attr('y', 5).attr('fill', '#FAF3E0') // Cream text on nodes for contrast with Forest Green\n    .attr('text-anchor', 'start').on('click', handleNodeClick);\n    function handleEdgeClick(event, d) {\n      event.stopPropagation();\n      if (interactionMode === 'select') {\n        d3.selectAll('.link').classed('selected', false);\n        d3.select(event.currentTarget).classed('selected', true);\n        setSelectedEdge(d);\n        if (onNodeClick) onNodeClick(null);\n      }\n    }\n    svg.on('click', event => {\n      if (event.target.classList.contains('background') || event.target === svgRef.current) {\n        d3.selectAll('.link').classed('selected', false);\n        setSelectedEdge(null);\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    });\n    function ticked() {\n      linkElements.attr('d', d => {\n        const sourceX = Math.max(15, Math.min(containerWidth - 15, d.source.x));\n        const sourceY = Math.max(15, Math.min(containerHeight - 15, d.source.y));\n        const targetX = Math.max(15, Math.min(containerWidth - 15, d.target.x));\n        const targetY = Math.max(15, Math.min(containerHeight - 15, d.target.y));\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\n      });\n      nodeElements.attr('transform', d => {\n        const x = Math.max(15, Math.min(containerWidth - 15, d.x));\n        const y = Math.max(15, Math.min(containerHeight - 15, d.y));\n        return `translate(${x},${y})`;\n      });\n    }\n    simulation.on('tick', ticked);\n    return () => {\n      simulation.stop();\n      if (linkingState.current.tempLink) {\n        linkingState.current.tempLink.remove();\n      }\n      linkingState.current = {\n        sourceNode: null,\n        tempLink: null,\n        isLinking: false\n      };\n      if (clickTimeout.current) {\n        clearTimeout(clickTimeout.current);\n      }\n    };\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, interactionMode, onBackgroundClick, isAnyPanelVisible]);\n\n  // Handle keyboard delete for selected edges\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n          onDeleteEdge(selectedEdge._id);\n          setSelectedEdge(null); // Deselect after deletion\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedEdge, onDeleteEdge]);\n  function dragBehavior(simulation, svg, containerWidth, containerHeight) {\n    function dragstarted(event, d) {\n      if (interactionMode === 'connect') {\n        linkingState.current.isLinking = true;\n        linkingState.current.sourceNode = d;\n        event.sourceEvent.stopPropagation();\n        linkingState.current.tempLink = svg.append('path').attr('class', 'temp-link link').attr('d', `M${d.x},${d.y}L${d.x},${d.y}`).attr('stroke-dasharray', '5,5').attr('stroke', '#A8C3A4').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)');\n      } else {\n        event.sourceEvent.stopPropagation();\n        if (!event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\n        d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\n      }\n    }\n    function dragged(event, d) {\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\n        event.sourceEvent.stopPropagation();\n        const targetX = Math.max(0, Math.min(containerWidth, event.x));\n        const targetY = Math.max(0, Math.min(containerHeight, event.y));\n        linkingState.current.tempLink.attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${targetX},${targetY}`);\n      } else {\n        event.sourceEvent.stopPropagation();\n        d.fx = Math.max(15, Math.min(containerWidth - 15, event.x));\n        d.fy = Math.max(15, Math.min(containerHeight - 15, event.y));\n        d.position = {\n          x: d.fx,\n          y: d.fy\n        };\n      }\n    }\n    async function dragended(event, d) {\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\n        event.sourceEvent.stopPropagation();\n        if (linkingState.current.tempLink) {\n          linkingState.current.tempLink.remove();\n          linkingState.current.tempLink = null;\n        }\n        const targetElement = event.sourceEvent.target;\n        if (targetElement && (targetElement instanceof Element || targetElement instanceof SVGElement)) {\n          let targetNodeElement = targetElement;\n          while (targetNodeElement && (targetNodeElement instanceof Element || targetNodeElement instanceof SVGElement) && !d3.select(targetNodeElement).classed('node')) {\n            if (!targetNodeElement.parentNode || !(targetNodeElement.parentNode instanceof Element || targetNodeElement.parentNode instanceof SVGElement)) {\n              targetNodeElement = null;\n              break;\n            }\n            targetNodeElement = targetNodeElement.parentNode;\n          }\n          if (targetNodeElement && (targetNodeElement instanceof Element || targetNodeElement instanceof SVGElement) && d3.select(targetNodeElement).classed('node')) {\n            const targetDatum = d3.select(targetNodeElement).datum();\n            if (targetDatum && targetDatum._id && linkingState.current.sourceNode && targetDatum._id !== linkingState.current.sourceNode._id) {\n              if (onCreateEdge) {\n                onCreateEdge(linkingState.current.sourceNode._id, targetDatum._id);\n              }\n            }\n          }\n        }\n        linkingState.current = {\n          sourceNode: null,\n          tempLink: null,\n          isLinking: false\n        };\n      } else {\n        if (!event.active) simulation.alphaTarget(0);\n        d.fx = event.x;\n        d.fy = event.y;\n        d.position = {\n          x: d.fx,\n          y: d.fy\n        };\n        try {\n          if (d._id) {\n            await api.updateNodePosition(d._id, d.position);\n          }\n        } catch (err) {\n          console.error('Failed to save node position:', err);\n        }\n      }\n    }\n    return d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended);\n  }\n  const handleNodeClick = (event, d) => {\n    event.stopPropagation();\n    setSelectedEdge(null);\n    if (interactionMode === 'connect') {\n      // Handle connection mode logic\n      return;\n    }\n    if (clickTimeout.current) {\n      // Double click detected\n      clearTimeout(clickTimeout.current);\n      clickTimeout.current = null;\n      if (onNodeDoubleClick) {\n        onNodeDoubleClick(d);\n      }\n    } else {\n      // First click - wait for potential second click\n      clickTimeout.current = setTimeout(() => {\n        clickTimeout.current = null;\n        if (onNodeClick) {\n          onNodeClick(d);\n        }\n      }, 250); // 250ms delay to detect double click\n    }\n  };\n\n  // Handle edge deletion\n  const handleDeleteEdge = () => {\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n      onDeleteEdge(selectedEdge._id);\n      setSelectedEdge(null);\n    }\n  };\n  function handleMouseMoveLinking(event) {\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode) return;\n    const [x, y] = d3.pointer(event, svgRef.current);\n    linkingState.current.tempLink.attr('x2', x).attr('y2', y).attr('stroke', '#B87333') // Copper for temporary linking line\n    .attr('stroke-dasharray', '5,5');\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-wrapper\",\n    onClick: e => {\n      if (e.target === e.currentTarget) {\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    },\n    children: [nodes && nodes.length > 0 ? /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      className: \"graph-svg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-svg empty-graph-placeholder\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-graph-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This canvas is empty. Start by creating a new node!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-controls\",\n      children: [selectedEdge && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteEdge,\n        className: \"button danger\",\n        children: [/*#__PURE__*/_jsxDEV(TrashIcon, {\n          style: {\n            width: '1rem',\n            height: '1rem',\n            marginRight: '0.5rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 13\n        }, this), \"Remove Edge\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onCreateNew,\n          className: \"button primary\",\n          children: [/*#__PURE__*/_jsxDEV(PlusIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this), \"Create New Node\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setInteractionMode(prevMode => prevMode === 'connect' ? 'select' : 'connect'),\n          className: `button secondary ${interactionMode === 'connect' ? 'active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(LinkIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 13\n          }, this), interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 393,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"bm2gvpkdqarEkck4tnitWYYrwfY=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useEffect","useState","d3","api","PlusIcon","LinkIcon","TrashIcon","jsxDEV","_jsxDEV","Graph","nodes","edges","onNodeClick","onNodeDoubleClick","onCreateNew","onCreateEdge","onDeleteEdge","interactionMode","setInteractionMode","onBackgroundClick","isAnyPanelVisible","_s","svgRef","linkingState","sourceNode","tempLink","isLinking","selectedEdge","setSelectedEdge","clickTimeout","console","log","nodeCount","length","edgeCount","mode","JSON","stringify","svg","select","current","selectAll","remove","currentSvg","localContainerWidth","clientWidth","localContainerHeight","clientHeight","setupBackgroundClickHandler","append","attr","on","event","stopPropagation","target","classList","contains","containerWidth","containerHeight","data","enter","d","forEach","node","position","x","y","Math","random","fx","fy","nodeMap","_id","processedEdges","map","edge","id","source","type","simulation","forceSimulation","force","forceLink","distance","alpha","alphaDecay","alphaTarget","linkElements","handleEdgeClick","nodeElements","call","dragBehavior","handleNodeClick","text","_d$_id","title","substring","classed","currentTarget","ticked","sourceX","max","min","sourceY","targetX","targetY","stop","clearTimeout","handleKeyDown","key","window","addEventListener","removeEventListener","dragstarted","sourceEvent","active","restart","dragged","dragended","targetElement","Element","SVGElement","targetNodeElement","parentNode","targetDatum","datum","updateNodePosition","err","error","drag","setTimeout","handleDeleteEdge","handleMouseMoveLinking","pointer","className","onClick","e","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","style","width","height","marginRight","prevMode","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Mind Mosaic/client/src/components/graph.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\nimport './Graph.css';\r\nimport api from '../services/api.js';\r\nimport PlusIcon from './icons/PlusIcon';\r\nimport LinkIcon from './icons/LinkIcon';\r\nimport TrashIcon from './icons/TrashIcon';\r\n\r\nconst Graph = ({ nodes = [], edges = [], onNodeClick, onNodeDoubleClick, onCreateNew, onCreateEdge, onDeleteEdge, interactionMode = 'select', setInteractionMode, onBackgroundClick, isAnyPanelVisible }) => {\r\n  const svgRef = useRef();\r\n  const linkingState = useRef({ sourceNode: null, tempLink: null, isLinking: false });\r\n  const [selectedEdge, setSelectedEdge] = useState(null);\r\n  const clickTimeout = useRef(null);\r\n\r\n  console.log('Graph received:', {\r\n    nodeCount: nodes.length,\r\n    edgeCount: edges.length,\r\n    mode: interactionMode\r\n  });\r\n\r\n  // Debug: Log the actual nodes and edges data\r\n  console.log('Nodes data:', JSON.stringify(nodes, null, 2));\r\n  console.log('Edges data:', JSON.stringify(edges, null, 2));\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll('*').remove();\r\n\r\n    const currentSvg = svgRef.current;\r\n    if (!currentSvg) return;\r\n\r\n    let localContainerWidth = currentSvg.clientWidth;\r\n    let localContainerHeight = currentSvg.clientHeight;\r\n\r\n    // Guard against zero or very small dimensions\r\n    if (localContainerWidth < 50) localContainerWidth = 50;\r\n    if (localContainerHeight < 50) localContainerHeight = 50;\r\n\r\n    const setupBackgroundClickHandler = () => {\r\n      svg.append('rect')\r\n        .attr('class', 'background')\r\n        .attr('width', '100%')\r\n        .attr('height', '100%')\r\n        .attr('fill', 'transparent')\r\n        .on('click', (event) => {\r\n          event.stopPropagation();\r\n          if (event.target.classList.contains('background')) {\r\n            setSelectedEdge(null);\r\n            if (onBackgroundClick) {\r\n              onBackgroundClick();\r\n            }\r\n          }\r\n        });\r\n    };\r\n\r\n    if (!nodes || nodes.length === 0) {\r\n      setupBackgroundClickHandler(); // Ensure background click is available for empty graph\r\n      // Render empty state message (already handled by App.js or Graph.css)\r\n      return;\r\n    }\r\n\r\n    // Use the guarded dimensions from now on\r\n    const containerWidth = localContainerWidth;\r\n    const containerHeight = localContainerHeight;\r\n\r\n    svg\r\n      .attr('viewBox', [0, 0, containerWidth, containerHeight])\r\n      .attr('preserveAspectRatio', 'xMidYMid meet');\r\n\r\n    svg.append('rect')\r\n      .attr('class', 'background')\r\n      .attr('width', '100%')\r\n      .attr('height', '100%')\r\n      .attr('fill', 'transparent')\r\n      .on('click', (event) => {\r\n        event.stopPropagation();\r\n        if (event.target.classList.contains('background')) {\r\n          setSelectedEdge(null);\r\n          if (onBackgroundClick) {\r\n            onBackgroundClick();\r\n          }\r\n        }\r\n      });\r\n\r\n    // Add arrow marker definition for edges\r\n    svg.append(\"defs\").selectAll(\"marker\")\r\n      .data([\"arrow\"])\r\n      .enter().append(\"marker\")\r\n      .attr(\"id\", d => d)\r\n      .attr(\"viewBox\", \"0 -5 10 10\")\r\n      .attr(\"refX\", 20) // Increased from 15 to position arrow better\r\n      .attr(\"refY\", 0)\r\n      .attr(\"markerWidth\", 6)\r\n      .attr(\"markerHeight\", 6)\r\n      .attr(\"orient\", \"auto\")\r\n      .append(\"path\")\r\n      .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n      .attr(\"fill\", \"#A8C3A4\"); // Sage for arrowheads\r\n\r\n    // Initialize node positions if not set\r\n    nodes.forEach(node => {\r\n      if (!node.position || (node.position.x === null && node.position.y === null)) {\r\n        node.x = Math.random() * (containerWidth - 100) + 50;\r\n        node.y = Math.random() * (containerHeight - 100) + 50;\r\n        node.position = { x: node.x, y: node.y };\r\n      } else {\r\n        node.x = node.position.x;\r\n        node.y = node.position.y;\r\n      }\r\n      // Don't fix positions by default to allow force layout to work\r\n      node.fx = null;\r\n      node.fy = null;\r\n    });\r\n\r\n    // Create a map of nodes by ID for easy lookup\r\n    const nodeMap = {};\r\n    nodes.forEach(node => {\r\n      nodeMap[node._id] = node;\r\n    });\r\n\r\n    // Process edges to ensure they reference actual node objects\r\n    const processedEdges = edges.map(edge => ({\r\n      id: edge._id,\r\n      source: nodeMap[edge.source] || edge.source,\r\n      target: nodeMap[edge.target] || edge.target,\r\n      type: edge.type,\r\n      _id: edge._id\r\n    }));\r\n\r\n    const simulation = d3.forceSimulation(nodes)\r\n      .force('link', d3.forceLink(processedEdges).id(d => d._id).distance(150))\r\n      .alpha(0)\r\n      .alphaDecay(1)\r\n      .alphaTarget(0);\r\n\r\n    // Fix node positions immediately\r\n    nodes.forEach(node => {\r\n      if (node.position) {\r\n        node.fx = node.position.x;\r\n        node.fy = node.position.y;\r\n      } else {\r\n        node.fx = Math.random() * (containerWidth - 100) + 50;\r\n        node.fy = Math.random() * (containerHeight - 100) + 50;\r\n        node.position = { x: node.fx, y: node.fy };\r\n      }\r\n    });\r\n\r\n    // Create edge paths with arrows, appended directly to svg\r\n    const linkElements = svg.append('g')\r\n      .attr('class', 'links')\r\n      .selectAll('path')\r\n      .data(processedEdges)\r\n      .enter().append('path')\r\n      .attr('class', 'link')\r\n      .attr('stroke', '#A8C3A4') // Sage for links\r\n      .attr('stroke-width', 2)\r\n      .attr('fill', 'none')\r\n      .attr('marker-end', 'url(#arrow)')\r\n      .on('click', handleEdgeClick);\r\n\r\n    // Create node elements, appended directly to svg\r\n    const nodeElements = svg.append('g')\r\n      .attr('class', 'nodes')\r\n      .selectAll('g')\r\n      .data(nodes)\r\n      .enter().append('g')\r\n      .attr('class', 'node')\r\n      .call(dragBehavior(simulation, svg, containerWidth, containerHeight));\r\n\r\n    nodeElements.append('circle')\r\n      .attr('r', 12)\r\n      .attr('fill', '#2E7D32') // Forest Green for nodes\r\n      .attr('stroke', '#1B5E20') // Darker Forest Green for node stroke\r\n      .attr('stroke-width', 1.5)\r\n      .on('click', handleNodeClick);\r\n\r\n    nodeElements.append('text')\r\n      .text(d => d.title || d._id?.substring(0, 6))\r\n      .attr('x', 16)\r\n      .attr('y', 5)\r\n      .attr('fill', '#FAF3E0') // Cream text on nodes for contrast with Forest Green\r\n      .attr('text-anchor', 'start')\r\n      .on('click', handleNodeClick);\r\n\r\n    function handleEdgeClick(event, d) {\r\n      event.stopPropagation();\r\n      if (interactionMode === 'select') {\r\n        d3.selectAll('.link').classed('selected', false);\r\n        d3.select(event.currentTarget).classed('selected', true);\r\n        setSelectedEdge(d);\r\n        if (onNodeClick) onNodeClick(null);\r\n      }\r\n    }\r\n\r\n    svg.on('click', (event) => {\r\n      if (event.target.classList.contains('background') || event.target === svgRef.current) {\r\n        d3.selectAll('.link').classed('selected', false);\r\n        setSelectedEdge(null);\r\n        if (onBackgroundClick) {\r\n          onBackgroundClick();\r\n        }\r\n      }\r\n    });\r\n\r\n    function ticked() {\r\n      linkElements.attr('d', d => {\r\n        const sourceX = Math.max(15, Math.min(containerWidth - 15, d.source.x));\r\n        const sourceY = Math.max(15, Math.min(containerHeight - 15, d.source.y));\r\n        const targetX = Math.max(15, Math.min(containerWidth - 15, d.target.x));\r\n        const targetY = Math.max(15, Math.min(containerHeight - 15, d.target.y));\r\n        \r\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\r\n      });\r\n\r\n      nodeElements.attr('transform', d => {\r\n        const x = Math.max(15, Math.min(containerWidth - 15, d.x));\r\n        const y = Math.max(15, Math.min(containerHeight - 15, d.y));\r\n        return `translate(${x},${y})`;\r\n      });\r\n    }\r\n\r\n    simulation.on('tick', ticked);\r\n    \r\n    return () => {\r\n      simulation.stop();\r\n      if (linkingState.current.tempLink) {\r\n        linkingState.current.tempLink.remove();\r\n      }\r\n      linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n      if (clickTimeout.current) {\r\n        clearTimeout(clickTimeout.current);\r\n      }\r\n    };\r\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, interactionMode, onBackgroundClick, isAnyPanelVisible]);\r\n\r\n  // Handle keyboard delete for selected edges\r\n  useEffect(() => {\r\n    const handleKeyDown = (event) => {\r\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\r\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\r\n          onDeleteEdge(selectedEdge._id);\r\n          setSelectedEdge(null); // Deselect after deletion\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [selectedEdge, onDeleteEdge]);\r\n\r\n  function dragBehavior(simulation, svg, containerWidth, containerHeight) {\r\n    function dragstarted(event, d) {\r\n      if (interactionMode === 'connect') {\r\n        linkingState.current.isLinking = true;\r\n        linkingState.current.sourceNode = d;\r\n        event.sourceEvent.stopPropagation();\r\n        linkingState.current.tempLink = svg.append('path')\r\n          .attr('class', 'temp-link link')\r\n          .attr('d', `M${d.x},${d.y}L${d.x},${d.y}`)\r\n          .attr('stroke-dasharray', '5,5')\r\n          .attr('stroke', '#A8C3A4')\r\n          .attr('stroke-width', 2)\r\n          .attr('fill', 'none')\r\n          .attr('marker-end', 'url(#arrow)');\r\n      } else {\r\n        event.sourceEvent.stopPropagation();\r\n        if (!event.active) simulation.alphaTarget(0.3).restart();\r\n        d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\r\n        d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\r\n      }\r\n    }\r\n\r\n    function dragged(event, d) {\r\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\r\n        event.sourceEvent.stopPropagation();\r\n        const targetX = Math.max(0, Math.min(containerWidth, event.x));\r\n        const targetY = Math.max(0, Math.min(containerHeight, event.y));\r\n        linkingState.current.tempLink\r\n          .attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${targetX},${targetY}`);\r\n      } else {\r\n        event.sourceEvent.stopPropagation();\r\n        d.fx = Math.max(15, Math.min(containerWidth - 15, event.x));\r\n        d.fy = Math.max(15, Math.min(containerHeight - 15, event.y));\r\n        d.position = { x: d.fx, y: d.fy };\r\n      }\r\n    }\r\n\r\n    async function dragended(event, d) {\r\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\r\n        event.sourceEvent.stopPropagation();\r\n        if (linkingState.current.tempLink) {\r\n          linkingState.current.tempLink.remove();\r\n          linkingState.current.tempLink = null;\r\n        }\r\n\r\n        const targetElement = event.sourceEvent.target;\r\n        if (targetElement && (targetElement instanceof Element || targetElement instanceof SVGElement)) {\r\n          let targetNodeElement = targetElement;\r\n\r\n          while (targetNodeElement &&\r\n                 (targetNodeElement instanceof Element || targetNodeElement instanceof SVGElement) &&\r\n                 !d3.select(targetNodeElement).classed('node')) {\r\n            if (!targetNodeElement.parentNode || !(targetNodeElement.parentNode instanceof Element || targetNodeElement.parentNode instanceof SVGElement) ) {\r\n                targetNodeElement = null;\r\n                break;\r\n            }\r\n            targetNodeElement = targetNodeElement.parentNode;\r\n          }\r\n\r\n          if (targetNodeElement &&\r\n              (targetNodeElement instanceof Element || targetNodeElement instanceof SVGElement) &&\r\n              d3.select(targetNodeElement).classed('node')) {\r\n            const targetDatum = d3.select(targetNodeElement).datum();\r\n\r\n            if (targetDatum && targetDatum._id && linkingState.current.sourceNode && targetDatum._id !== linkingState.current.sourceNode._id) {\r\n              if (onCreateEdge) {\r\n                onCreateEdge(linkingState.current.sourceNode._id, targetDatum._id);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n      } else {\r\n        if (!event.active) simulation.alphaTarget(0);\r\n        d.fx = event.x;\r\n        d.fy = event.y;\r\n        d.position = { x: d.fx, y: d.fy };\r\n\r\n        try {\r\n          if (d._id) {\r\n            await api.updateNodePosition(d._id, d.position);\r\n          }\r\n        } catch (err) {\r\n          console.error('Failed to save node position:', err);\r\n        }\r\n      }\r\n    }\r\n\r\n    return d3.drag()\r\n      .on('start', dragstarted)\r\n      .on('drag', dragged)\r\n      .on('end', dragended);\r\n  }\r\n\r\n  const handleNodeClick = (event, d) => {\r\n    event.stopPropagation();\r\n    setSelectedEdge(null);\r\n\r\n    if (interactionMode === 'connect') {\r\n      // Handle connection mode logic\r\n      return;\r\n    }\r\n\r\n    if (clickTimeout.current) {\r\n      // Double click detected\r\n      clearTimeout(clickTimeout.current);\r\n      clickTimeout.current = null;\r\n      if (onNodeDoubleClick) {\r\n        onNodeDoubleClick(d);\r\n      }\r\n    } else {\r\n      // First click - wait for potential second click\r\n      clickTimeout.current = setTimeout(() => {\r\n        clickTimeout.current = null;\r\n        if (onNodeClick) {\r\n          onNodeClick(d);\r\n        }\r\n      }, 250); // 250ms delay to detect double click\r\n    }\r\n  };\r\n\r\n  // Handle edge deletion\r\n  const handleDeleteEdge = () => {\r\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\r\n      onDeleteEdge(selectedEdge._id);\r\n      setSelectedEdge(null);\r\n    }\r\n  };\r\n\r\n  function handleMouseMoveLinking(event) {\r\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode) return;\r\n    const [x, y] = d3.pointer(event, svgRef.current);\r\n    linkingState.current.tempLink\r\n      .attr('x2', x)\r\n      .attr('y2', y)\r\n      .attr('stroke', '#B87333') // Copper for temporary linking line\r\n      .attr('stroke-dasharray', '5,5');\r\n  }\r\n\r\n  return (\r\n    <div className=\"graph-wrapper\" onClick={(e) => {\r\n      if (e.target === e.currentTarget) {\r\n        if (onBackgroundClick) {\r\n          onBackgroundClick();\r\n        }\r\n      }\r\n    }}>\r\n      {nodes && nodes.length > 0 ? (\r\n        <svg ref={svgRef} className=\"graph-svg\" />\r\n      ) : (\r\n        <div className=\"graph-svg empty-graph-placeholder\">\r\n          <div className=\"empty-graph-message\">\r\n            <p>This canvas is empty. Start by creating a new node!</p>\r\n            {/* The main \"Create New Node\" button is in graph-controls below */}\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className=\"graph-controls\">\r\n        {selectedEdge && (\r\n          <button\r\n            onClick={handleDeleteEdge}\r\n            className=\"button danger\"\r\n          >\r\n            <TrashIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            Remove Edge\r\n          </button>\r\n        )}\r\n        <div className=\"button-row\">\r\n          <button onClick={onCreateNew} className=\"button primary\">\r\n            <PlusIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            Create New Node\r\n          </button>\r\n          <button\r\n            onClick={() => setInteractionMode(prevMode => prevMode === 'connect' ? 'select' : 'connect')}\r\n            className={`button secondary ${interactionMode === 'connect' ? 'active' : ''}`}\r\n          >\r\n            <LinkIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            {interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}