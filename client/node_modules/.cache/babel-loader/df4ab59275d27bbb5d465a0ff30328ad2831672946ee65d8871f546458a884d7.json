{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Mind Mosaic\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Graph from './components/graph.js';\nimport NodeEditor from './components/NodeEditor.js';\nimport NodeViewer from './components/NodeViewer.js';\nimport FileList from './components/FileList.js';\nimport FileEditor from './components/FileEditor.js';\nimport api from './services/api.js';\nimport './App.css';\nimport PencilIcon from './components/icons/PencilIcon.js';\nimport BackArrowIcon from './components/icons/BackArrowIcon.js';\nimport logo from './assets/logo.png';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isCreating, setIsCreating] = useState(false);\n  const [interactionMode, setInteractionMode] = useState('select');\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [isEditingFile, setIsEditingFile] = useState(false);\n  const [newNodeInitialPositionArgs, setNewNodeInitialPositionArgs] = useState(null);\n\n  // Determine if any panel that affects graph layout is visible\n  const isAnyPanelVisible = selectedNode && isEditing || selectedNode && !isEditing && !isCreating || isEditingFile;\n  useEffect(() => {\n    if (selectedFile) {\n      loadFileData();\n    } else {\n      setNodes([]);\n      setEdges([]);\n    }\n  }, [selectedFile]);\n  const loadFileData = useCallback(async () => {\n    if (!selectedFile) return;\n    setNodes([]);\n    setEdges([]);\n    try {\n      const response = await api.getFile(selectedFile._id);\n      if (!response.data.nodes) {\n        setNodes([]);\n        setEdges([]);\n        return;\n      }\n      const nodesWithPositions = response.data.nodes.map(node => {\n        if (!node.position || node.position.x === null && node.position.y === null) {\n          return {\n            ...node,\n            position: {\n              x: Math.random() * 600 + 100,\n              y: Math.random() * 400 + 100\n            }\n          };\n        }\n        return node;\n      });\n      setNodes(nodesWithPositions);\n      const edgesResponse = await api.getEdges();\n      const relevantEdges = edgesResponse.data.filter(edge => response.data.nodes.some(node => node._id === edge.source) && response.data.nodes.some(node => node._id === edge.target));\n      setEdges(relevantEdges);\n    } catch (err) {\n      console.error('Error loading file data:', err);\n    }\n  }, [selectedFile === null || selectedFile === void 0 ? void 0 : selectedFile._id]);\n  const handleFileSelect = useCallback(file => {\n    setSelectedFile(file);\n  }, []);\n  const handleNodeClick = useCallback(node => {\n    console.log(\"[App.js handleNodeClick] Clicked node:\", node === null || node === void 0 ? void 0 : node._id, \"Current interactionMode:\", interactionMode);\n    if (interactionMode !== 'connect') {\n      setSelectedNode(node);\n      setIsEditing(false);\n      setIsCreating(false);\n    } else {\n      // In connect mode, we rely on the drag behavior to handle connections\n      console.log(\"Ignoring click in connect mode - connection handled by drag\");\n    }\n  }, [interactionMode]);\n  const handleNodeDoubleClick = useCallback(node => {\n    if (interactionMode !== 'connect') {\n      setSelectedNode(node);\n      setIsEditing(true);\n      setIsCreating(false);\n    }\n  }, [interactionMode]);\n  const handleCreateNode = useCallback(async graphDimensions => {\n    if (graphDimensions) {\n      setNewNodeInitialPositionArgs(graphDimensions);\n    }\n    setSelectedNode(null);\n    setIsCreating(true);\n    setIsEditing(true);\n  }, []);\n  const handleSave = async nodeData => {\n    try {\n      if (!nodeData._id) {\n        let initialX = 300,\n          initialY = 300;\n        const minDistance = 100;\n        const padding = 50;\n        if (newNodeInitialPositionArgs && newNodeInitialPositionArgs.graphWidth && newNodeInitialPositionArgs.graphHeight) {\n          const {\n            graphWidth,\n            graphHeight\n          } = newNodeInitialPositionArgs;\n          let targetX = graphWidth * 0.70;\n          let targetY = graphHeight * 0.40;\n          let positionFound = false;\n          for (let attempt = 0; attempt < 30; attempt++) {\n            let currentX = targetX;\n            let currentY = targetY;\n            if (attempt > 0) {\n              const angle = Math.random() * 2 * Math.PI;\n              const radius = 25 * Math.ceil(attempt / 8);\n              currentX = targetX + radius * Math.cos(angle);\n              currentY = targetY + radius * Math.sin(angle);\n            }\n            currentX = Math.max(padding, Math.min(graphWidth - padding, currentX));\n            currentY = Math.max(padding, Math.min(graphHeight - padding, currentY));\n            let collision = false;\n            for (const node of nodes) {\n              if (node.position) {\n                const dist = Math.sqrt(Math.pow(node.position.x - currentX, 2) + Math.pow(node.position.y - currentY, 2));\n                if (dist < minDistance) {\n                  collision = true;\n                  break;\n                }\n              }\n            }\n            if (!collision) {\n              initialX = currentX;\n              initialY = currentY;\n              positionFound = true;\n              break;\n            }\n          }\n          if (!positionFound) {\n            console.warn(\"Could not find an empty spot for new node, using last attempted or default.\");\n            initialX = Math.max(padding, Math.min(graphWidth - padding, targetX));\n            initialY = Math.max(padding, Math.min(graphHeight - padding, targetY));\n          }\n          setNewNodeInitialPositionArgs(null);\n        } else {\n          console.warn(\"Graph dimensions not available for new node positioning, using defaults.\");\n        }\n        nodeData.position = {\n          x: initialX,\n          y: initialY\n        };\n      }\n      const isNewNodeCreation = !nodeData._id;\n      const response = isNewNodeCreation ? await api.createNode(nodeData) : await api.updateNode(nodeData._id, nodeData);\n      if (isNewNodeCreation && response.data && response.data._id) {\n        const newNodeFromServer = response.data;\n\n        // Ensure the position we calculated is on the node object\n        newNodeFromServer.position = nodeData.position; // Calculated position is in nodeData.position\n        // **Also explicitly set x and y for D3's initial understanding**\n        // newNodeFromServer.x = nodeData.position.x;\n        // newNodeFromServer.y = nodeData.position.y;\n\n        // The console.warn for server position mismatch can be removed or adjusted\n        // if we now prioritize the calculated position by setting x, y directly.\n        // console.warn(\"Server response for new node didn't match calculated position. Using calculated one for initial render.\");\n\n        // setNodes(prevNodes => [...prevNodes, newNodeFromServer]);\n\n        if (selectedFile) {\n          await api.addNodeToFile(selectedFile._id, newNodeFromServer._id);\n        }\n      } else if (!isNewNodeCreation) {\n        // For existing node updates, we might want to update just that node in local state\n        // for faster feedback, but loadFileData() will refresh anyway.\n      }\n      await loadFileData();\n    } catch (err) {\n      console.error('Save failed:', err);\n    } finally {\n      setSelectedNode(null);\n      setIsCreating(false);\n      setIsEditing(false);\n    }\n  };\n  const handleDelete = async id => {\n    try {\n      if (selectedFile) {\n        await api.removeNodeFromFile(selectedFile._id, id);\n      }\n      await api.deleteNode(id);\n      await loadFileData();\n\n      // If the deleted node was the selected one, clear selectedNode\n      if (selectedNode && selectedNode._id === id) {\n        setSelectedNode(null);\n        setIsEditing(false); // Also reset editing mode\n        // isCreating should already be false if we are deleting an existing node\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(`Deletion failed: ${((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message}`);\n    }\n  };\n  const handleCreateEdge = useCallback(async (sourceId, targetId) => {\n    try {\n      const existingEdge = edges.find(edge => edge.source === sourceId && edge.target === targetId || edge.source === targetId && edge.target === sourceId);\n      if (existingEdge) {\n        console.log('Edge already exists between these nodes');\n        return;\n      }\n      const newEdgeResponse = await api.createEdge({\n        source: sourceId,\n        target: targetId\n      });\n      await loadFileData();\n      if (newEdgeResponse.data) {\n        setEdges(prevEdges => [...prevEdges, newEdgeResponse.data]);\n      }\n      // setInteractionMode('select');\n      console.log('Edge should be created:', sourceId, targetId);\n    } catch (err) {\n      console.error('Edge creation error:', err);\n    }\n  }, [edges, loadFileData]);\n  const handleDeleteEdge = useCallback(async edgeId => {\n    try {\n      await api.deleteEdge(edgeId);\n      await loadFileData();\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      console.error(`Edge deletion failed: ${((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || err.message}`);\n    }\n  }, [loadFileData]);\n\n  // const handleEdgeAnimationEnd = (edgeId) => {\n  //   setAnimatedEdgeId(null);\n  //   console.log(\"Edge animation ended for:\", edgeId);\n  // };\n\n  // const handleNodeAppearAnimationEnd = (nodeId) => {\n  //   setAppearingNodeId(null);\n  //   console.log(\"Node appearance animation ended for:\", nodeId);\n  // };\n\n  const handleCancel = () => {\n    setIsEditing(false);\n    if (isCreating) {\n      setSelectedNode(null);\n      setIsCreating(false);\n    }\n  };\n  const handleStartEdit = () => setIsEditing(true);\n  const handleBackgroundClick = useCallback(() => {\n    setSelectedNode(null);\n    setIsCreating(false);\n    setIsEditing(false);\n  }, []);\n  const handleEditFile = () => setIsEditingFile(true);\n  const handleFileEditSave = async updatedFile => {\n    try {\n      const response = await api.updateFile(updatedFile._id, {\n        name: updatedFile.name,\n        description: updatedFile.description\n      });\n      if (response.status === 200) {\n        setSelectedFile(response.data);\n        setIsEditingFile(false);\n      } else {\n        alert('Failed to update file. Please try again.');\n      }\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      alert('Failed to update file: ' + (((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || err.message));\n    }\n  };\n  const handleFileEditCancel = () => setIsEditingFile(false);\n  const handleFileDelete = async fileId => {\n    try {\n      const response = await api.deleteFile(fileId);\n      if (response.status === 200 || response.status === 204) {\n        setSelectedFile(null);\n        setIsEditingFile(false);\n      } else {\n        alert('Failed to delete file. Please try again.');\n      }\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      alert('Failed to delete file: ' + (((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || err.message));\n    }\n  };\n  const isEditorVisible = selectedNode && isEditing || isCreating;\n  const isViewerVisible = selectedNode && !isEditing && !isCreating;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app-container ${selectedFile ? 'graph-view-active' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project-title-header\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"Mind Mosaic Logo\",\n        className: \"project-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), !selectedFile ? /*#__PURE__*/_jsxDEV(FileList, {\n      onFileSelect: handleFileSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedFile(null),\n          className: \"back-btn\",\n          children: [/*#__PURE__*/_jsxDEV(BackArrowIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 15\n          }, this), \"Back to Files\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: selectedFile.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleEditFile,\n          className: \"edit-file-btn\",\n          children: [/*#__PURE__*/_jsxDEV(PencilIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 15\n          }, this), \"Edit File\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: isEditingFile ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-editor-container\",\n          children: /*#__PURE__*/_jsxDEV(FileEditor, {\n            file: selectedFile,\n            onSave: handleFileEditSave,\n            onCancel: handleFileEditCancel,\n            onDelete: handleFileDelete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"graph-container\",\n            children: /*#__PURE__*/_jsxDEV(Graph, {\n              nodes: nodes,\n              edges: edges,\n              onNodeClick: handleNodeClick,\n              onNodeDoubleClick: handleNodeDoubleClick,\n              onCreateNew: handleCreateNode,\n              onCreateEdge: handleCreateEdge,\n              onDeleteEdge: handleDeleteEdge,\n              interactionMode: interactionMode,\n              setInteractionMode: setInteractionMode,\n              onBackgroundClick: handleBackgroundClick,\n              isAnyPanelVisible: isAnyPanelVisible\n              // newlyCreatedEdgeId={animatedEdgeId}\n              // onEdgeAnimationComplete={handleEdgeAnimationEnd}\n              // appearingNodeId={appearingNodeId}\n              // onNodeAppearAnimationComplete={handleNodeAppearAnimationEnd}\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `editor-container ${isEditorVisible || isViewerVisible ? 'visible' : ''}`,\n            children: isEditorVisible ? /*#__PURE__*/_jsxDEV(NodeEditor, {\n              node: selectedNode || {\n                title: '',\n                content: '',\n                tags: []\n              },\n              onSave: handleSave,\n              onDelete: selectedNode ? () => handleDelete(selectedNode._id) : null,\n              onCancel: handleCancel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 21\n            }, this) : isViewerVisible ? /*#__PURE__*/_jsxDEV(NodeViewer, {\n              node: selectedNode,\n              onEdit: handleStartEdit\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 21\n            }, this) : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xvfuZJ222bBvSDVnO0jNv3d8X4A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Graph","NodeEditor","NodeViewer","FileList","FileEditor","api","PencilIcon","BackArrowIcon","logo","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","nodes","setNodes","edges","setEdges","selectedNode","setSelectedNode","isCreating","setIsCreating","interactionMode","setInteractionMode","selectedFile","setSelectedFile","isEditing","setIsEditing","isEditingFile","setIsEditingFile","newNodeInitialPositionArgs","setNewNodeInitialPositionArgs","isAnyPanelVisible","loadFileData","response","getFile","_id","data","nodesWithPositions","map","node","position","x","y","Math","random","edgesResponse","getEdges","relevantEdges","filter","edge","some","source","target","err","console","error","handleFileSelect","file","handleNodeClick","log","handleNodeDoubleClick","handleCreateNode","graphDimensions","handleSave","nodeData","initialX","initialY","minDistance","padding","graphWidth","graphHeight","targetX","targetY","positionFound","attempt","currentX","currentY","angle","PI","radius","ceil","cos","sin","max","min","collision","dist","sqrt","pow","warn","isNewNodeCreation","createNode","updateNode","newNodeFromServer","addNodeToFile","handleDelete","id","removeNodeFromFile","deleteNode","_err$response","_err$response$data","message","handleCreateEdge","sourceId","targetId","existingEdge","find","newEdgeResponse","createEdge","prevEdges","handleDeleteEdge","edgeId","deleteEdge","_err$response2","_err$response2$data","handleCancel","handleStartEdit","handleBackgroundClick","handleEditFile","handleFileEditSave","updatedFile","updateFile","name","description","status","alert","_err$response3","_err$response3$data","handleFileEditCancel","handleFileDelete","fileId","deleteFile","_err$response4","_err$response4$data","isEditorVisible","isViewerVisible","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onFileSelect","onClick","style","width","height","marginRight","onSave","onCancel","onDelete","onNodeClick","onNodeDoubleClick","onCreateNew","onCreateEdge","onDeleteEdge","onBackgroundClick","title","content","tags","onEdit","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Mind Mosaic/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport Graph from './components/graph.js';\r\nimport NodeEditor from './components/NodeEditor.js';\r\nimport NodeViewer from './components/NodeViewer.js';\r\nimport FileList from './components/FileList.js';\r\nimport FileEditor from './components/FileEditor.js';\r\nimport api from './services/api.js';\r\nimport './App.css';\r\nimport PencilIcon from './components/icons/PencilIcon.js';\r\nimport BackArrowIcon from './components/icons/BackArrowIcon.js';\r\nimport logo from './assets/logo.png';\r\n\r\nfunction App() {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const [isCreating, setIsCreating] = useState(false);\r\n  const [interactionMode, setInteractionMode] = useState('select');\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [isEditingFile, setIsEditingFile] = useState(false);\r\n  const [newNodeInitialPositionArgs, setNewNodeInitialPositionArgs] = useState(null);\r\n\r\n  // Determine if any panel that affects graph layout is visible\r\n  const isAnyPanelVisible = (selectedNode && isEditing) || (selectedNode && !isEditing && !isCreating) || isEditingFile;\r\n\r\n  useEffect(() => {\r\n    if (selectedFile) {\r\n      loadFileData();\r\n    } else {\r\n      setNodes([]);\r\n      setEdges([]);\r\n    }\r\n  }, [selectedFile]);\r\n\r\n  const loadFileData = useCallback(async () => {\r\n    if (!selectedFile) return;\r\n    setNodes([]);\r\n    setEdges([]);\r\n    try {\r\n      const response = await api.getFile(selectedFile._id);\r\n      if (!response.data.nodes) {\r\n        setNodes([]);\r\n        setEdges([]);\r\n        return;\r\n      }\r\n      const nodesWithPositions = response.data.nodes.map(node => {\r\n        if (!node.position || (node.position.x === null && node.position.y === null)) {\r\n          return {\r\n            ...node,\r\n            position: {\r\n              x: Math.random() * 600 + 100,\r\n              y: Math.random() * 400 + 100\r\n            }\r\n          };\r\n        }\r\n        return node;\r\n      });\r\n      setNodes(nodesWithPositions);\r\n      const edgesResponse = await api.getEdges();\r\n      const relevantEdges = edgesResponse.data.filter(edge =>\r\n        response.data.nodes.some(node => node._id === edge.source) &&\r\n        response.data.nodes.some(node => node._id === edge.target)\r\n      );\r\n      setEdges(relevantEdges);\r\n    } catch (err) {\r\n      console.error('Error loading file data:', err);\r\n    }\r\n  }, [selectedFile?._id]);\r\n\r\n  const handleFileSelect = useCallback((file) => {\r\n    setSelectedFile(file);\r\n  }, []);\r\n\r\n  const handleNodeClick = useCallback((node) => {\r\n    console.log(\"[App.js handleNodeClick] Clicked node:\", node?._id, \"Current interactionMode:\", interactionMode);\r\n    if (interactionMode !== 'connect') {\r\n      setSelectedNode(node);\r\n      setIsEditing(false);\r\n      setIsCreating(false);\r\n    }\r\n    else {\r\n    // In connect mode, we rely on the drag behavior to handle connections\r\n    console.log(\"Ignoring click in connect mode - connection handled by drag\");\r\n  }\r\n  }, [interactionMode]);\r\n\r\n  const handleNodeDoubleClick = useCallback((node) => {\r\n    if (interactionMode !== 'connect') {\r\n      setSelectedNode(node);\r\n      setIsEditing(true);\r\n      setIsCreating(false);\r\n    }\r\n  }, [interactionMode]);\r\n\r\n  const handleCreateNode = useCallback(async (graphDimensions) => {\r\n    if (graphDimensions) {\r\n      setNewNodeInitialPositionArgs(graphDimensions);\r\n    }\r\n    setSelectedNode(null);\r\n    setIsCreating(true);\r\n    setIsEditing(true);\r\n  }, []);\r\n\r\n  const handleSave = async (nodeData) => {\r\n    try {\r\n      if (!nodeData._id) {\r\n        let initialX = 300, initialY = 300;\r\n        const minDistance = 100;\r\n        const padding = 50;\r\n\r\n        if (newNodeInitialPositionArgs && newNodeInitialPositionArgs.graphWidth && newNodeInitialPositionArgs.graphHeight) {\r\n          const { graphWidth, graphHeight } = newNodeInitialPositionArgs;\r\n          let targetX = graphWidth * 0.70;\r\n          let targetY = graphHeight * 0.40;\r\n\r\n          let positionFound = false;\r\n          for (let attempt = 0; attempt < 30; attempt++) {\r\n            let currentX = targetX;\r\n            let currentY = targetY;\r\n\r\n            if (attempt > 0) {\r\n              const angle = Math.random() * 2 * Math.PI;\r\n              const radius = 25 * Math.ceil(attempt / 8);\r\n              currentX = targetX + radius * Math.cos(angle);\r\n              currentY = targetY + radius * Math.sin(angle);\r\n            }\r\n\r\n            currentX = Math.max(padding, Math.min(graphWidth - padding, currentX));\r\n            currentY = Math.max(padding, Math.min(graphHeight - padding, currentY));\r\n\r\n            let collision = false;\r\n            for (const node of nodes) {\r\n              if (node.position) {\r\n                const dist = Math.sqrt(Math.pow(node.position.x - currentX, 2) + Math.pow(node.position.y - currentY, 2));\r\n                if (dist < minDistance) {\r\n                  collision = true;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (!collision) {\r\n              initialX = currentX;\r\n              initialY = currentY;\r\n              positionFound = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!positionFound) {\r\n            console.warn(\"Could not find an empty spot for new node, using last attempted or default.\");\r\n            initialX = Math.max(padding, Math.min(graphWidth - padding, targetX));\r\n            initialY = Math.max(padding, Math.min(graphHeight - padding, targetY));\r\n          }\r\n          setNewNodeInitialPositionArgs(null);\r\n        } else {\r\n          console.warn(\"Graph dimensions not available for new node positioning, using defaults.\");\r\n        }\r\n        nodeData.position = { x: initialX, y: initialY };\r\n      }\r\n      \r\n      const isNewNodeCreation = !nodeData._id;\r\n\r\n      const response = isNewNodeCreation ? await api.createNode(nodeData) : await api.updateNode(nodeData._id, nodeData);\r\n      \r\n      if (isNewNodeCreation && response.data && response.data._id) { \r\n        const newNodeFromServer = response.data;\r\n        \r\n        // Ensure the position we calculated is on the node object\r\n        newNodeFromServer.position = nodeData.position; // Calculated position is in nodeData.position\r\n        // **Also explicitly set x and y for D3's initial understanding**\r\n        // newNodeFromServer.x = nodeData.position.x;\r\n        // newNodeFromServer.y = nodeData.position.y;\r\n\r\n        // The console.warn for server position mismatch can be removed or adjusted\r\n        // if we now prioritize the calculated position by setting x, y directly.\r\n        // console.warn(\"Server response for new node didn't match calculated position. Using calculated one for initial render.\");\r\n        \r\n        // setNodes(prevNodes => [...prevNodes, newNodeFromServer]);\r\n        \r\n        if (selectedFile) {\r\n          await api.addNodeToFile(selectedFile._id, newNodeFromServer._id);\r\n        }\r\n      } else if (!isNewNodeCreation) {\r\n        // For existing node updates, we might want to update just that node in local state\r\n        // for faster feedback, but loadFileData() will refresh anyway.\r\n      }\r\n      await loadFileData();\r\n    } catch (err) {\r\n      console.error('Save failed:', err);\r\n    } finally {\r\n      setSelectedNode(null);\r\n      setIsCreating(false);\r\n      setIsEditing(false);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    try {\r\n      if (selectedFile) {\r\n        await api.removeNodeFromFile(selectedFile._id, id);\r\n      }\r\n      await api.deleteNode(id);\r\n      await loadFileData();\r\n\r\n      // If the deleted node was the selected one, clear selectedNode\r\n      if (selectedNode && selectedNode._id === id) {\r\n        setSelectedNode(null);\r\n        setIsEditing(false); // Also reset editing mode\r\n        // isCreating should already be false if we are deleting an existing node\r\n      }\r\n\r\n    } catch (err) {\r\n      console.error(`Deletion failed: ${err.response?.data?.message || err.message}`);\r\n    }\r\n  };\r\n\r\n  const handleCreateEdge = useCallback(async (sourceId, targetId) => {\r\n    try {\r\n      const existingEdge = edges.find(edge => (edge.source === sourceId && edge.target === targetId) || (edge.source === targetId && edge.target === sourceId));\r\n      if (existingEdge) {\r\n      console.log('Edge already exists between these nodes');\r\n      return;\r\n    }\r\n      const newEdgeResponse = await api.createEdge({ source: sourceId, target: targetId });\r\n      await loadFileData();\r\n      if (newEdgeResponse.data) {\r\n      setEdges(prevEdges => [...prevEdges, newEdgeResponse.data]);\r\n    }\r\n      // setInteractionMode('select');\r\n      console.log('Edge should be created:', sourceId, targetId)\r\n    } catch (err) {\r\n      console.error('Edge creation error:', err);\r\n    }\r\n  }, [edges, loadFileData]);\r\n\r\n  const handleDeleteEdge = useCallback(async (edgeId) => {\r\n    try {\r\n      await api.deleteEdge(edgeId);\r\n      await loadFileData();\r\n    } catch (err) {\r\n      console.error(`Edge deletion failed: ${err.response?.data?.message || err.message}`);\r\n    }\r\n  }, [loadFileData]);\r\n\r\n  // const handleEdgeAnimationEnd = (edgeId) => {\r\n  //   setAnimatedEdgeId(null);\r\n  //   console.log(\"Edge animation ended for:\", edgeId);\r\n  // };\r\n\r\n  // const handleNodeAppearAnimationEnd = (nodeId) => {\r\n  //   setAppearingNodeId(null);\r\n  //   console.log(\"Node appearance animation ended for:\", nodeId);\r\n  // };\r\n\r\n  const handleCancel = () => {\r\n    setIsEditing(false);\r\n    if (isCreating) {\r\n      setSelectedNode(null);\r\n      setIsCreating(false);\r\n    }\r\n  };\r\n\r\n  const handleStartEdit = () => setIsEditing(true);\r\n  const handleBackgroundClick = useCallback(() => {\r\n    setSelectedNode(null);\r\n    setIsCreating(false);\r\n    setIsEditing(false);\r\n  }, []);\r\n  const handleEditFile = () => setIsEditingFile(true);\r\n  const handleFileEditSave = async (updatedFile) => {\r\n    try {\r\n      const response = await api.updateFile(updatedFile._id, { name: updatedFile.name, description: updatedFile.description });\r\n      if (response.status === 200) {\r\n        setSelectedFile(response.data);\r\n        setIsEditingFile(false);\r\n      } else {\r\n        alert('Failed to update file. Please try again.');\r\n      }\r\n    } catch (err) {\r\n      alert('Failed to update file: ' + (err.response?.data?.message || err.message));\r\n    }\r\n  };\r\n  const handleFileEditCancel = () => setIsEditingFile(false);\r\n  const handleFileDelete = async (fileId) => {\r\n    try {\r\n      const response = await api.deleteFile(fileId);\r\n      if (response.status === 200 || response.status === 204) {\r\n        setSelectedFile(null);\r\n        setIsEditingFile(false);\r\n      } else {\r\n        alert('Failed to delete file. Please try again.');\r\n      }\r\n    } catch (err) {\r\n      alert('Failed to delete file: ' + (err.response?.data?.message || err.message));\r\n    }\r\n  };\r\n\r\n  const isEditorVisible = (selectedNode && isEditing) || isCreating;\r\n  const isViewerVisible = selectedNode && !isEditing && !isCreating;\r\n\r\n  return (\r\n    <div className={`app-container ${selectedFile ? 'graph-view-active' : ''}`}>\r\n      <div className=\"project-title-header\">\r\n        <img src={logo} alt=\"Mind Mosaic Logo\" className=\"project-logo\" />\r\n      </div>\r\n\r\n      {!selectedFile ? (\r\n        <FileList onFileSelect={handleFileSelect} />\r\n      ) : (\r\n        <>\r\n          <div className=\"header\">\r\n            <button onClick={() => setSelectedFile(null)} className=\"back-btn\">\r\n              <BackArrowIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n              Back to Files\r\n            </button>\r\n            <h2>{selectedFile.name}</h2>\r\n            <button onClick={handleEditFile} className=\"edit-file-btn\">\r\n              <PencilIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n              Edit File\r\n            </button>\r\n          </div>\r\n          <div className=\"main-content\">\r\n            {isEditingFile ? (\r\n              <div className=\"file-editor-container\">\r\n                <FileEditor\r\n                  file={selectedFile}\r\n                  onSave={handleFileEditSave}\r\n                  onCancel={handleFileEditCancel}\r\n                  onDelete={handleFileDelete}\r\n                />\r\n              </div>\r\n            ) : (\r\n              <>\r\n                <div className=\"graph-container\">\r\n                  <Graph\r\n                    nodes={nodes}\r\n                    edges={edges}\r\n                    onNodeClick={handleNodeClick}\r\n                    onNodeDoubleClick={handleNodeDoubleClick}\r\n                    onCreateNew={handleCreateNode}\r\n                    onCreateEdge={handleCreateEdge}\r\n                    onDeleteEdge={handleDeleteEdge}\r\n                    interactionMode={interactionMode}\r\n                    setInteractionMode={setInteractionMode}\r\n                    onBackgroundClick={handleBackgroundClick}\r\n                    isAnyPanelVisible={isAnyPanelVisible}\r\n                    // newlyCreatedEdgeId={animatedEdgeId}\r\n                    // onEdgeAnimationComplete={handleEdgeAnimationEnd}\r\n                    // appearingNodeId={appearingNodeId}\r\n                    // onNodeAppearAnimationComplete={handleNodeAppearAnimationEnd}\r\n                  />\r\n                </div>\r\n                <div className={`editor-container ${isEditorVisible || isViewerVisible ? 'visible' : ''}`}>\r\n                  {isEditorVisible ? (\r\n                    <NodeEditor\r\n                      node={selectedNode || { title: '', content: '', tags: [] }}\r\n                      onSave={handleSave}\r\n                      onDelete={selectedNode ? () => handleDelete(selectedNode._id) : null}\r\n                      onCancel={handleCancel}\r\n                    />\r\n                  ) : isViewerVisible ? (\r\n                    <NodeViewer\r\n                      node={selectedNode}\r\n                      onEdit={handleStartEdit}\r\n                    />\r\n                  ) : null}\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}