{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Mind Mosaic\\\\client\\\\src\\\\components\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport api from '../services/api.js';\nimport PlusIcon from './icons/PlusIcon';\nimport LinkIcon from './icons/LinkIcon';\nimport TrashIcon from './icons/TrashIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  nodes = [],\n  edges = [],\n  onNodeClick,\n  onNodeDoubleClick,\n  onCreateNew,\n  onCreateEdge,\n  onDeleteEdge,\n  interactionMode = 'select',\n  setInteractionMode,\n  onBackgroundClick,\n  isAnyPanelVisible,\n  newlyCreatedEdgeId,\n  onEdgeAnimationComplete,\n  appearingNodeId,\n  onNodeAppearAnimationComplete\n}) => {\n  _s();\n  const svgRef = useRef();\n  const linkingState = useRef({\n    sourceNode: null,\n    tempLink: null,\n    isLinking: false\n  });\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const clickTimeout = useRef(null);\n  console.log('Graph received:', {\n    nodeCount: nodes.length,\n    edgeCount: edges.length,\n    mode: interactionMode\n  });\n\n  // Debug: Log the actual nodes and edges data\n  console.log('Nodes data:', JSON.stringify(nodes, null, 2));\n  console.log('Edges data:', JSON.stringify(edges, null, 2));\n  const handleMouseMoveLinking = useCallback(event => {\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\n      return;\n    }\n    if (!svgRef.current) return;\n    const [x, y] = d3.pointer(event, svgRef.current);\n    const tempLinkNode = linkingState.current.tempLink.node();\n    if (!tempLinkNode) return;\n    const tagName = tempLinkNode.tagName.toLowerCase();\n    if (tagName === 'line') {\n      linkingState.current.tempLink.attr('x2', x).attr('y2', y);\n    } else if (tagName === 'path') {\n      linkingState.current.tempLink.attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\n    }\n  }, [svgRef, linkingState]);\n  const handleMouseUpLinking = useCallback(event => {\n    console.log('SVG mouseup.linking triggered. Target:', event.target, 'isLinking:', linkingState.current.isLinking);\n    if (linkingState.current.isLinking) {\n      if (!svgRef.current) return;\n      const clickedDomElement = event.target;\n      const closestNodeGroup = clickedDomElement.closest('.node');\n      const isNode = !!closestNodeGroup;\n      console.log('SVG mouseup.linking: Is target related to a node?', isNode, 'Clicked DOM Element:', clickedDomElement, 'Closest Node Group:', closestNodeGroup);\n      if (!isNode) {\n        var _linkingState$current;\n        console.log('SVG mouseup.linking: Target is NOT a node. Cancelling link.');\n        (_linkingState$current = linkingState.current.tempLink) === null || _linkingState$current === void 0 ? void 0 : _linkingState$current.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        setInteractionMode('select');\n      } else {\n        console.log('SVG mouseup.linking: Target IS a node. Deferring to node\\'s click handler for completion.');\n        // If the mouseup is on a node, the `handleNodeClick` for that target node will handle the link completion (if applicable based on drag state).\n        // Or, if it was a drag operation ending on a node, that node's click event (which might be this one)\n        // needs to correctly interpret the state. The dragended + this mouseup should correctly lead to link creation if conditions are met.\n      }\n    }\n  }, [svgRef, linkingState, setInteractionMode, onCreateEdge]); // onCreateEdge might be relevant if we decide to complete link here\n\n  useEffect(() => {\n    const svgInstance = d3.select(svgRef.current);\n    if (interactionMode === 'connect') {\n      const onMouseMoveLinking = handleMouseMoveLinking;\n      const onMouseUpLinking = handleMouseUpLinking;\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\n      console.log('Global linking listeners ADDED to SVG for connect mode.');\n      return () => {\n        svgInstance.on('mousemove.linking', null);\n        svgInstance.on('mouseup.linking', null);\n        console.log('Global linking listeners REMOVED from SVG.');\n      };\n    } else {\n      svgInstance.on('mousemove.linking', null);\n      svgInstance.on('mouseup.linking', null);\n      if (linkingState.current.isLinking) {\n        var _linkingState$current2;\n        console.log('Exited connect mode with active link: Forcibly cleaning up.');\n        (_linkingState$current2 = linkingState.current.tempLink) === null || _linkingState$current2 === void 0 ? void 0 : _linkingState$current2.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return () => {};\n    }\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]);\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n    const currentSvg = svgRef.current;\n    if (!currentSvg) return;\n    let localContainerWidth = currentSvg.clientWidth;\n    let localContainerHeight = currentSvg.clientHeight;\n    if (localContainerWidth < 50) localContainerWidth = 50;\n    if (localContainerHeight < 50) localContainerHeight = 50;\n    const setupBackgroundClickHandler = () => {\n      svg.append('rect').attr('class', 'background').attr('width', '100%').attr('height', '100%').attr('fill', 'transparent').on('click', event => {\n        if (event.target.classList.contains('background')) {\n          d3.selectAll('.link').classed('selected', false);\n          setSelectedEdge(null);\n          if (onBackgroundClick) {\n            onBackgroundClick();\n          }\n        }\n      });\n    };\n    if (!nodes || nodes.length === 0) {\n      setupBackgroundClickHandler();\n      return;\n    }\n    const containerWidth = localContainerWidth;\n    const containerHeight = localContainerHeight;\n    svg.attr('viewBox', [0, 0, containerWidth, containerHeight]).attr('preserveAspectRatio', 'xMidYMid meet');\n    svg.append('rect').attr('class', 'background').attr('width', '100%').attr('height', '100%').attr('fill', 'transparent').on('click', event => {\n      if (event.target.classList.contains('background')) {\n        d3.selectAll('.link').classed('selected', false);\n        setSelectedEdge(null);\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    });\n    svg.append(\"defs\").selectAll(\"marker\").data([\"arrow\"]).enter().append(\"marker\").attr(\"id\", d => d).attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 20).attr(\"refY\", 0).attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#A8C3A4\");\n    nodes.forEach(node => {\n      if (!node.position || node.position.x === null && node.position.y === null) {\n        node.x = Math.random() * (containerWidth - 100) + 50;\n        node.y = Math.random() * (containerHeight - 100) + 50;\n        node.position = {\n          x: node.x,\n          y: node.y\n        };\n      } else {\n        node.x = node.position.x;\n        node.y = node.position.y;\n      }\n      node.fx = null;\n      node.fy = null;\n    });\n    const nodeMap = {};\n    nodes.forEach(node => {\n      nodeMap[node._id] = node;\n    });\n    const processedEdges = edges.map(edge => ({\n      id: edge._id,\n      source: nodeMap[edge.source] || edge.source,\n      target: nodeMap[edge.target] || edge.target,\n      type: edge.type,\n      _id: edge._id\n    }));\n    const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(processedEdges).id(d => d._id).distance(150)).alpha(0).alphaDecay(1).alphaTarget(0);\n    nodes.forEach(node => {\n      if (node.position) {\n        node.fx = node.position.x;\n        node.fy = node.position.y;\n      } else {\n        node.fx = Math.random() * (containerWidth - 100) + 50;\n        node.fy = Math.random() * (containerHeight - 100) + 50;\n        node.position = {\n          x: node.fx,\n          y: node.fy\n        };\n      }\n    });\n    const linkElements = svg.append('g').attr('class', 'links').selectAll('path').data(processedEdges).enter().append('path').attr('class', 'link').attr('data-id', d => d.id).attr('stroke', '#A8C3A4').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)').on('click', handleEdgeClick);\n    const nodeElements = svg.append('g').attr('class', 'nodes').selectAll('g').data(nodes).enter().append('g').attr('class', 'node').attr('data-id', d => d._id).call(dragBehavior(simulation, svg, containerWidth, containerHeight));\n    nodeElements.append('circle').attr('r', 12).attr('fill', '#2E7D32').attr('stroke', '#1B5E20').attr('stroke-width', 1.5).on('click', handleNodeClick);\n    nodeElements.append('text').text(d => {\n      var _d$_id;\n      return d.title || ((_d$_id = d._id) === null || _d$_id === void 0 ? void 0 : _d$_id.substring(0, 6));\n    }).attr('x', 16).attr('y', 5).attr('fill', '#FAF3E0').attr('text-anchor', 'start').on('click', handleNodeClick);\n    function handleEdgeClick(event, d) {\n      event.stopPropagation();\n      if (interactionMode === 'select') {\n        d3.selectAll('.link').classed('selected', false);\n        d3.select(event.currentTarget).classed('selected', true);\n        setSelectedEdge(d);\n        if (onNodeClick) onNodeClick(null);\n      }\n    }\n    function ticked() {\n      linkElements.attr('d', d => {\n        const sourceX = Math.max(15, Math.min(containerWidth - 15, d.source.x));\n        const sourceY = Math.max(15, Math.min(containerHeight - 15, d.source.y));\n        const targetX = Math.max(15, Math.min(containerWidth - 15, d.target.x));\n        const targetY = Math.max(15, Math.min(containerHeight - 15, d.target.y));\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\n      });\n      nodeElements.attr('transform', d => {\n        const x = Math.max(15, Math.min(containerWidth - 15, d.x));\n        const y = Math.max(15, Math.min(containerHeight - 15, d.y));\n        return `translate(${x},${y})`;\n      });\n    }\n    simulation.on('tick', ticked);\n\n    // Handle animation for newly created edge\n    if (newlyCreatedEdgeId && svgRef.current) {\n      const linkToAnimate = d3.select(svgRef.current).select(`.link[data-id='${newlyCreatedEdgeId}']`);\n      if (!linkToAnimate.empty()) {\n        linkToAnimate.classed('newly-added-link', true);\n        console.log(\"Applied animation class to:\", newlyCreatedEdgeId);\n        setTimeout(() => {\n          linkToAnimate.classed('newly-added-link', false);\n          if (onEdgeAnimationComplete) {\n            onEdgeAnimationComplete(newlyCreatedEdgeId);\n            console.log(\"Removed animation class and called callback for:\", newlyCreatedEdgeId);\n          }\n        }, 1000); // Animation duration is 1s\n      }\n    }\n\n    // Handle animation for newly appearing node\n    if (appearingNodeId && svgRef.current) {\n      const nodeToAnimate = d3.select(svgRef.current).select(`.node[data-id='${appearingNodeId}']`);\n      if (!nodeToAnimate.empty()) {\n        // The transform-origin for scale is default center of the element,\n        // which should be fine for the <g> element of the node.\n        nodeToAnimate.classed('node-appearing', true).raise();\n        console.log(\"Applied node appearing animation class and raised node:\", appearingNodeId);\n        setTimeout(() => {\n          nodeToAnimate.classed('node-appearing', false);\n          if (onNodeAppearAnimationComplete) {\n            onNodeAppearAnimationComplete(appearingNodeId);\n            console.log(\"Removed node appearing animation class and called callback for:\", appearingNodeId);\n          }\n        }, 500); // Node animation duration is 0.5s\n      }\n    }\n    return () => {\n      simulation.stop();\n      if (linkingState.current.tempLink) {\n        linkingState.current.tempLink.remove();\n      }\n      linkingState.current = {\n        sourceNode: null,\n        tempLink: null,\n        isLinking: false\n      };\n      if (clickTimeout.current) {\n        clearTimeout(clickTimeout.current);\n      }\n    };\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, interactionMode, onBackgroundClick, isAnyPanelVisible, handleMouseMoveLinking, handleMouseUpLinking, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete]); // Added new node animation props\n\n  // Handle keyboard delete for selected edges\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n          onDeleteEdge(selectedEdge._id);\n          setSelectedEdge(null);\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedEdge, onDeleteEdge]);\n  function dragBehavior(simulation, svg, containerWidth, containerHeight) {\n    function dragstarted(event, d) {\n      if (interactionMode === 'connect') {\n        if (linkingState.current.tempLink) {\n          linkingState.current.tempLink.remove();\n          linkingState.current.tempLink = null;\n        }\n        linkingState.current.isLinking = true;\n        linkingState.current.sourceNode = d;\n        event.sourceEvent.stopPropagation();\n        if (svgRef.current) {\n          linkingState.current.tempLink = d3.select(svgRef.current).append('path').attr('class', 'temp-link link').attr('d', `M${d.x},${d.y}L${d.x},${d.y}`).attr('stroke-dasharray', '5,5').attr('stroke', '#B87333').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)');\n        }\n      } else {\n        event.sourceEvent.stopPropagation();\n        if (!event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\n        d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\n      }\n    }\n    function dragged(event, d) {\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\n        event.sourceEvent.stopPropagation();\n        if (!svgRef.current || !linkingState.current.tempLink) return;\n        const [targetX, targetY] = d3.pointer(event.sourceEvent, svgRef.current);\n        linkingState.current.tempLink.attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${targetX},${targetY}`);\n      } else {\n        event.sourceEvent.stopPropagation();\n        d.fx = Math.max(15, Math.min(containerWidth - 15, event.x));\n        d.fy = Math.max(15, Math.min(containerHeight - 15, event.y));\n        d.position = {\n          x: d.fx,\n          y: d.fy\n        };\n      }\n    }\n    async function dragended(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\n        var _linkingState$current3;\n        console.log(\"Drag ended in connect mode. Global mouseup should handle the rest.\");\n        // The actual link creation or cancellation is now primarily handled by handleMouseUpLinking (global SVG mouseup)\n        // when the mouse button is released. If it's released over a valid node target, \n        // that node's click event (handleNodeClick) can play a role if it's specifically designed to for drag completions.\n        // However, with click-linking disabled in handleNodeClick, the primary logic for link completion\n        // after a drag should reside in handleMouseUpLinking (if target is a node) or its cancellation part (if not on a node).\n\n        // Let's ensure we check the target of the mouseup that effectively ends the drag.\n        const [pointerX, pointerY] = d3.pointer(event.sourceEvent, svgRef.current); // Get pointer relative to SVG\n        const releaseTargetElement = document.elementFromPoint(event.sourceEvent.clientX, event.sourceEvent.clientY);\n        const closestNodeGroup = releaseTargetElement ? releaseTargetElement.closest('.node') : null;\n        if (closestNodeGroup) {\n          // The d3.select(closestNodeGroup).datum() would give the node data 'dd'\n          const targetNodeData = d3.select(closestNodeGroup).datum();\n          if (targetNodeData && linkingState.current.sourceNode && linkingState.current.sourceNode._id !== targetNodeData._id) {\n            console.log(\"Drag ended on a valid target node. Creating edge.\");\n            if (onCreateEdge) {\n              onCreateEdge(linkingState.current.sourceNode._id, targetNodeData._id);\n            }\n          } else {\n            console.log(\"Drag ended on source node or invalid target node data. Cancelling.\");\n          }\n        } else {\n          console.log(\"Drag ended NOT on a node. Cancelling link (delegated to handleMouseUpLinking).\");\n          // Cancellation is already handled by handleMouseUpLinking if mouseup is on non-node\n        }\n        // Clean up linking state AFTER decision\n        (_linkingState$current3 = linkingState.current.tempLink) === null || _linkingState$current3 === void 0 ? void 0 : _linkingState$current3.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        setInteractionMode('select');\n      } else if (interactionMode !== 'connect') {\n        if (api && typeof api.updateNode === 'function') {\n          api.updateNode(d._id, {\n            position: {\n              x: d.x,\n              y: d.y\n            }\n          }).catch(err => console.error(\"Failed to update node position:\", err));\n        }\n      }\n    }\n    return d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended);\n  }\n  const handleNodeClick = (event, d) => {\n    if (event.defaultPrevented) return; // Dragged\n\n    // Handle double-click first\n    if (clickTimeout.current) {\n      clearTimeout(clickTimeout.current);\n      clickTimeout.current = null;\n      if (onNodeDoubleClick) {\n        onNodeDoubleClick(d);\n      }\n      // If a link was being initiated by click (now disabled), cancel it on double click\n      if (linkingState.current.isLinking && linkingState.current.sourceNode) {\n        var _linkingState$current4;\n        (_linkingState$current4 = linkingState.current.tempLink) === null || _linkingState$current4 === void 0 ? void 0 : _linkingState$current4.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        // setInteractionMode('select'); // Potentially keep in connect mode if user wants to try another drag\n      }\n      return;\n    }\n\n    // Handle single-click\n    clickTimeout.current = setTimeout(() => {\n      clickTimeout.current = null;\n      if (interactionMode === 'connect') {\n        // Click-based linking is now disabled. All linking is done via drag.\n        /*\r\n        if (!linkingState.current.isLinking) {\r\n          // First click: initiate linking\r\n          console.log(\"handleNodeClick: First click in connect mode - initiating link from node:\", d._id);\r\n          linkingState.current.tempLink?.remove(); // Remove any old temp link\r\n            linkingState.current.sourceNode = d;\r\n          linkingState.current.isLinking = true;\r\n          const [pointerX, pointerY] = d3.pointer(event, svgRef.current);\r\n          if (svgRef.current) { // Ensure svgRef.current is available\r\n            linkingState.current.tempLink = d3.select(svgRef.current).append('line')\r\n              .attr('class', 'temp-link')\r\n              .attr('x1', d.x)\r\n              .attr('y1', d.y)\r\n              .attr('x2', pointerX) \r\n              .attr('y2', pointerY)\r\n              .attr('stroke-dasharray', '5,5')\r\n              .attr('stroke', '#B87333') // Copper for temp link\r\n              .attr('stroke-width', 2)\r\n              .attr('fill', 'none')\r\n              .attr('marker-end', 'url(#arrow)'); // Add arrow to temp line\r\n          }\r\n        } else if (linkingState.current.sourceNode && linkingState.current.sourceNode._id !== d._id) {\r\n          // Second click on a DIFFERENT node: complete the link\r\n          console.log(\"handleNodeClick: Second click in connect mode - completing link to node:\", d._id);\r\n          if (onCreateEdge) {\r\n            onCreateEdge(linkingState.current.sourceNode._id, d._id);\r\n          }\r\n          linkingState.current.tempLink?.remove();\r\n          linkingState.current.isLinking = false;\r\n          linkingState.current.sourceNode = null;\r\n          linkingState.current.tempLink = null;\r\n          setInteractionMode('select'); \r\n        } else if (linkingState.current.sourceNode && linkingState.current.sourceNode._id === d._id) {\r\n          // Clicked on the source node again: cancel linking\r\n          console.log(\"handleNodeClick: Clicked on source node again - cancelling link.\");\r\n          linkingState.current.tempLink?.remove();\r\n          linkingState.current.isLinking = false;\r\n          linkingState.current.sourceNode = null;\r\n          linkingState.current.tempLink = null;\r\n          setInteractionMode('select');\r\n        }\r\n        */\n        // Single clicks on nodes in 'connect' mode (that are not drag completions) should do nothing for linking.\n        // If this click is the *end* of a drag that landed on this node 'd',\n        // the dragended function should have handled the link creation.\n        console.log(\"handleNodeClick: Single click in connect mode on node\", d._id, \"- no action for click-linking.\");\n      } else {\n        // interactionMode === 'select'\n        setSelectedEdge(null);\n        if (onNodeClick) onNodeClick(d);\n      }\n    }, 250); // 250ms delay for double click\n  };\n\n  // Handle edge deletion\n  const handleDeleteEdge = () => {\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n      onDeleteEdge(selectedEdge._id);\n      setSelectedEdge(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-wrapper\",\n    onClick: e => {\n      if (e.target === e.currentTarget) {\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    },\n    children: [nodes && nodes.length > 0 ? /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      className: \"graph-svg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-svg empty-graph-placeholder\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-graph-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This canvas is empty. Start by creating a new node!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-controls\",\n      children: [selectedEdge && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteEdge,\n        className: \"button danger\",\n        children: [/*#__PURE__*/_jsxDEV(TrashIcon, {\n          style: {\n            width: '1rem',\n            height: '1rem',\n            marginRight: '0.5rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 13\n        }, this), \"Remove Edge\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onCreateNew,\n          className: \"button primary\",\n          children: [/*#__PURE__*/_jsxDEV(PlusIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 13\n          }, this), \"Create New Node\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setInteractionMode(prevMode => prevMode === 'connect' ? 'select' : 'connect'),\n          className: `button accent ${interactionMode === 'connect' ? 'active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(LinkIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 567,\n            columnNumber: 13\n          }, this), interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 548,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 532,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"QZ/EZzz+kf0sWYM/F3XvfMFR0bI=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","d3","api","PlusIcon","LinkIcon","TrashIcon","jsxDEV","_jsxDEV","Graph","nodes","edges","onNodeClick","onNodeDoubleClick","onCreateNew","onCreateEdge","onDeleteEdge","interactionMode","setInteractionMode","onBackgroundClick","isAnyPanelVisible","newlyCreatedEdgeId","onEdgeAnimationComplete","appearingNodeId","onNodeAppearAnimationComplete","_s","svgRef","linkingState","sourceNode","tempLink","isLinking","selectedEdge","setSelectedEdge","clickTimeout","console","log","nodeCount","length","edgeCount","mode","JSON","stringify","handleMouseMoveLinking","event","current","x","y","pointer","tempLinkNode","node","tagName","toLowerCase","attr","handleMouseUpLinking","target","clickedDomElement","closestNodeGroup","closest","isNode","_linkingState$current","remove","svgInstance","select","onMouseMoveLinking","onMouseUpLinking","on","_linkingState$current2","svg","selectAll","currentSvg","localContainerWidth","clientWidth","localContainerHeight","clientHeight","setupBackgroundClickHandler","append","classList","contains","classed","containerWidth","containerHeight","data","enter","d","forEach","position","Math","random","fx","fy","nodeMap","_id","processedEdges","map","edge","id","source","type","simulation","forceSimulation","force","forceLink","distance","alpha","alphaDecay","alphaTarget","linkElements","handleEdgeClick","nodeElements","call","dragBehavior","handleNodeClick","text","_d$_id","title","substring","stopPropagation","currentTarget","ticked","sourceX","max","min","sourceY","targetX","targetY","linkToAnimate","empty","setTimeout","nodeToAnimate","raise","stop","clearTimeout","handleKeyDown","key","window","addEventListener","removeEventListener","dragstarted","sourceEvent","active","restart","dragged","dragended","_linkingState$current3","pointerX","pointerY","releaseTargetElement","document","elementFromPoint","clientX","clientY","targetNodeData","datum","updateNode","catch","err","error","drag","defaultPrevented","_linkingState$current4","handleDeleteEdge","className","onClick","e","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","style","width","height","marginRight","prevMode","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Mind Mosaic/client/src/components/graph.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\r\nimport * as d3 from 'd3';\r\nimport './Graph.css';\r\nimport api from '../services/api.js';\r\nimport PlusIcon from './icons/PlusIcon';\r\nimport LinkIcon from './icons/LinkIcon';\r\nimport TrashIcon from './icons/TrashIcon';\r\n\r\nconst Graph = ({ nodes = [], edges = [], onNodeClick, onNodeDoubleClick, onCreateNew, onCreateEdge, onDeleteEdge, interactionMode = 'select', setInteractionMode, onBackgroundClick, isAnyPanelVisible, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete }) => {\r\n  const svgRef = useRef();\r\n  const linkingState = useRef({ sourceNode: null, tempLink: null, isLinking: false });\r\n  const [selectedEdge, setSelectedEdge] = useState(null);\r\n  const clickTimeout = useRef(null);\r\n\r\n  console.log('Graph received:', {\r\n    nodeCount: nodes.length,\r\n    edgeCount: edges.length,\r\n    mode: interactionMode\r\n  });\r\n\r\n  // Debug: Log the actual nodes and edges data\r\n  console.log('Nodes data:', JSON.stringify(nodes, null, 2));\r\n  console.log('Edges data:', JSON.stringify(edges, null, 2));\r\n\r\n  const handleMouseMoveLinking = useCallback((event) => { \r\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\r\n        return;\r\n    }\r\n    if (!svgRef.current) return; \r\n    const [x, y] = d3.pointer(event, svgRef.current);\r\n    \r\n    const tempLinkNode = linkingState.current.tempLink.node();\r\n    if (!tempLinkNode) return;\r\n\r\n    const tagName = tempLinkNode.tagName.toLowerCase();\r\n\r\n    if (tagName === 'line') {\r\n        linkingState.current.tempLink.attr('x2', x).attr('y2', y);\r\n    } else if (tagName === 'path') {\r\n        linkingState.current.tempLink\r\n          .attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\r\n    }\r\n  }, [svgRef, linkingState]);\r\n\r\n  const handleMouseUpLinking = useCallback((event) => {\r\n    console.log('SVG mouseup.linking triggered. Target:', event.target, 'isLinking:', linkingState.current.isLinking);\r\n    if (linkingState.current.isLinking) { \r\n      if (!svgRef.current) return; \r\n      \r\n      const clickedDomElement = event.target;\r\n      const closestNodeGroup = clickedDomElement.closest('.node');\r\n      const isNode = !!closestNodeGroup; \r\n      \r\n      console.log('SVG mouseup.linking: Is target related to a node?', isNode, 'Clicked DOM Element:', clickedDomElement, 'Closest Node Group:', closestNodeGroup);\r\n\r\n      if (!isNode) { \r\n        console.log('SVG mouseup.linking: Target is NOT a node. Cancelling link.');\r\n        linkingState.current.tempLink?.remove();\r\n        linkingState.current.isLinking = false;\r\n        linkingState.current.sourceNode = null;\r\n        linkingState.current.tempLink = null;\r\n        setInteractionMode('select'); \r\n      } else {\r\n        console.log('SVG mouseup.linking: Target IS a node. Deferring to node\\'s click handler for completion.');\r\n        // If the mouseup is on a node, the `handleNodeClick` for that target node will handle the link completion (if applicable based on drag state).\r\n        // Or, if it was a drag operation ending on a node, that node's click event (which might be this one)\r\n        // needs to correctly interpret the state. The dragended + this mouseup should correctly lead to link creation if conditions are met.\r\n      }\r\n    }\r\n  }, [svgRef, linkingState, setInteractionMode, onCreateEdge]); // onCreateEdge might be relevant if we decide to complete link here\r\n\r\n  useEffect(() => {\r\n    const svgInstance = d3.select(svgRef.current);\r\n\r\n    if (interactionMode === 'connect') {\r\n      const onMouseMoveLinking = handleMouseMoveLinking;\r\n      const onMouseUpLinking = handleMouseUpLinking;\r\n\r\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\r\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\r\n      console.log('Global linking listeners ADDED to SVG for connect mode.');\r\n\r\n      return () => {\r\n        svgInstance.on('mousemove.linking', null);\r\n        svgInstance.on('mouseup.linking', null);\r\n        console.log('Global linking listeners REMOVED from SVG.');\r\n      };\r\n    } else {\r\n      svgInstance.on('mousemove.linking', null);\r\n      svgInstance.on('mouseup.linking', null);\r\n      \r\n      if (linkingState.current.isLinking) {\r\n        console.log('Exited connect mode with active link: Forcibly cleaning up.');\r\n        linkingState.current.tempLink?.remove();\r\n        linkingState.current.isLinking = false;\r\n        linkingState.current.sourceNode = null;\r\n        linkingState.current.tempLink = null;\r\n      }\r\n      return () => {};\r\n    }\r\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]); \r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll('*').remove();\r\n\r\n    const currentSvg = svgRef.current;\r\n    if (!currentSvg) return;\r\n\r\n    let localContainerWidth = currentSvg.clientWidth;\r\n    let localContainerHeight = currentSvg.clientHeight;\r\n\r\n    if (localContainerWidth < 50) localContainerWidth = 50;\r\n    if (localContainerHeight < 50) localContainerHeight = 50;\r\n\r\n    const setupBackgroundClickHandler = () => {\r\n      svg.append('rect')\r\n        .attr('class', 'background')\r\n        .attr('width', '100%')\r\n        .attr('height', '100%')\r\n        .attr('fill', 'transparent')\r\n        .on('click', (event) => {\r\n          if (event.target.classList.contains('background')) {\r\n            d3.selectAll('.link').classed('selected', false);\r\n            setSelectedEdge(null);\r\n            if (onBackgroundClick) {\r\n              onBackgroundClick();\r\n            }\r\n          }\r\n        });\r\n    };\r\n\r\n    if (!nodes || nodes.length === 0) {\r\n      setupBackgroundClickHandler(); \r\n      return;\r\n    }\r\n\r\n    const containerWidth = localContainerWidth;\r\n    const containerHeight = localContainerHeight;\r\n\r\n    svg\r\n      .attr('viewBox', [0, 0, containerWidth, containerHeight])\r\n      .attr('preserveAspectRatio', 'xMidYMid meet');\r\n\r\n    svg.append('rect')\r\n      .attr('class', 'background')\r\n      .attr('width', '100%')\r\n      .attr('height', '100%')\r\n      .attr('fill', 'transparent')\r\n      .on('click', (event) => {\r\n        if (event.target.classList.contains('background')) {\r\n          d3.selectAll('.link').classed('selected', false);\r\n          setSelectedEdge(null);\r\n          if (onBackgroundClick) {\r\n            onBackgroundClick();\r\n          }\r\n        }\r\n      });\r\n\r\n    svg.append(\"defs\").selectAll(\"marker\")\r\n      .data([\"arrow\"])\r\n      .enter().append(\"marker\")\r\n      .attr(\"id\", d => d)\r\n      .attr(\"viewBox\", \"0 -5 10 10\")\r\n      .attr(\"refX\", 20) \r\n      .attr(\"refY\", 0)\r\n      .attr(\"markerWidth\", 6)\r\n      .attr(\"markerHeight\", 6)\r\n      .attr(\"orient\", \"auto\")\r\n      .append(\"path\")\r\n      .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n      .attr(\"fill\", \"#A8C3A4\"); \r\n\r\n    nodes.forEach(node => {\r\n      if (!node.position || (node.position.x === null && node.position.y === null)) {\r\n        node.x = Math.random() * (containerWidth - 100) + 50;\r\n        node.y = Math.random() * (containerHeight - 100) + 50;\r\n        node.position = { x: node.x, y: node.y };\r\n      } else {\r\n        node.x = node.position.x;\r\n        node.y = node.position.y;\r\n      }\r\n      node.fx = null;\r\n      node.fy = null;\r\n    });\r\n\r\n    const nodeMap = {};\r\n    nodes.forEach(node => {\r\n      nodeMap[node._id] = node;\r\n    });\r\n\r\n    const processedEdges = edges.map(edge => ({\r\n      id: edge._id,\r\n      source: nodeMap[edge.source] || edge.source,\r\n      target: nodeMap[edge.target] || edge.target,\r\n      type: edge.type,\r\n      _id: edge._id\r\n    }));\r\n\r\n    const simulation = d3.forceSimulation(nodes)\r\n      .force('link', d3.forceLink(processedEdges).id(d => d._id).distance(150))\r\n      .alpha(0)\r\n      .alphaDecay(1)\r\n      .alphaTarget(0);\r\n\r\n    nodes.forEach(node => {\r\n      if (node.position) {\r\n        node.fx = node.position.x;\r\n        node.fy = node.position.y;\r\n      } else {\r\n        node.fx = Math.random() * (containerWidth - 100) + 50;\r\n        node.fy = Math.random() * (containerHeight - 100) + 50;\r\n        node.position = { x: node.fx, y: node.fy };\r\n      }\r\n    });\r\n\r\n    const linkElements = svg.append('g')\r\n      .attr('class', 'links')\r\n      .selectAll('path')\r\n      .data(processedEdges)\r\n      .enter().append('path')\r\n      .attr('class', 'link')\r\n      .attr('data-id', d => d.id)\r\n      .attr('stroke', '#A8C3A4') \r\n      .attr('stroke-width', 2)\r\n      .attr('fill', 'none')\r\n      .attr('marker-end', 'url(#arrow)')\r\n      .on('click', handleEdgeClick);\r\n\r\n    const nodeElements = svg.append('g')\r\n      .attr('class', 'nodes')\r\n      .selectAll('g')\r\n      .data(nodes)\r\n      .enter().append('g')\r\n      .attr('class', 'node')\r\n      .attr('data-id', d => d._id)\r\n      .call(dragBehavior(simulation, svg, containerWidth, containerHeight));\r\n\r\n    nodeElements.append('circle')\r\n      .attr('r', 12)\r\n      .attr('fill', '#2E7D32') \r\n      .attr('stroke', '#1B5E20') \r\n      .attr('stroke-width', 1.5)\r\n      .on('click', handleNodeClick);\r\n\r\n    nodeElements.append('text')\r\n      .text(d => d.title || d._id?.substring(0, 6))\r\n      .attr('x', 16)\r\n      .attr('y', 5)\r\n      .attr('fill', '#FAF3E0') \r\n      .attr('text-anchor', 'start')\r\n      .on('click', handleNodeClick);\r\n\r\n    function handleEdgeClick(event, d) {\r\n      event.stopPropagation();\r\n      if (interactionMode === 'select') {\r\n        d3.selectAll('.link').classed('selected', false);\r\n        d3.select(event.currentTarget).classed('selected', true);\r\n        setSelectedEdge(d);\r\n        if (onNodeClick) onNodeClick(null);\r\n      }\r\n    }\r\n\r\n    function ticked() {\r\n      linkElements.attr('d', d => {\r\n        const sourceX = Math.max(15, Math.min(containerWidth - 15, d.source.x));\r\n        const sourceY = Math.max(15, Math.min(containerHeight - 15, d.source.y));\r\n        const targetX = Math.max(15, Math.min(containerWidth - 15, d.target.x));\r\n        const targetY = Math.max(15, Math.min(containerHeight - 15, d.target.y));\r\n        \r\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\r\n      });\r\n\r\n      nodeElements.attr('transform', d => {\r\n        const x = Math.max(15, Math.min(containerWidth - 15, d.x));\r\n        const y = Math.max(15, Math.min(containerHeight - 15, d.y));\r\n        return `translate(${x},${y})`;\r\n      });\r\n    }\r\n\r\n    simulation.on('tick', ticked);\r\n    \r\n    // Handle animation for newly created edge\r\n    if (newlyCreatedEdgeId && svgRef.current) {\r\n      const linkToAnimate = d3.select(svgRef.current).select(`.link[data-id='${newlyCreatedEdgeId}']`);\r\n      if (!linkToAnimate.empty()) {\r\n        linkToAnimate.classed('newly-added-link', true);\r\n        console.log(\"Applied animation class to:\", newlyCreatedEdgeId);\r\n        setTimeout(() => {\r\n          linkToAnimate.classed('newly-added-link', false);\r\n          if (onEdgeAnimationComplete) {\r\n            onEdgeAnimationComplete(newlyCreatedEdgeId);\r\n            console.log(\"Removed animation class and called callback for:\", newlyCreatedEdgeId);\r\n          }\r\n        }, 1000); // Animation duration is 1s\r\n      }\r\n    }\r\n    \r\n    // Handle animation for newly appearing node\r\n    if (appearingNodeId && svgRef.current) {\r\n      const nodeToAnimate = d3.select(svgRef.current).select(`.node[data-id='${appearingNodeId}']`);\r\n      if (!nodeToAnimate.empty()) {\r\n        // The transform-origin for scale is default center of the element,\r\n        // which should be fine for the <g> element of the node.\r\n        nodeToAnimate.classed('node-appearing', true).raise();\r\n        console.log(\"Applied node appearing animation class and raised node:\", appearingNodeId);\r\n        setTimeout(() => {\r\n          nodeToAnimate.classed('node-appearing', false);\r\n          if (onNodeAppearAnimationComplete) {\r\n            onNodeAppearAnimationComplete(appearingNodeId);\r\n            console.log(\"Removed node appearing animation class and called callback for:\", appearingNodeId);\r\n          }\r\n        }, 500); // Node animation duration is 0.5s\r\n      }\r\n    }\r\n    \r\n    return () => {\r\n      simulation.stop();\r\n      if (linkingState.current.tempLink) {\r\n        linkingState.current.tempLink.remove();\r\n      }\r\n      linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n      if (clickTimeout.current) {\r\n        clearTimeout(clickTimeout.current);\r\n      }\r\n    };\r\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, interactionMode, onBackgroundClick, isAnyPanelVisible, handleMouseMoveLinking, handleMouseUpLinking, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete]); // Added new node animation props\r\n\r\n  // Handle keyboard delete for selected edges\r\n  useEffect(() => {\r\n    const handleKeyDown = (event) => {\r\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\r\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\r\n          onDeleteEdge(selectedEdge._id);\r\n          setSelectedEdge(null); \r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [selectedEdge, onDeleteEdge]);\r\n\r\n  function dragBehavior(simulation, svg, containerWidth, containerHeight) {\r\n    function dragstarted(event, d) {\r\n      if (interactionMode === 'connect') {\r\n        if (linkingState.current.tempLink) {\r\n            linkingState.current.tempLink.remove();\r\n            linkingState.current.tempLink = null;\r\n        }\r\n\r\n        linkingState.current.isLinking = true;\r\n        linkingState.current.sourceNode = d;\r\n        event.sourceEvent.stopPropagation();\r\n        if (svgRef.current) {\r\n            linkingState.current.tempLink = d3.select(svgRef.current).append('path')\r\n              .attr('class', 'temp-link link') \r\n              .attr('d', `M${d.x},${d.y}L${d.x},${d.y}`)\r\n              .attr('stroke-dasharray', '5,5')\r\n              .attr('stroke', '#B87333') \r\n              .attr('stroke-width', 2)\r\n              .attr('fill', 'none')\r\n              .attr('marker-end', 'url(#arrow)');\r\n        }\r\n      } else {\r\n        event.sourceEvent.stopPropagation();\r\n        if (!event.active) simulation.alphaTarget(0.3).restart();\r\n        d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\r\n        d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\r\n      }\r\n    }\r\n\r\n    function dragged(event, d) {\r\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\r\n        event.sourceEvent.stopPropagation();\r\n        if (!svgRef.current || !linkingState.current.tempLink) return; \r\n        const [targetX, targetY] = d3.pointer(event.sourceEvent, svgRef.current); \r\n        linkingState.current.tempLink\r\n          .attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${targetX},${targetY}`);\r\n      } else {\r\n        event.sourceEvent.stopPropagation();\r\n        d.fx = Math.max(15, Math.min(containerWidth - 15, event.x));\r\n        d.fy = Math.max(15, Math.min(containerHeight - 15, event.y));\r\n        d.position = { x: d.fx, y: d.fy };\r\n      }\r\n    }\r\n\r\n    async function dragended(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0);\r\n      \r\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\r\n        console.log(\"Drag ended in connect mode. Global mouseup should handle the rest.\");\r\n        // The actual link creation or cancellation is now primarily handled by handleMouseUpLinking (global SVG mouseup)\r\n        // when the mouse button is released. If it's released over a valid node target, \r\n        // that node's click event (handleNodeClick) can play a role if it's specifically designed to for drag completions.\r\n        // However, with click-linking disabled in handleNodeClick, the primary logic for link completion\r\n        // after a drag should reside in handleMouseUpLinking (if target is a node) or its cancellation part (if not on a node).\r\n        \r\n        // Let's ensure we check the target of the mouseup that effectively ends the drag.\r\n        const [pointerX, pointerY] = d3.pointer(event.sourceEvent, svgRef.current); // Get pointer relative to SVG\r\n        const releaseTargetElement = document.elementFromPoint(event.sourceEvent.clientX, event.sourceEvent.clientY);\r\n        const closestNodeGroup = releaseTargetElement ? releaseTargetElement.closest('.node') : null;\r\n\r\n        if (closestNodeGroup) {\r\n            // The d3.select(closestNodeGroup).datum() would give the node data 'dd'\r\n            const targetNodeData = d3.select(closestNodeGroup).datum();\r\n            if (targetNodeData && linkingState.current.sourceNode && linkingState.current.sourceNode._id !== targetNodeData._id) {\r\n                console.log(\"Drag ended on a valid target node. Creating edge.\");\r\n                if (onCreateEdge) {\r\n                    onCreateEdge(linkingState.current.sourceNode._id, targetNodeData._id);\r\n                }\r\n            } else {\r\n                console.log(\"Drag ended on source node or invalid target node data. Cancelling.\");\r\n            }\r\n        } else {\r\n            console.log(\"Drag ended NOT on a node. Cancelling link (delegated to handleMouseUpLinking).\");\r\n            // Cancellation is already handled by handleMouseUpLinking if mouseup is on non-node\r\n        }\r\n        // Clean up linking state AFTER decision\r\n        linkingState.current.tempLink?.remove();\r\n        linkingState.current.isLinking = false;\r\n        linkingState.current.sourceNode = null;\r\n        linkingState.current.tempLink = null;\r\n        setInteractionMode('select');\r\n\r\n      } else if (interactionMode !== 'connect') {\r\n        if (api && typeof api.updateNode === 'function') {\r\n          api.updateNode(d._id, { position: { x: d.x, y: d.y } })\r\n            .catch(err => console.error(\"Failed to update node position:\", err));\r\n        }\r\n      }\r\n    }\r\n\r\n    return d3.drag()\r\n      .on('start', dragstarted)\r\n      .on('drag', dragged)\r\n      .on('end', dragended);\r\n  }\r\n\r\n  const handleNodeClick = (event, d) => {\r\n    if (event.defaultPrevented) return; // Dragged\r\n\r\n    // Handle double-click first\r\n    if (clickTimeout.current) {\r\n      clearTimeout(clickTimeout.current);\r\n      clickTimeout.current = null;\r\n      if (onNodeDoubleClick) {\r\n        onNodeDoubleClick(d);\r\n      }\r\n      // If a link was being initiated by click (now disabled), cancel it on double click\r\n      if (linkingState.current.isLinking && linkingState.current.sourceNode) {\r\n        linkingState.current.tempLink?.remove();\r\n        linkingState.current.isLinking = false;\r\n        linkingState.current.sourceNode = null;\r\n        linkingState.current.tempLink = null;\r\n        // setInteractionMode('select'); // Potentially keep in connect mode if user wants to try another drag\r\n      }\r\n      return;\r\n    }\r\n\r\n    // Handle single-click\r\n    clickTimeout.current = setTimeout(() => {\r\n      clickTimeout.current = null;\r\n      if (interactionMode === 'connect') {\r\n        // Click-based linking is now disabled. All linking is done via drag.\r\n        /*\r\n        if (!linkingState.current.isLinking) {\r\n          // First click: initiate linking\r\n          console.log(\"handleNodeClick: First click in connect mode - initiating link from node:\", d._id);\r\n          linkingState.current.tempLink?.remove(); // Remove any old temp link\r\n\r\n          linkingState.current.sourceNode = d;\r\n          linkingState.current.isLinking = true;\r\n          const [pointerX, pointerY] = d3.pointer(event, svgRef.current);\r\n          if (svgRef.current) { // Ensure svgRef.current is available\r\n            linkingState.current.tempLink = d3.select(svgRef.current).append('line')\r\n              .attr('class', 'temp-link')\r\n              .attr('x1', d.x)\r\n              .attr('y1', d.y)\r\n              .attr('x2', pointerX) \r\n              .attr('y2', pointerY)\r\n              .attr('stroke-dasharray', '5,5')\r\n              .attr('stroke', '#B87333') // Copper for temp link\r\n              .attr('stroke-width', 2)\r\n              .attr('fill', 'none')\r\n              .attr('marker-end', 'url(#arrow)'); // Add arrow to temp line\r\n          }\r\n        } else if (linkingState.current.sourceNode && linkingState.current.sourceNode._id !== d._id) {\r\n          // Second click on a DIFFERENT node: complete the link\r\n          console.log(\"handleNodeClick: Second click in connect mode - completing link to node:\", d._id);\r\n          if (onCreateEdge) {\r\n            onCreateEdge(linkingState.current.sourceNode._id, d._id);\r\n          }\r\n          linkingState.current.tempLink?.remove();\r\n          linkingState.current.isLinking = false;\r\n          linkingState.current.sourceNode = null;\r\n          linkingState.current.tempLink = null;\r\n          setInteractionMode('select'); \r\n        } else if (linkingState.current.sourceNode && linkingState.current.sourceNode._id === d._id) {\r\n          // Clicked on the source node again: cancel linking\r\n          console.log(\"handleNodeClick: Clicked on source node again - cancelling link.\");\r\n          linkingState.current.tempLink?.remove();\r\n          linkingState.current.isLinking = false;\r\n          linkingState.current.sourceNode = null;\r\n          linkingState.current.tempLink = null;\r\n          setInteractionMode('select');\r\n        }\r\n        */\r\n        // Single clicks on nodes in 'connect' mode (that are not drag completions) should do nothing for linking.\r\n        // If this click is the *end* of a drag that landed on this node 'd',\r\n        // the dragended function should have handled the link creation.\r\n        console.log(\"handleNodeClick: Single click in connect mode on node\", d._id, \"- no action for click-linking.\");\r\n\r\n      } else { // interactionMode === 'select'\r\n        setSelectedEdge(null);\r\n        if (onNodeClick) onNodeClick(d);\r\n      }\r\n    }, 250); // 250ms delay for double click\r\n  };\r\n\r\n  // Handle edge deletion\r\n  const handleDeleteEdge = () => {\r\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\r\n      onDeleteEdge(selectedEdge._id);\r\n      setSelectedEdge(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-wrapper\" onClick={(e) => {\r\n      if (e.target === e.currentTarget) {\r\n        if (onBackgroundClick) {\r\n          onBackgroundClick();\r\n        }\r\n      }\r\n    }}>\r\n      {nodes && nodes.length > 0 ? (\r\n        <svg ref={svgRef} className=\"graph-svg\" />\r\n      ) : (\r\n        <div className=\"graph-svg empty-graph-placeholder\">\r\n          <div className=\"empty-graph-message\">\r\n            <p>This canvas is empty. Start by creating a new node!</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className=\"graph-controls\">\r\n        {selectedEdge && (\r\n          <button\r\n            onClick={handleDeleteEdge}\r\n            className=\"button danger\"\r\n          >\r\n            <TrashIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            Remove Edge\r\n          </button>\r\n        )}\r\n        <div className=\"button-row\">\r\n          <button onClick={onCreateNew} className=\"button primary\">\r\n            <PlusIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            Create New Node\r\n          </button>\r\n          <button\r\n            onClick={() => setInteractionMode(prevMode => prevMode === 'connect' ? 'select' : 'connect')}\r\n            className={`button accent ${interactionMode === 'connect' ? 'active' : ''}`}\r\n          >\r\n            <LinkIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            {interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}