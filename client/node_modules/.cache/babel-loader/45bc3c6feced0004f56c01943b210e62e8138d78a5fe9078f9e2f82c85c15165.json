{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Projects\\\\Mind Mosaic\\\\client\\\\src\\\\components\\\\Graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport PlusIcon from './icons/PlusIcon';\nimport LinkIcon from './icons/LinkIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  nodes = [],\n  edges = [],\n  onNodeClick,\n  onNodeDoubleClick,\n  onCreateNew,\n  onCreateEdge,\n  onDeleteEdge,\n  interactionMode = 'select',\n  setInteractionMode,\n  onBackgroundClick\n}) => {\n  _s();\n  const svgRef = useRef(null);\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const linkingState = useRef({\n    sourceNode: null,\n    tempLink: null,\n    isLinking: false\n  });\n  const simulationRef = useRef();\n  const graphDimensionsRef = useRef({\n    width: 600,\n    height: 400\n  });\n  const stableViewBoxDimensionsRef = useRef({\n    width: 600,\n    height: 400\n  });\n\n  // Connect button component\n  const ConnectButton = ({\n    interactionMode,\n    setInteractionMode,\n    linkingState,\n    svgRef\n  }) => {\n    const handleClick = () => {\n      const newMode = interactionMode === 'connect' ? 'select' : 'connect';\n      setInteractionMode(newMode); // Changed from setMode to setInteractionMode\n      if (newMode === 'select') {\n        d3.select(svgRef.current).selectAll('.temp-link').remove();\n        d3.select(svgRef.current).selectAll('.node').classed('selected-for-connection', false);\n        linkingState.current = {\n          sourceNode: null,\n          tempLink: null,\n          isLinking: false\n        };\n        d3.select(svgRef.current).on('mousemove.temp-link', null);\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      className: `button accent ${interactionMode === 'connect' ? 'active' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(LinkIcon, {\n        style: {\n          width: '1rem',\n          height: '1rem',\n          marginRight: '0.5rem'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Drag behavior\n  const dragBehavior = useCallback((sim, svgInstance, containerWidth, containerHeight) => {\n    return d3.drag().on('start', function (event, d) {\n      if (interactionMode !== 'select') return;\n      if (!event.active) sim.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }).on('drag', function (event, d) {\n      if (interactionMode !== 'select') return;\n      d.x = event.x;\n      d.y = event.y;\n      d.fx = event.x;\n      d.fy = event.y;\n    }).on('end', function (event, d) {\n      if (interactionMode !== 'select') return;\n      if (!event.active) sim.alphaTarget(0);\n      d.position = {\n        x: d.x,\n        y: d.y\n      };\n      d.fx = d.x;\n      d.fy = d.y;\n    });\n  }, [interactionMode]);\n\n  // Handle node click\n  const handleNodeClick = useCallback((event, d) => {\n    if (event.defaultPrevented) return;\n    if (interactionMode === 'connect') {\n      if (!linkingState.current.sourceNode) {\n        // First click: select source node\n        linkingState.current.sourceNode = d;\n        linkingState.current.isLinking = true;\n\n        // Highlight selected node\n        d3.select(svgRef.current).selectAll('.node').classed('selected-for-connection', false);\n        d3.select(event.currentTarget).classed('selected-for-connection', true);\n\n        // Remove any existing temp link\n        d3.select(svgRef.current).selectAll('.temp-link').remove();\n\n        // Create a new temporary link\n        linkingState.current.tempLink = d3.select(svgRef.current).append('line').attr('class', 'temp-link').attr('stroke', '#A8C3A4').attr('stroke-dasharray', '5,5').attr('stroke-width', 2);\n\n        // Update the temp link on mouse move\n        d3.select(svgRef.current).on('mousemove.temp-link', e => {\n          if (linkingState.current.isLinking && linkingState.current.sourceNode) {\n            const [x, y] = d3.pointer(e, svgRef.current);\n            linkingState.current.tempLink.attr('x1', linkingState.current.sourceNode.x).attr('y1', linkingState.current.sourceNode.y).attr('x2', x).attr('y2', y);\n          }\n        });\n      } else {\n        // Second click: create the edge\n        const source = linkingState.current.sourceNode._id;\n        const target = d._id;\n        if (source && target && source !== target) {\n          onCreateEdge && onCreateEdge({\n            source,\n            target\n          });\n        }\n\n        // Cleanup linking state and visuals\n        d3.select(svgRef.current).selectAll('.temp-link').remove();\n        d3.select(svgRef.current).selectAll('.node').classed('selected-for-connection', false);\n        linkingState.current = {\n          sourceNode: null,\n          tempLink: null,\n          isLinking: false\n        };\n        d3.select(svgRef.current).on('mousemove.temp-link', null);\n      }\n    } else if (onNodeClick) {\n      onNodeClick(d);\n    }\n  }, [interactionMode, onNodeClick, onCreateEdge]);\n\n  // Handle node double click\n  const handleNodeDoubleClick = useCallback((event, d) => {\n    if (event.defaultPrevented) return;\n    if (interactionMode === 'select' && onNodeDoubleClick) {\n      onNodeDoubleClick(d);\n    }\n  }, [interactionMode, onNodeDoubleClick]);\n\n  // Handle edge click\n  const handleEdgeClick = useCallback((event, d) => {\n    event.stopPropagation();\n    if (interactionMode === 'select') {\n      d3.selectAll('.link').classed('selected', false);\n      d3.select(event.currentTarget).classed('selected', true);\n      setSelectedEdge(d);\n    }\n  }, [interactionMode]);\n\n  // Handle background click\n  const handleBackgroundClick = useCallback(event => {\n    if (event.target.classList.contains('background')) {\n      d3.selectAll('.link').classed('selected', false);\n      setSelectedEdge(null);\n\n      // Cancel linking if in progress\n      if (linkingState.current.isLinking) {\n        d3.select(svgRef.current).selectAll('.temp-link').remove();\n        d3.select(svgRef.current).selectAll('.node').classed('selected-for-connection', false);\n        linkingState.current = {\n          sourceNode: null,\n          tempLink: null,\n          isLinking: false\n        };\n        d3.select(svgRef.current).on('mousemove.temp-link', null);\n      }\n      if (onBackgroundClick) {\n        onBackgroundClick();\n      }\n    }\n  }, [onBackgroundClick]);\n\n  // Main effect for D3 rendering and updates\n  useEffect(() => {\n    const currentSvg = svgRef.current;\n    if (!currentSvg) return;\n    const initialWidth = graphDimensionsRef.current.width;\n    const initialHeight = graphDimensionsRef.current.height;\n    if (!simulationRef.current) {\n      simulationRef.current = d3.forceSimulation(nodes).force('link', d3.forceLink(edges).id(d => d._id).distance(150)).force('charge', d3.forceManyBody().strength(-500)).force('center', d3.forceCenter(initialWidth / 2, initialHeight / 2));\n    } else {\n      simulationRef.current.nodes(nodes).force('link', d3.forceLink(edges).id(d => d._id).distance(150));\n    }\n    simulationRef.current.alpha(0.3).restart();\n    const svg = d3.select(currentSvg);\n    const simulation = simulationRef.current;\n    if (!simulation) return;\n    svg.on('click', handleBackgroundClick);\n    let linkGroup = svg.select('g.links-group');\n    if (linkGroup.empty()) {\n      linkGroup = svg.append('g').attr('class', 'links-group');\n    }\n    let nodeGroup = svg.select('g.nodes-group');\n    if (nodeGroup.empty()) {\n      nodeGroup = svg.append('g').attr('class', 'nodes-group');\n    }\n    let defs = svg.select('defs');\n    if (defs.empty()) {\n      defs = svg.append('defs');\n    }\n    if (defs.select('#arrow').empty()) {\n      defs.append(\"marker\").attr(\"id\", \"arrow\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 20).attr(\"refY\", 0).attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#A8C3A4\");\n    }\n    const liveContainerWidth = currentSvg.clientWidth;\n    const liveContainerHeight = currentSvg.clientHeight;\n    graphDimensionsRef.current = {\n      width: liveContainerWidth,\n      height: liveContainerHeight\n    };\n    if (stableViewBoxDimensionsRef.current.width === 0 && liveContainerWidth > 0) {\n      stableViewBoxDimensionsRef.current.width = liveContainerWidth;\n    }\n    if (stableViewBoxDimensionsRef.current.height === 0 && liveContainerHeight > 0) {\n      stableViewBoxDimensionsRef.current.height = liveContainerHeight;\n    }\n    const viewBoxWidth = stableViewBoxDimensionsRef.current.width > 0 ? stableViewBoxDimensionsRef.current.width : liveContainerWidth;\n    const viewBoxHeight = stableViewBoxDimensionsRef.current.height > 0 ? stableViewBoxDimensionsRef.current.height : liveContainerHeight;\n    svg.attr('viewBox', [0, 0, viewBoxWidth, viewBoxHeight]).attr('preserveAspectRatio', 'xMidYMid meet');\n\n    // Background rectangle to capture clicks for clearing selection/linking\n    let background = svg.select('rect.background');\n    if (background.empty()) {\n      background = svg.insert('rect', ':first-child').attr('class', 'background').attr('fill', 'transparent');\n    }\n    background.attr('width', viewBoxWidth).attr('height', viewBoxHeight).on('click', handleBackgroundClick);\n    nodes.forEach(node => {\n      const hasValidPositionProp = node.position && typeof node.position.x === 'number' && typeof node.position.y === 'number';\n      if (hasValidPositionProp) {\n        node.x = node.position.x;\n        node.y = node.position.y;\n        node.fx = node.position.x;\n        node.fy = node.position.y;\n      } else {\n        node.x = typeof node.x === 'number' ? node.x : Math.random() * (liveContainerWidth - 100) + 50;\n        node.y = typeof node.y === 'number' ? node.y : Math.random() * (liveContainerHeight - 100) + 50;\n        node.fx = null;\n        node.fy = null;\n        node.position = {\n          x: node.x,\n          y: node.y\n        };\n      }\n    });\n\n    // Initialize drag behavior\n    const drag = dragBehavior(simulationRef.current, currentSvg, viewBoxWidth, viewBoxHeight);\n    const nodeMap = {};\n    nodes.forEach(node => {\n      if (node && node._id) {\n        nodeMap[node._id] = node;\n      }\n    });\n    const validEdges = edges.filter(edge => edge && edge.source && edge.target && nodeMap[edge.source] && nodeMap[edge.target]);\n    const processedEdges = validEdges.map(edge => ({\n      id: edge._id,\n      source: nodeMap[edge.source],\n      target: nodeMap[edge.target],\n      type: edge.type || 'related',\n      _id: edge._id\n    }));\n    simulationRef.current.force('link', d3.forceLink(processedEdges).id(d => d._id)).force('charge', d3.forceManyBody().strength(-500)).force('center', d3.forceCenter(viewBoxWidth / 2, viewBoxHeight / 2)).force('collision', d3.forceCollide().radius(40));\n    simulationRef.current.alpha(0.3).restart();\n    const link = linkGroup.selectAll('path.link').data(processedEdges, d => d.id);\n    link.exit().remove();\n    const linkEnter = link.enter().append('path').attr('class', 'link').attr('fill', 'none').attr('stroke', '#A8C3A4').attr('stroke-width', 2).attr('marker-end', 'url(#arrow)');\n    const linkMerged = linkEnter.merge(link).on('click', handleEdgeClick);\n    linkMerged.attr('d', d => `M${d.source.x},${d.source.y}L${d.target.x},${d.target.y}`);\n    const node = nodeGroup.selectAll('.node').data(nodes, d => d._id);\n    node.exit().remove();\n    const nodeEnter = node.enter().append('g').attr('class', 'node').call(dragBehavior(simulationRef.current, currentSvg, viewBoxWidth, viewBoxHeight));\n    nodeEnter.append('circle').attr('r', 20).attr('fill', '#1B5E20').attr('stroke', '#1B5E20').attr('stroke-width', 1.5);\n    nodeEnter.append('text').attr('dx', 25).attr('dy', 4).text(d => d.title || d._id).style('font-size', '12px').style('fill', 'white');\n    const nodeMerged = nodeEnter.merge(node).call(dragBehavior(simulationRef.current, currentSvg, viewBoxWidth, viewBoxHeight)).attr('transform', d => `translate(${d.x},${d.y})`).on('click', handleNodeClick).on('dblclick', handleNodeDoubleClick);\n    simulationRef.current.on('tick', () => {\n      linkMerged.attr('d', d => `M${d.source.x},${d.source.y}L${d.target.x},${d.target.y}`);\n      nodeMerged.attr('transform', d => `translate(${d.x},${d.y})`);\n    });\n    return () => {\n      simulationRef.current.stop();\n    };\n  }, [nodes, edges, interactionMode, onNodeClick, onNodeDoubleClick, onBackgroundClick]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-container\",\n    style: {\n      width: '100%',\n      height: '100%',\n      padding: '1rem',\n      boxSizing: 'border-box',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      className: \"graph\",\n      style: {\n        width: '100%',\n        height: '100%',\n        pointerEvents: 'all'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"links-group\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"nodes-group\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      style: {\n        position: 'absolute',\n        bottom: '1rem',\n        left: '50%',\n        transform: 'translateX(-50%)',\n        display: 'flex',\n        gap: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onCreateNew,\n        className: \"button primary\",\n        children: [/*#__PURE__*/_jsxDEV(PlusIcon, {\n          style: {\n            width: '1rem',\n            height: '1rem',\n            marginRight: '0.5rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this), \"Create New Node\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ConnectButton, {\n        interactionMode: interactionMode,\n        setInteractionMode: setInteractionMode,\n        linkingState: linkingState,\n        svgRef: svgRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 365,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"3q65VYasPhC9IBy5thZVg5NavXo=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","d3","PlusIcon","LinkIcon","jsxDEV","_jsxDEV","Graph","nodes","edges","onNodeClick","onNodeDoubleClick","onCreateNew","onCreateEdge","onDeleteEdge","interactionMode","setInteractionMode","onBackgroundClick","_s","svgRef","selectedEdge","setSelectedEdge","linkingState","sourceNode","tempLink","isLinking","simulationRef","graphDimensionsRef","width","height","stableViewBoxDimensionsRef","ConnectButton","handleClick","newMode","select","current","selectAll","remove","classed","on","onClick","className","children","style","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","dragBehavior","sim","svgInstance","containerWidth","containerHeight","drag","event","d","active","alphaTarget","restart","fx","x","fy","y","position","handleNodeClick","defaultPrevented","currentTarget","append","attr","e","pointer","source","_id","target","handleNodeDoubleClick","handleEdgeClick","stopPropagation","handleBackgroundClick","classList","contains","currentSvg","initialWidth","initialHeight","forceSimulation","force","forceLink","id","distance","forceManyBody","strength","forceCenter","alpha","svg","simulation","linkGroup","empty","nodeGroup","defs","liveContainerWidth","clientWidth","liveContainerHeight","clientHeight","viewBoxWidth","viewBoxHeight","background","insert","forEach","node","hasValidPositionProp","Math","random","nodeMap","validEdges","filter","edge","processedEdges","map","type","forceCollide","radius","link","data","exit","linkEnter","enter","linkMerged","merge","nodeEnter","call","text","title","nodeMerged","stop","padding","boxSizing","ref","pointerEvents","bottom","left","transform","display","gap","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Projects/Mind Mosaic/client/src/components/Graph.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport PlusIcon from './icons/PlusIcon';\nimport LinkIcon from './icons/LinkIcon';\n\nconst Graph = ({ \n  nodes = [], \n  edges = [], \n  onNodeClick, \n  onNodeDoubleClick, \n  onCreateNew, \n  onCreateEdge, \n  onDeleteEdge, \n  interactionMode = 'select', \n  setInteractionMode, \n  onBackgroundClick\n}) => {\n  const svgRef = useRef(null);\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const linkingState = useRef({ \n    sourceNode: null, \n    tempLink: null, \n    isLinking: false \n  });\n  const simulationRef = useRef();\n  const graphDimensionsRef = useRef({ width: 600, height: 400 });\n  const stableViewBoxDimensionsRef = useRef({ width: 600, height: 400 });\n\n  // Connect button component\n  const ConnectButton = ({ interactionMode, setInteractionMode, linkingState, svgRef }) => {\n  const handleClick = () => {\n    const newMode = interactionMode === 'connect' ? 'select' : 'connect';\n    setInteractionMode(newMode);  // Changed from setMode to setInteractionMode\n    if (newMode === 'select') {\n      d3.select(svgRef.current).selectAll('.temp-link').remove();\n      d3.select(svgRef.current).selectAll('.node').classed('selected-for-connection', false);\n      linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\n      d3.select(svgRef.current).on('mousemove.temp-link', null);\n    }\n  };\n\n    return (\n      <button\n        onClick={handleClick}\n        className={`button accent ${interactionMode === 'connect' ? 'active' : ''}`}\n      >\n        <LinkIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\n        {interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes'}\n      </button>\n    );\n  };\n\n  // Drag behavior\n  const dragBehavior = useCallback((sim, svgInstance, containerWidth, containerHeight) => {\n    return d3.drag()\n      .on('start', function (event, d) {\n        if (interactionMode !== 'select') return;\n        if (!event.active) sim.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      })\n      .on('drag', function (event, d) {\n        if (interactionMode !== 'select') return;\n        d.x = event.x;\n        d.y = event.y;\n        d.fx = event.x;\n        d.fy = event.y;\n      })\n      .on('end', function (event, d) {\n        if (interactionMode !== 'select') return;\n        if (!event.active) sim.alphaTarget(0);\n        d.position = { x: d.x, y: d.y };\n        d.fx = d.x;\n        d.fy = d.y;\n      });\n  }, [interactionMode]);\n\n  // Handle node click\n  const handleNodeClick = useCallback((event, d) => {\n    if (event.defaultPrevented) return;\n\n    if (interactionMode === 'connect') {\n      if (!linkingState.current.sourceNode) {\n        // First click: select source node\n        linkingState.current.sourceNode = d;\n        linkingState.current.isLinking = true;\n\n        // Highlight selected node\n        d3.select(svgRef.current).selectAll('.node').classed('selected-for-connection', false);\n        d3.select(event.currentTarget).classed('selected-for-connection', true);\n\n        // Remove any existing temp link\n        d3.select(svgRef.current).selectAll('.temp-link').remove();\n\n        // Create a new temporary link\n        linkingState.current.tempLink = d3.select(svgRef.current)\n          .append('line')\n          .attr('class', 'temp-link')\n          .attr('stroke', '#A8C3A4')\n          .attr('stroke-dasharray', '5,5')\n          .attr('stroke-width', 2);\n\n        // Update the temp link on mouse move\n        d3.select(svgRef.current).on('mousemove.temp-link', (e) => {\n          if (linkingState.current.isLinking && linkingState.current.sourceNode) {\n            const [x, y] = d3.pointer(e, svgRef.current);\n            linkingState.current.tempLink\n              .attr('x1', linkingState.current.sourceNode.x)\n              .attr('y1', linkingState.current.sourceNode.y)\n              .attr('x2', x)\n              .attr('y2', y);\n          }\n        });\n      } else {\n        // Second click: create the edge\n        const source = linkingState.current.sourceNode._id;\n        const target = d._id;\n        if (source && target && source !== target) {\n          onCreateEdge && onCreateEdge({ source, target });\n        }\n\n        // Cleanup linking state and visuals\n        d3.select(svgRef.current).selectAll('.temp-link').remove();\n        d3.select(svgRef.current).selectAll('.node').classed('selected-for-connection', false);\n        linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\n        d3.select(svgRef.current).on('mousemove.temp-link', null);\n      }\n    } else if (onNodeClick) {\n      onNodeClick(d);\n    }\n  }, [interactionMode, onNodeClick, onCreateEdge]);\n\n  // Handle node double click\n  const handleNodeDoubleClick = useCallback((event, d) => {\n    if (event.defaultPrevented) return;\n    if (interactionMode === 'select' && onNodeDoubleClick) {\n      onNodeDoubleClick(d);\n    }\n  }, [interactionMode, onNodeDoubleClick]);\n\n  // Handle edge click\n  const handleEdgeClick = useCallback((event, d) => {\n    event.stopPropagation();\n    if (interactionMode === 'select') {\n      d3.selectAll('.link').classed('selected', false);\n      d3.select(event.currentTarget).classed('selected', true);\n      setSelectedEdge(d);\n    }\n  }, [interactionMode]);\n\n  // Handle background click\n  const handleBackgroundClick = useCallback((event) => {\n    if (event.target.classList.contains('background')) {\n      d3.selectAll('.link').classed('selected', false);\n      setSelectedEdge(null);\n\n      // Cancel linking if in progress\n      if (linkingState.current.isLinking) {\n        d3.select(svgRef.current).selectAll('.temp-link').remove();\n        d3.select(svgRef.current).selectAll('.node').classed('selected-for-connection', false);\n        linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\n        d3.select(svgRef.current).on('mousemove.temp-link', null);\n      }\n\n      if (onBackgroundClick) {\n        onBackgroundClick();\n      }\n    }\n  }, [onBackgroundClick]);\n\n  // Main effect for D3 rendering and updates\n  useEffect(() => {\n    const currentSvg = svgRef.current;\n    if (!currentSvg) return;\n\n    const initialWidth = graphDimensionsRef.current.width;\n    const initialHeight = graphDimensionsRef.current.height;\n\n    if (!simulationRef.current) {\n      simulationRef.current = d3.forceSimulation(nodes)\n        .force('link', d3.forceLink(edges).id(d => d._id).distance(150))\n        .force('charge', d3.forceManyBody().strength(-500))\n        .force('center', d3.forceCenter(initialWidth / 2, initialHeight / 2));\n    } else {\n      simulationRef.current\n        .nodes(nodes)\n        .force('link', d3.forceLink(edges).id(d => d._id).distance(150));\n    }\n\n    simulationRef.current.alpha(0.3).restart();\n\n    const svg = d3.select(currentSvg);\n    const simulation = simulationRef.current;\n\n    if (!simulation) return;\n\n    svg.on('click', handleBackgroundClick);\n\n    let linkGroup = svg.select('g.links-group');\n    if (linkGroup.empty()) {\n      linkGroup = svg.append('g').attr('class', 'links-group');\n    }\n\n    let nodeGroup = svg.select('g.nodes-group');\n    if (nodeGroup.empty()) {\n      nodeGroup = svg.append('g').attr('class', 'nodes-group');\n    }\n\n    let defs = svg.select('defs');\n    if (defs.empty()) {\n      defs = svg.append('defs');\n    }\n    if (defs.select('#arrow').empty()) {\n      defs.append(\"marker\")\n        .attr(\"id\", \"arrow\")\n        .attr(\"viewBox\", \"0 -5 10 10\")\n        .attr(\"refX\", 20)\n        .attr(\"refY\", 0)\n        .attr(\"markerWidth\", 6)\n        .attr(\"markerHeight\", 6)\n        .attr(\"orient\", \"auto\")\n        .append(\"path\")\n        .attr(\"d\", \"M0,-5L10,0L0,5\")\n        .attr(\"fill\", \"#A8C3A4\");\n    }\n\n    const liveContainerWidth = currentSvg.clientWidth;\n    const liveContainerHeight = currentSvg.clientHeight;\n    graphDimensionsRef.current = { width: liveContainerWidth, height: liveContainerHeight };\n\n    if (stableViewBoxDimensionsRef.current.width === 0 && liveContainerWidth > 0) {\n      stableViewBoxDimensionsRef.current.width = liveContainerWidth;\n    }\n    if (stableViewBoxDimensionsRef.current.height === 0 && liveContainerHeight > 0) {\n      stableViewBoxDimensionsRef.current.height = liveContainerHeight;\n    }\n\n    const viewBoxWidth = stableViewBoxDimensionsRef.current.width > 0 ? stableViewBoxDimensionsRef.current.width : liveContainerWidth;\n    const viewBoxHeight = stableViewBoxDimensionsRef.current.height > 0 ? stableViewBoxDimensionsRef.current.height : liveContainerHeight;\n\n    svg\n      .attr('viewBox', [0, 0, viewBoxWidth, viewBoxHeight])\n      .attr('preserveAspectRatio', 'xMidYMid meet');\n\n    // Background rectangle to capture clicks for clearing selection/linking\n    let background = svg.select('rect.background');\n    if (background.empty()) {\n      background = svg.insert('rect', ':first-child')\n        .attr('class', 'background')\n        .attr('fill', 'transparent');\n    }\n    background\n      .attr('width', viewBoxWidth)\n      .attr('height', viewBoxHeight)\n      .on('click', handleBackgroundClick);\n\n    nodes.forEach(node => {\n      const hasValidPositionProp = node.position && typeof node.position.x === 'number' && typeof node.position.y === 'number';\n\n      if (hasValidPositionProp) {\n        node.x = node.position.x;\n        node.y = node.position.y;\n        node.fx = node.position.x;\n        node.fy = node.position.y;\n      } else {\n        node.x = typeof node.x === 'number' ? node.x : (Math.random() * (liveContainerWidth - 100) + 50);\n        node.y = typeof node.y === 'number' ? node.y : (Math.random() * (liveContainerHeight - 100) + 50);\n        node.fx = null;\n        node.fy = null;\n        node.position = { x: node.x, y: node.y };\n      }\n    });\n\n    // Initialize drag behavior\n    const drag = dragBehavior(simulationRef.current, currentSvg, viewBoxWidth, viewBoxHeight);\n\n    const nodeMap = {};\n    nodes.forEach(node => {\n      if (node && node._id) {\n        nodeMap[node._id] = node;\n      }\n    });\n\n    const validEdges = edges.filter(edge =>\n      edge &&\n      edge.source &&\n      edge.target &&\n      nodeMap[edge.source] &&\n      nodeMap[edge.target]\n    );\n\n    const processedEdges = validEdges.map(edge => ({\n      id: edge._id,\n      source: nodeMap[edge.source],\n      target: nodeMap[edge.target],\n      type: edge.type || 'related',\n      _id: edge._id\n    }));\n\n    simulationRef.current\n      .force('link', d3.forceLink(processedEdges).id(d => d._id))\n      .force('charge', d3.forceManyBody().strength(-500))\n      .force('center', d3.forceCenter(viewBoxWidth / 2, viewBoxHeight / 2))\n      .force('collision', d3.forceCollide().radius(40));\n\n    simulationRef.current.alpha(0.3).restart();\n\n    const link = linkGroup.selectAll('path.link').data(processedEdges, d => d.id);\n\n    link.exit().remove();\n\n    const linkEnter = link.enter().append('path')\n      .attr('class', 'link')\n      .attr('fill', 'none')\n      .attr('stroke', '#A8C3A4')\n      .attr('stroke-width', 2)\n      .attr('marker-end', 'url(#arrow)');\n\n    const linkMerged = linkEnter.merge(link)\n      .on('click', handleEdgeClick);\n\n    linkMerged\n      .attr('d', d => `M${d.source.x},${d.source.y}L${d.target.x},${d.target.y}`);\n\n    const node = nodeGroup.selectAll('.node')\n      .data(nodes, d => d._id);\n\n    node.exit().remove();\n\n    const nodeEnter = node.enter().append('g')\n      .attr('class', 'node')\n      .call(dragBehavior(simulationRef.current, currentSvg, viewBoxWidth, viewBoxHeight));\n\n    nodeEnter.append('circle')\n      .attr('r', 20)\n      .attr('fill', '#1B5E20')\n      .attr('stroke', '#1B5E20')\n      .attr('stroke-width', 1.5);\n\n    nodeEnter.append('text')\n      .attr('dx', 25)\n      .attr('dy', 4)\n      .text(d => d.title || d._id)\n      .style('font-size', '12px')\n      .style('fill', 'white');\n\n    const nodeMerged = nodeEnter.merge(node)\n      .call(dragBehavior(simulationRef.current, currentSvg, viewBoxWidth, viewBoxHeight))\n      .attr('transform', d => `translate(${d.x},${d.y})`)\n      .on('click', handleNodeClick)\n      .on('dblclick', handleNodeDoubleClick);\n\n    simulationRef.current.on('tick', () => {\n      linkMerged.attr('d', d => `M${d.source.x},${d.source.y}L${d.target.x},${d.target.y}`);\n      nodeMerged.attr('transform', d => `translate(${d.x},${d.y})`);\n    });\n\n    return () => {\n      simulationRef.current.stop();\n    };\n  }, [nodes, edges, interactionMode, onNodeClick, onNodeDoubleClick, onBackgroundClick]);\n\n  return (\n    <div className=\"graph-container\" style={{ width: '100%', height: '100%', padding: '1rem', boxSizing: 'border-box', position: 'relative' }}>\n      <svg ref={svgRef} className=\"graph\" style={{\n        width: '100%',\n        height: '100%',\n        pointerEvents: 'all'\n      }}>\n                <g className=\"links-group\"></g>\n        <g className=\"nodes-group\"></g>\n      </svg>\n      <div className=\"controls\" style={{\n        position: 'absolute',\n        bottom: '1rem',\n        left: '50%',\n        transform: 'translateX(-50%)',\n        display: 'flex',\n        gap: '1rem'\n      }}>\n        <button\n          onClick={onCreateNew}\n          className=\"button primary\"\n        >\n          <PlusIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\n          Create New Node\n        </button>\n        <ConnectButton\n          interactionMode={interactionMode}\n          setInteractionMode={setInteractionMode}\n          linkingState={linkingState}\n          svgRef={svgRef}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Graph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}