{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Mind Mosaic\\\\client\\\\src\\\\components\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport api from '../services/api.js';\nimport PlusIcon from './icons/PlusIcon';\nimport LinkIcon from './icons/LinkIcon';\nimport TrashIcon from './icons/TrashIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  nodes = [],\n  edges = [],\n  onNodeClick,\n  onNodeDoubleClick,\n  onCreateNew,\n  onCreateEdge,\n  onDeleteEdge,\n  interactionMode = 'select',\n  setInteractionMode,\n  onBackgroundClick,\n  isAnyPanelVisible /*, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete */\n}) => {\n  _s();\n  // Early return if no nodes or edges are provided\n  if (!nodes || !Array.isArray(nodes) || nodes.length === 0) {\n    return null;\n  }\n\n  // Validate edges and ensure they have required properties\n  const validEdges = edges.filter(edge => edge && edge.source && edge.target && nodes.some(n => n._id === edge.source) && nodes.some(n => n._id === edge.target));\n\n  // Create a node map for quick lookup\n  const nodeMap = new Map(nodes.map(node => [node._id, node]));\n  console.log(\"CURRENT INTERACTION MODE:\", interactionMode);\n  const svgRef = useRef(null);\n  const [isSvgMounted, setIsSvgMounted] = useState(false);\n  const simulationRef = useRef(); // Ref to store the D3 simulation instance\n  const linkingState = useRef({\n    sourceNode: null,\n    tempLink: null,\n    isLinking: false\n  });\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const clickTimeout = useRef(null);\n  const graphDimensionsRef = useRef({\n    width: 800,\n    height: 600\n  }); // For App.js, needs live dimensions\n  const stableViewBoxDimensionsRef = useRef({\n    width: 800,\n    height: 600\n  }); // For D3 viewBox, needs initial stable dimensions\n\n  // console.log('Graph received:', {\n  //   nodeCount: nodes.length,\n  //   edgeCount: edges.length,\n  //   mode: interactionMode\n  // });\n\n  // Debug: Log the actual nodes and edges data\n  // console.log('Nodes data:', JSON.stringify(nodes, null, 2));\n  // console.log('Edges data:', JSON.stringify(edges, null, 2));\n\n  console.log(\"Current onCreateEdge function:\", onCreateEdge);\n  const handleMouseMoveLinking = useCallback(event => {\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\n      return;\n    }\n    if (!svgRef.current) return;\n    const [x, y] = d3.pointer(event, svgRef.current);\n\n    // Update the temp link to follow the mouse\n    linkingState.current.tempLink.attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\n  }, [svgRef, linkingState]);\n  const handleMouseUpLinking = useCallback(event => {\n    if (linkingState.current.isLinking) {\n      var _linkingState$current5;\n      if (!svgRef.current) return;\n      const clickedDomElement = event.target;\n      const closestNodeGroup = clickedDomElement.closest('.node');\n      const isNode = !!closestNodeGroup;\n      if (!isNode) {\n        var _linkingState$current;\n        console.log('Clicked on empty space - cancelling connection');\n\n        // Clean up\n        (_linkingState$current = linkingState.current.tempLink) === null || _linkingState$current === void 0 ? void 0 : _linkingState$current.remove();\n\n        // Reset visual feedback\n        d3.selectAll('.node circle').attr('stroke', '#1B5E20').attr('stroke-width', 1.5);\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Get the target node ID\n      const targetNodeElement = d3.select(closestNodeGroup);\n      if (!targetNodeElement || !targetNodeElement.node()) {\n        var _linkingState$current2;\n        console.log('Failed to find target node element');\n        (_linkingState$current2 = linkingState.current.tempLink) === null || _linkingState$current2 === void 0 ? void 0 : _linkingState$current2.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n      const targetNode = targetNodeElement.datum();\n      if (!targetNode || !targetNode._id) {\n        var _linkingState$current3;\n        console.log('Failed to get valid target node data');\n        (_linkingState$current3 = linkingState.current.tempLink) === null || _linkingState$current3 === void 0 ? void 0 : _linkingState$current3.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Complete the connection\n      const sourceNode = linkingState.current.sourceNode;\n      if (sourceNode._id === targetNode._id) {\n        var _linkingState$current4;\n        console.log('Cannot connect node to itself');\n        (_linkingState$current4 = linkingState.current.tempLink) === null || _linkingState$current4 === void 0 ? void 0 : _linkingState$current4.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Create the edge\n      const edgeData = {\n        source: sourceNode._id,\n        target: targetNode._id,\n        type: 'related',\n        weight: 1\n      };\n\n      // Call the onCreateEdge callback\n      if (onCreateEdge) {\n        onCreateEdge(edgeData);\n      }\n\n      // Clean up\n      (_linkingState$current5 = linkingState.current.tempLink) === null || _linkingState$current5 === void 0 ? void 0 : _linkingState$current5.remove();\n      linkingState.current.isLinking = false;\n      linkingState.current.sourceNode = null;\n      linkingState.current.tempLink = null;\n\n      // Reset visual feedback\n      d3.selectAll('.node circle').attr('stroke', '#1B5E20').attr('stroke-width', 1.5);\n    }\n  }, [svgRef, linkingState, onCreateEdge]);\n  useEffect(() => {\n    const svgInstance = d3.select(svgRef.current);\n    if (interactionMode === 'connect') {\n      const onMouseMoveLinking = handleMouseMoveLinking;\n      const onMouseUpLinking = handleMouseUpLinking;\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\n      // console.log('Global linking listeners ADDED to SVG for connect mode.');\n\n      return () => {\n        svgInstance.on('mousemove.linking', null);\n        svgInstance.on('mouseup.linking', null);\n        // console.log('Global linking listeners REMOVED from SVG.');\n      };\n    } else {\n      svgInstance.on('mousemove.linking', null);\n      svgInstance.on('mouseup.linking', null);\n      if (linkingState.current.isLinking) {\n        var _linkingState$current6;\n        // console.log('Exited connect mode with active link: Forcibly cleaning up.');\n        (_linkingState$current6 = linkingState.current.tempLink) === null || _linkingState$current6 === void 0 ? void 0 : _linkingState$current6.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return () => {};\n    }\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]);\n\n  // Main effect for D3 rendering and updates\n  useEffect(() => {\n    // console.log('[Graph Effect - Main D3] Running. Nodes count:', nodes.length, 'Edges count:', edges.length);\n    // console.log('[Graph Effect - Main D3] Nodes prop:', JSON.parse(JSON.stringify(nodes)));\n    // console.log('[Graph Effect - Main D3] Edges prop:', JSON.parse(JSON.stringify(edges)));\n\n    const currentSvg = svgRef.current;\n    if (!currentSvg) {\n      // console.log('[Graph Effect - Main D3] SVG ref not available yet. Aborting D3 setup.');\n      return; // SVG element isn't rendered yet (e.g. nodes are empty)\n    }\n\n    // Initialize and update simulation\n    const initialWidth = graphDimensionsRef.current.width;\n    const initialHeight = graphDimensionsRef.current.height;\n    if (!simulationRef.current) {\n      simulationRef.current = d3.forceSimulation(nodes).force('link', d3.forceLink(edges).id(d => d._id).distance(150)).force('charge', d3.forceManyBody().strength(-500)).force('center', d3.forceCenter(initialWidth / 2, initialHeight / 2));\n    } else {\n      simulationRef.current.nodes(nodes).force('link', d3.forceLink(edges).id(d => d._id).distance(150));\n    }\n\n    // Start simulation with a gentle kick\n    simulationRef.current.alpha(0.3).restart();\n    const svg = d3.select(currentSvg); // Use currentSvg directly as it's confirmed not null\n    const simulation = simulationRef.current;\n\n    // This check should ideally not be hit if the above init logic works, but keep as safeguard\n    if (!simulation) {\n      // console.error('[Graph Effect - Main D3] Simulation ref is STILL not set! This is unexpected. Aborting.');\n      return;\n    }\n    // console.log('[Graph Effect - Main D3] Simulation instance retrieved:', simulation);\n\n    svg.on('click.diagnostic', event => {\n      // console.log('[SVG DIAGNOSTIC CLICK] SVG itself was clicked. Target:', event.target);\n    });\n\n    // 1. Manage the background rectangle: append if not exists, ensure attributes.\n    let backgroundRect = svg.select('rect.background');\n    if (backgroundRect.empty()) {\n      backgroundRect = svg.append('rect').attr('class', 'background');\n    }\n    backgroundRect // Ensure attributes are set on every run if they could change (e.g. dimensions)\n    .attr('width', '100%').attr('height', '100%').attr('fill', 'transparent').on('click', event => {\n      // console.log('[Background Rect Clicked Directly] Target:', event.target);\n      if (event.target.classList.contains('background')) {\n        d3.selectAll('.link').classed('selected', false);\n        setSelectedEdge(null);\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    });\n\n    // 2. Ensure dedicated groups for links and nodes exist (append if not).\n    let linkGroup = svg.select('g.links-group');\n    if (linkGroup.empty()) {\n      linkGroup = svg.append('g').attr('class', 'links-group');\n    }\n    let nodeGroup = svg.select('g.nodes-group');\n    if (nodeGroup.empty()) {\n      nodeGroup = svg.append('g').attr('class', 'nodes-group');\n    }\n\n    // 3. Manage defs for markers: append if not exists.\n    let defs = svg.select('defs');\n    if (defs.empty()) {\n      defs = svg.append('defs');\n    }\n    // Check if marker already exists before appending\n    if (defs.select('#arrow').empty()) {\n      defs.append(\"marker\").attr(\"id\", \"arrow\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 20).attr(\"refY\", 0).attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#A8C3A4\");\n    }\n\n    // Determine live dimensions for clamping and for App.js new node positioning\n    const liveContainerWidth = currentSvg.clientWidth;\n    const liveContainerHeight = currentSvg.clientHeight;\n    graphDimensionsRef.current = {\n      width: liveContainerWidth,\n      height: liveContainerHeight\n    }; // Update for App.js\n\n    // Set stable viewBox dimensions only once when valid live dimensions are first available\n    if (stableViewBoxDimensionsRef.current.width === 0 && liveContainerWidth > 0) {\n      stableViewBoxDimensionsRef.current.width = liveContainerWidth;\n      // console.log(`[Graph Dimensions] Stable viewBoxWidth SET to: ${liveContainerWidth}`);\n    }\n    if (stableViewBoxDimensionsRef.current.height === 0 && liveContainerHeight > 0) {\n      stableViewBoxDimensionsRef.current.height = liveContainerHeight;\n      // console.log(`[Graph Dimensions] Stable viewBoxHeight SET to: ${liveContainerHeight}`);\n    }\n\n    // Use stable dimensions for the viewBox if available, otherwise fallback to live (should only be for very first paint)\n    const viewBoxWidth = stableViewBoxDimensionsRef.current.width > 0 ? stableViewBoxDimensionsRef.current.width : liveContainerWidth;\n    const viewBoxHeight = stableViewBoxDimensionsRef.current.height > 0 ? stableViewBoxDimensionsRef.current.height : liveContainerHeight;\n\n    // console.log(`[Graph Dimensions] Using for viewBox: ${viewBoxWidth}x${viewBoxHeight}. Live: ${liveContainerWidth}x${liveContainerHeight}`);\n\n    svg.attr('viewBox', [0, 0, viewBoxWidth, viewBoxHeight]).attr('preserveAspectRatio', 'xMidYMid meet');\n\n    // Update node positions (fx, fy) before passing to simulation\n    nodes.forEach(node => {\n      const hasValidPositionProp = node.position && typeof node.position.x === 'number' && typeof node.position.y === 'number';\n      if (hasValidPositionProp) {\n        node.x = node.position.x;\n        node.y = node.position.y;\n        node.fx = node.position.x;\n        node.fy = node.position.y;\n      } else {\n        // Position from prop is invalid or missing. Node should be allowed to be placed by simulation.\n        // Or, if it's a new node without prior x/y, give it a random start.\n        node.x = typeof node.x === 'number' ? node.x : Math.random() * (liveContainerWidth - 100) + 50;\n        node.y = typeof node.y === 'number' ? node.y : Math.random() * (liveContainerHeight - 100) + 50;\n        node.fx = null; // Explicitly nullify fx/fy if position from prop is not definitive.\n        node.fy = null;\n\n        // For consistency or if other parts of the code expect node.position to exist:\n        // Update node.position to reflect the initial x,y that will be used by the simulation (if fx/fy are null).\n        // This ensures that if this node object is reused, its .position reflects its current state.\n        node.position = {\n          x: node.x,\n          y: node.y\n        };\n      }\n    });\n    // console.log('[D3 Data] Nodes after position init:', JSON.parse(JSON.stringify(nodes))); // Deep copy for logging\n\n    // Validate and process nodes and edges\n    const nodeMap = {};\n    nodes.forEach(node => {\n      if (node && node._id) {\n        nodeMap[node._id] = node;\n      }\n    });\n\n    // Filter out invalid edges\n    const validEdges = edges.filter(edge => edge && edge.source && edge.target && nodeMap[edge.source] && nodeMap[edge.target]);\n    const processedEdges = validEdges.map(edge => ({\n      id: edge._id,\n      source: nodeMap[edge.source],\n      target: nodeMap[edge.target],\n      type: edge.type || 'related',\n      _id: edge._id\n    }));\n\n    // Log edge processing for debugging\n    console.log('Processed edges count:', processedEdges.length);\n    console.log('Invalid edges count:', edges.length - validEdges.length);\n    // console.log('[D3 Data] Processed Edges:', JSON.parse(JSON.stringify(processedEdges)));\n\n    simulation.nodes(nodes).on('tick', ticked);\n    simulation.force('link').links(processedEdges);\n\n    // Handle link rendering\n    const linkElements = linkGroup.selectAll('path.link').data(edges, d => d.id).join('path').attr('class', 'link').attr('data-id', d => (d === null || d === void 0 ? void 0 : d.id) || '').attr('stroke', '#A8C3A4').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)').style('cursor', 'pointer').on('click', (event, d) => {\n      event.stopPropagation();\n      if (interactionMode === 'select') {\n        handleEdgeClick(event, d);\n      }\n    });\n\n    // Add error handling for click events\n    linkElements.on('click', (event, d) => {\n      try {\n        if (interactionMode === 'select') {\n          handleEdgeClick(event, d);\n        }\n      } catch (err) {\n        console.error('Error handling edge click:', err);\n      }\n    });\n    // console.log('[D3 Elements] linkElements count:', linkElements.size());\n\n    // Handle node rendering\n    const nodeElements = nodeGroup.selectAll('g.node').data(nodes, d => d._id).join(enter => {\n      const g = enter.append('g').attr('class', 'node').attr('data-id', d => d._id).style('cursor', 'pointer');\n\n      // Create circle with event handlers\n      const circle = g.append('circle').attr('r', 12).attr('fill', '#2E7D32').attr('stroke', '#1B5E20').attr('stroke-width', 1.5).style('pointer-events', 'all');\n\n      // Create text\n      g.append('text').text(d => d.title || d._id.substring(0, 6) || 'Node').attr('x', 16).attr('y', 5).attr('fill', '#FAF3E0').attr('text-anchor', 'start').style('pointer-events', 'none');\n\n      // Add click and double-click handlers to the group\n      g.on('click', (event, d) => {\n        event.stopPropagation();\n        if (interactionMode === 'select' && onNodeClick) {\n          onNodeClick(d);\n        }\n      }).on('dblclick', (event, d) => {\n        event.stopPropagation();\n        if (interactionMode === 'select' && onNodeDoubleClick) {\n          onNodeDoubleClick(d);\n        }\n      });\n\n      // Apply drag behavior to the circle\n      circle.call(dragBehavior(simulation, svg.node(), liveContainerWidth, liveContainerHeight));\n      return g;\n    }, update => {\n      // Apply drag behavior and event handlers\n      const circle = update.select('circle');\n      if (circle.node()) {\n        circle.call(dragBehavior(simulation, svg.node(), liveContainerWidth, liveContainerHeight));\n      }\n\n      // Update event handlers\n      update.on('click', (event, d) => {\n        event.stopPropagation();\n        if (interactionMode === 'select' && onNodeClick) {\n          onNodeClick(d);\n        }\n      });\n      update.on('dblclick', (event, d) => {\n        event.stopPropagation();\n        if (interactionMode === 'select' && onNodeDoubleClick) {\n          onNodeDoubleClick(d);\n        }\n      });\n      return update;\n    }, exit => {\n      // Remove nodes with null check\n      if (exit.node()) {\n        exit.remove();\n      }\n    });\n\n    // console.log('[D3 Elements] nodeElements count:', nodeElements.size());\n\n    // Update positions based on simulation\n    simulation.on('tick', () => {\n      linkElements.attr('d', d => {\n        const source = d.source;\n        const target = d.target;\n        return `M${source.x},${source.y}L${target.x},${target.y}`;\n      });\n      nodeElements.attr('transform', d => `translate(${d.x},${d.y})`);\n    });\n    function handleEdgeClick(event, d) {\n      event.stopPropagation();\n      if (interactionMode === 'select') {\n        d3.selectAll('.link').classed('selected', false);\n        d3.select(event.currentTarget).classed('selected', true);\n        setSelectedEdge(d);\n        if (onNodeClick) {\n          onNodeClick(null);\n        }\n      }\n    }\n    function ticked() {\n      // console.log('[Ticked] Simulation tick occurred.');\n      // if (nodes.length > 0 && nodes[0]) {\n      //     console.log(`[Ticked] Sample node 0: x=${nodes[0].x}, y=${nodes[0].y}, fx=${nodes[0].fx}, fy=${nodes[0].fy}`);\n      // }\n      // if (linkElements.size() > 0 && processedEdges.length > 0 && processedEdges[0]) {\n      //   const firstEdge = processedEdges[0];\n      //   if (firstEdge && firstEdge.source && typeof firstEdge.source.x === 'number' && firstEdge.target && typeof firstEdge.target.x === 'number') {\n      //        console.log(`[Ticked] Sample link 0 source: x=${firstEdge.source.x}, y=${firstEdge.source.y}. Target: x=${firstEdge.target.x}, y=${firstEdge.target.y}`);\n      //   }\n      // }\n\n      linkElements.attr('d', d => {\n        const sourceXPos = d.source.fx != null ? d.source.fx : d.source.x;\n        const sourceYPos = d.source.fy != null ? d.source.fy : d.source.y;\n        const targetXPos = d.target.fx != null ? d.target.fx : d.target.x;\n        const targetYPos = d.target.fy != null ? d.target.fy : d.target.y;\n        const sourceX = typeof sourceXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, sourceXPos)) : 0;\n        const sourceY = typeof sourceYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, sourceYPos)) : 0;\n        const targetX = typeof targetXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, targetXPos)) : 0;\n        const targetY = typeof targetYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, targetYPos)) : 0;\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\n      });\n      nodeElements.attr('transform', d => {\n        const xPos = d.fx != null ? d.fx : d.x;\n        const yPos = d.fy != null ? d.fy : d.y;\n        const x = typeof xPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, xPos)) : 0;\n        const y = typeof yPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, yPos)) : 0;\n        return `translate(${x},${y})`;\n      });\n    }\n\n    // TEMPORARILY COMMENT OUT THE SIMULATION KICK TO TEST ZOOM ISSUE\n    // simulation.alpha(0.3).restart(); // Previous state\n    simulation.alpha(0.1).restart(); // Re-enable with a gentle kick\n    simulation.alphaTarget(0); // Ensure this runs to keep the simulation cool\n    console.log('[Graph Effect - Main D3] Gentle simulation kick (alpha 0.1) re-enabled. Alpha target set to 0.');\n\n    // Cleanup for the main useEffect\n    return () => {\n      svg.on('click.diagnostic', null);\n      // Do not stop simulation here as it's persistent. Stop on unmount.\n      if (linkingState.current.tempLink) {\n        linkingState.current.tempLink.remove();\n      }\n      linkingState.current = {\n        sourceNode: null,\n        tempLink: null,\n        isLinking: false\n      };\n      if (clickTimeout.current) {\n        clearTimeout(clickTimeout.current);\n      }\n    };\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, onDeleteEdge, interactionMode, setInteractionMode, onBackgroundClick, isAnyPanelVisible, handleMouseMoveLinking, handleMouseUpLinking]);\n\n  // Add a separate useEffect for stopping the simulation on component unmount\n  useEffect(() => {\n    return () => {\n      if (simulationRef.current) {\n        console.log('[Graph Unmount] Stopping simulation.');\n        simulationRef.current.stop();\n      }\n    };\n  }, []); // Empty dependency array means this runs once on mount for the return (cleanup) function\n\n  // Handle keyboard delete for selected edges\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n          onDeleteEdge(selectedEdge._id);\n          setSelectedEdge(null);\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedEdge, onDeleteEdge]);\n  useEffect(() => {\n    if (svgRef.current) {\n      setIsSvgMounted(true);\n    }\n    return () => setIsSvgMounted(false);\n  }, []);\n\n  // Node click handler\n  const handleNodeClick = useCallback((event, d) => {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    // Handle connection mode\n    if (interactionMode === 'connect') {\n      if (!linkingState.current.isLinking) {\n        // Start a new connection\n        linkingState.current = {\n          isLinking: true,\n          sourceNode: d,\n          tempLink: d3.select(svgRef.current).append('path').attr('class', 'temp-link').attr('d', `M${d.x},${d.y}L${d.x},${d.y}`).attr('stroke-dasharray', '5,5').attr('stroke', '#B87333').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)').raise()\n        };\n\n        // Add visual feedback to the source node\n        d3.select(event.currentTarget).select('circle').attr('stroke', '#B87333').attr('stroke-width', 3);\n      } else {\n        var _linkingState$current7, _linkingState$current8;\n        // Complete the connection\n        const targetNode = d;\n        if (((_linkingState$current7 = linkingState.current.sourceNode) === null || _linkingState$current7 === void 0 ? void 0 : _linkingState$current7._id) !== (targetNode === null || targetNode === void 0 ? void 0 : targetNode._id)) {\n          const edgeData = {\n            source: linkingState.current.sourceNode._id,\n            target: targetNode._id,\n            type: 'related',\n            weight: 1\n          };\n          if (onCreateEdge) {\n            onCreateEdge(edgeData);\n          }\n        }\n\n        // Clean up\n        (_linkingState$current8 = linkingState.current.tempLink) === null || _linkingState$current8 === void 0 ? void 0 : _linkingState$current8.remove();\n\n        // Reset visual feedback\n        d3.selectAll('.node circle').attr('stroke', '#1B5E20').attr('stroke-width', 1.5);\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return;\n    }\n\n    // Handle select mode\n    if (interactionMode === 'select') {\n      // Single click opens node viewer\n      if (onNodeClick) {\n        onNodeClick(d);\n      }\n    }\n  }, [interactionMode, linkingState, onCreateEdge, svgRef]);\n  function dragBehavior(sim, svgInstance, containerWidth, containerHeight) {\n    return d3.drag().on('start', function (event, d) {\n      if (interactionMode !== 'select') return;\n      event.sourceEvent.stopPropagation();\n      if (!event.active) sim.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }).on('drag', function (event, d) {\n      if (interactionMode !== 'select') return;\n      event.sourceEvent.stopPropagation();\n      d.fx = event.x;\n      d.fy = event.y;\n    }).on('end', function (event, d) {\n      if (interactionMode !== 'select') return;\n      if (!event.active) sim.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    });\n  }\n\n  // Connect button component\n  const ConnectButton = ({\n    interactionMode,\n    setInteractionMode,\n    linkingState,\n    svgRef\n  }) => {\n    const handleClick = () => {\n      const newMode = interactionMode === 'connect' ? 'select' : 'connect';\n      setInteractionMode(newMode);\n      if (newMode === 'select') {\n        d3.select(svgRef.current).selectAll('.temp-link').remove();\n        linkingState.current = {\n          sourceNode: null,\n          tempLink: null,\n          isLinking: false\n        };\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      className: `button accent ${interactionMode === 'connect' ? 'active' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(LinkIcon, {\n        style: {\n          width: '1rem',\n          height: '1rem',\n          marginRight: '0.5rem'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 9\n      }, this), interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 681,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-container\",\n    style: {\n      width: '100%',\n      height: '100%',\n      padding: '1rem',\n      boxSizing: 'border-box',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      className: \"graph\",\n      style: {\n        width: '100%',\n        height: '100%',\n        pointerEvents: 'all'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"links-group\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"nodes-group\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      style: {\n        position: 'absolute',\n        bottom: '1rem',\n        left: '50%',\n        transform: 'translateX(-50%)',\n        display: 'flex',\n        gap: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onCreateNew,\n        className: \"button primary\",\n        children: [/*#__PURE__*/_jsxDEV(PlusIcon, {\n          style: {\n            width: '1rem',\n            height: '1rem',\n            marginRight: '0.5rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 11\n        }, this), \"Create New Node\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ConnectButton, {\n        interactionMode: interactionMode,\n        setInteractionMode: setInteractionMode,\n        linkingState: linkingState,\n        svgRef: svgRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 701,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 692,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"DJ3+vHvDj2XJ4dVkUOUyfpvdzPU=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","d3","api","PlusIcon","LinkIcon","TrashIcon","jsxDEV","_jsxDEV","Graph","nodes","edges","onNodeClick","onNodeDoubleClick","onCreateNew","onCreateEdge","onDeleteEdge","interactionMode","setInteractionMode","onBackgroundClick","isAnyPanelVisible","_s","Array","isArray","length","validEdges","filter","edge","source","target","some","n","_id","nodeMap","Map","map","node","console","log","svgRef","isSvgMounted","setIsSvgMounted","simulationRef","linkingState","sourceNode","tempLink","isLinking","selectedEdge","setSelectedEdge","clickTimeout","graphDimensionsRef","width","height","stableViewBoxDimensionsRef","handleMouseMoveLinking","event","current","x","y","pointer","attr","handleMouseUpLinking","_linkingState$current5","clickedDomElement","closestNodeGroup","closest","isNode","_linkingState$current","remove","selectAll","targetNodeElement","select","_linkingState$current2","targetNode","datum","_linkingState$current3","_linkingState$current4","edgeData","type","weight","svgInstance","onMouseMoveLinking","onMouseUpLinking","on","_linkingState$current6","currentSvg","initialWidth","initialHeight","forceSimulation","force","forceLink","id","d","distance","forceManyBody","strength","forceCenter","alpha","restart","svg","simulation","backgroundRect","empty","append","classList","contains","classed","linkGroup","nodeGroup","defs","liveContainerWidth","clientWidth","liveContainerHeight","clientHeight","viewBoxWidth","viewBoxHeight","forEach","hasValidPositionProp","position","fx","fy","Math","random","processedEdges","ticked","links","linkElements","data","join","style","stopPropagation","handleEdgeClick","err","error","nodeElements","enter","g","circle","text","title","substring","call","dragBehavior","update","exit","currentTarget","sourceXPos","sourceYPos","targetXPos","targetYPos","sourceX","max","min","sourceY","targetX","targetY","xPos","yPos","alphaTarget","clearTimeout","stop","handleKeyDown","key","window","addEventListener","removeEventListener","handleNodeClick","defaultPrevented","raise","_linkingState$current7","_linkingState$current8","sim","containerWidth","containerHeight","drag","sourceEvent","active","ConnectButton","handleClick","newMode","onClick","className","children","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","padding","boxSizing","ref","pointerEvents","bottom","left","transform","display","gap","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Mind Mosaic/client/src/components/graph.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport api from '../services/api.js';\nimport PlusIcon from './icons/PlusIcon';\nimport LinkIcon from './icons/LinkIcon';\nimport TrashIcon from './icons/TrashIcon';\n\nconst Graph = ({ nodes = [], edges = [], onNodeClick, onNodeDoubleClick, onCreateNew, onCreateEdge, onDeleteEdge, interactionMode = 'select', setInteractionMode, onBackgroundClick, isAnyPanelVisible /*, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete */ }) => {\n  // Early return if no nodes or edges are provided\n  if (!nodes || !Array.isArray(nodes) || nodes.length === 0) {\n    return null;\n  }\n\n  // Validate edges and ensure they have required properties\n  const validEdges = edges.filter(edge => \n    edge && edge.source && edge.target && \n    nodes.some(n => n._id === edge.source) && \n    nodes.some(n => n._id === edge.target)\n  );\n\n  // Create a node map for quick lookup\n  const nodeMap = new Map(nodes.map(node => [node._id, node]));\n\n  console.log(\"CURRENT INTERACTION MODE:\", interactionMode);\n  const svgRef = useRef(null);\n  const [isSvgMounted, setIsSvgMounted] = useState(false);\n  const simulationRef = useRef(); // Ref to store the D3 simulation instance\n  const linkingState = useRef({ sourceNode: null, tempLink: null, isLinking: false });\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const clickTimeout = useRef(null);\n  const graphDimensionsRef = useRef({ width: 800, height: 600 }); // For App.js, needs live dimensions\n  const stableViewBoxDimensionsRef = useRef({ width: 800, height: 600 }); // For D3 viewBox, needs initial stable dimensions\n\n\n\n  // console.log('Graph received:', {\n  //   nodeCount: nodes.length,\n  //   edgeCount: edges.length,\n  //   mode: interactionMode\n  // });\n\n  // Debug: Log the actual nodes and edges data\n  // console.log('Nodes data:', JSON.stringify(nodes, null, 2));\n  // console.log('Edges data:', JSON.stringify(edges, null, 2));\n\n  console.log(\"Current onCreateEdge function:\", onCreateEdge);\n\n  const handleMouseMoveLinking = useCallback((event) => {\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\n      return;\n    }\n\n    if (!svgRef.current) return;\n    \n    const [x, y] = d3.pointer(event, svgRef.current);\n    \n    // Update the temp link to follow the mouse\n    linkingState.current.tempLink\n      .attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\n  }, [svgRef, linkingState]);\n\n  const handleMouseUpLinking = useCallback((event) => {\n    if (linkingState.current.isLinking) {\n      if (!svgRef.current) return;\n      \n      const clickedDomElement = event.target;\n      const closestNodeGroup = clickedDomElement.closest('.node');\n      const isNode = !!closestNodeGroup;\n\n      if (!isNode) {\n        console.log('Clicked on empty space - cancelling connection');\n        \n        // Clean up\n        linkingState.current.tempLink?.remove();\n        \n        // Reset visual feedback\n        d3.selectAll('.node circle')\n          .attr('stroke', '#1B5E20')\n          .attr('stroke-width', 1.5);\n        \n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Get the target node ID\n      const targetNodeElement = d3.select(closestNodeGroup);\n      if (!targetNodeElement || !targetNodeElement.node()) {\n        console.log('Failed to find target node element');\n        linkingState.current.tempLink?.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      const targetNode = targetNodeElement.datum();\n      if (!targetNode || !targetNode._id) {\n        console.log('Failed to get valid target node data');\n        linkingState.current.tempLink?.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Complete the connection\n      const sourceNode = linkingState.current.sourceNode;\n      if (sourceNode._id === targetNode._id) {\n        console.log('Cannot connect node to itself');\n        linkingState.current.tempLink?.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Create the edge\n      const edgeData = {\n        source: sourceNode._id,\n        target: targetNode._id,\n        type: 'related',\n        weight: 1\n      };\n\n      // Call the onCreateEdge callback\n      if (onCreateEdge) {\n        onCreateEdge(edgeData);\n      }\n\n      // Clean up\n      linkingState.current.tempLink?.remove();\n      linkingState.current.isLinking = false;\n      linkingState.current.sourceNode = null;\n      linkingState.current.tempLink = null;\n\n      // Reset visual feedback\n      d3.selectAll('.node circle')\n        .attr('stroke', '#1B5E20')\n        .attr('stroke-width', 1.5);\n    }\n  }, [svgRef, linkingState, onCreateEdge]);\n\n  useEffect(() => {\n    const svgInstance = d3.select(svgRef.current);\n\n    if (interactionMode === 'connect') {\n      const onMouseMoveLinking = handleMouseMoveLinking;\n      const onMouseUpLinking = handleMouseUpLinking;\n\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\n      // console.log('Global linking listeners ADDED to SVG for connect mode.');\n\n      return () => {\n        svgInstance.on('mousemove.linking', null);\n        svgInstance.on('mouseup.linking', null);\n        // console.log('Global linking listeners REMOVED from SVG.');\n      };\n    } else {\n      svgInstance.on('mousemove.linking', null);\n      svgInstance.on('mouseup.linking', null);\n\n      if (linkingState.current.isLinking) {\n        // console.log('Exited connect mode with active link: Forcibly cleaning up.');\n        linkingState.current.tempLink?.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return () => { };\n    }\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]);\n\n  // Main effect for D3 rendering and updates\n  useEffect(() => {\n    // console.log('[Graph Effect - Main D3] Running. Nodes count:', nodes.length, 'Edges count:', edges.length);\n    // console.log('[Graph Effect - Main D3] Nodes prop:', JSON.parse(JSON.stringify(nodes)));\n    // console.log('[Graph Effect - Main D3] Edges prop:', JSON.parse(JSON.stringify(edges)));\n\n    const currentSvg = svgRef.current;\n    if (!currentSvg) {\n      // console.log('[Graph Effect - Main D3] SVG ref not available yet. Aborting D3 setup.');\n      return; // SVG element isn't rendered yet (e.g. nodes are empty)\n    }\n\n    // Initialize and update simulation\n    const initialWidth = graphDimensionsRef.current.width;\n    const initialHeight = graphDimensionsRef.current.height;\n    \n    if (!simulationRef.current) {\n      simulationRef.current = d3.forceSimulation(nodes)\n        .force('link', d3.forceLink(edges).id(d => d._id).distance(150))\n        .force('charge', d3.forceManyBody().strength(-500))\n        .force('center', d3.forceCenter(initialWidth / 2, initialHeight / 2));\n    } else {\n      simulationRef.current\n        .nodes(nodes)\n        .force('link', d3.forceLink(edges).id(d => d._id).distance(150));\n    }\n    \n    // Start simulation with a gentle kick\n    simulationRef.current.alpha(0.3).restart();\n\n    const svg = d3.select(currentSvg); // Use currentSvg directly as it's confirmed not null\n    const simulation = simulationRef.current;\n\n    // This check should ideally not be hit if the above init logic works, but keep as safeguard\n    if (!simulation) {\n      // console.error('[Graph Effect - Main D3] Simulation ref is STILL not set! This is unexpected. Aborting.');\n      return;\n    }\n    // console.log('[Graph Effect - Main D3] Simulation instance retrieved:', simulation);\n\n    svg.on('click.diagnostic', (event) => {\n      // console.log('[SVG DIAGNOSTIC CLICK] SVG itself was clicked. Target:', event.target);\n    });\n\n    // 1. Manage the background rectangle: append if not exists, ensure attributes.\n    let backgroundRect = svg.select('rect.background');\n    if (backgroundRect.empty()) {\n      backgroundRect = svg.append('rect')\n        .attr('class', 'background');\n    }\n    backgroundRect // Ensure attributes are set on every run if they could change (e.g. dimensions)\n      .attr('width', '100%')\n      .attr('height', '100%')\n      .attr('fill', 'transparent')\n      .on('click', (event) => {\n        // console.log('[Background Rect Clicked Directly] Target:', event.target);\n        if (event.target.classList.contains('background')) {\n          d3.selectAll('.link').classed('selected', false);\n          setSelectedEdge(null);\n          if (onBackgroundClick) {\n            onBackgroundClick();\n          }\n        }\n      });\n\n    // 2. Ensure dedicated groups for links and nodes exist (append if not).\n    let linkGroup = svg.select('g.links-group');\n    if (linkGroup.empty()) {\n      linkGroup = svg.append('g').attr('class', 'links-group');\n    }\n    let nodeGroup = svg.select('g.nodes-group');\n    if (nodeGroup.empty()) {\n      nodeGroup = svg.append('g').attr('class', 'nodes-group');\n    }\n\n    // 3. Manage defs for markers: append if not exists.\n    let defs = svg.select('defs');\n    if (defs.empty()) {\n      defs = svg.append('defs');\n    }\n    // Check if marker already exists before appending\n    if (defs.select('#arrow').empty()) {\n      defs.append(\"marker\")\n        .attr(\"id\", \"arrow\")\n        .attr(\"viewBox\", \"0 -5 10 10\")\n        .attr(\"refX\", 20)\n        .attr(\"refY\", 0)\n        .attr(\"markerWidth\", 6)\n        .attr(\"markerHeight\", 6)\n        .attr(\"orient\", \"auto\")\n        .append(\"path\")\n        .attr(\"d\", \"M0,-5L10,0L0,5\")\n        .attr(\"fill\", \"#A8C3A4\");\n    }\n\n    // Determine live dimensions for clamping and for App.js new node positioning\n    const liveContainerWidth = currentSvg.clientWidth;\n    const liveContainerHeight = currentSvg.clientHeight;\n    graphDimensionsRef.current = { width: liveContainerWidth, height: liveContainerHeight }; // Update for App.js\n\n    // Set stable viewBox dimensions only once when valid live dimensions are first available\n    if (stableViewBoxDimensionsRef.current.width === 0 && liveContainerWidth > 0) {\n      stableViewBoxDimensionsRef.current.width = liveContainerWidth;\n      // console.log(`[Graph Dimensions] Stable viewBoxWidth SET to: ${liveContainerWidth}`);\n    }\n    if (stableViewBoxDimensionsRef.current.height === 0 && liveContainerHeight > 0) {\n      stableViewBoxDimensionsRef.current.height = liveContainerHeight;\n      // console.log(`[Graph Dimensions] Stable viewBoxHeight SET to: ${liveContainerHeight}`);\n    }\n\n    // Use stable dimensions for the viewBox if available, otherwise fallback to live (should only be for very first paint)\n    const viewBoxWidth = stableViewBoxDimensionsRef.current.width > 0 ? stableViewBoxDimensionsRef.current.width : liveContainerWidth;\n    const viewBoxHeight = stableViewBoxDimensionsRef.current.height > 0 ? stableViewBoxDimensionsRef.current.height : liveContainerHeight;\n\n    // console.log(`[Graph Dimensions] Using for viewBox: ${viewBoxWidth}x${viewBoxHeight}. Live: ${liveContainerWidth}x${liveContainerHeight}`);\n\n    svg\n      .attr('viewBox', [0, 0, viewBoxWidth, viewBoxHeight])\n      .attr('preserveAspectRatio', 'xMidYMid meet');\n\n    // Update node positions (fx, fy) before passing to simulation\n    nodes.forEach(node => {\n      const hasValidPositionProp = node.position && typeof node.position.x === 'number' && typeof node.position.y === 'number';\n\n      if (hasValidPositionProp) {\n        node.x = node.position.x;\n        node.y = node.position.y;\n        node.fx = node.position.x;\n        node.fy = node.position.y;\n      } else {\n        // Position from prop is invalid or missing. Node should be allowed to be placed by simulation.\n        // Or, if it's a new node without prior x/y, give it a random start.\n        node.x = typeof node.x === 'number' ? node.x : (Math.random() * (liveContainerWidth - 100) + 50);\n        node.y = typeof node.y === 'number' ? node.y : (Math.random() * (liveContainerHeight - 100) + 50);\n        node.fx = null; // Explicitly nullify fx/fy if position from prop is not definitive.\n        node.fy = null;\n\n        // For consistency or if other parts of the code expect node.position to exist:\n        // Update node.position to reflect the initial x,y that will be used by the simulation (if fx/fy are null).\n        // This ensures that if this node object is reused, its .position reflects its current state.\n        node.position = { x: node.x, y: node.y };\n      }\n    });\n    // console.log('[D3 Data] Nodes after position init:', JSON.parse(JSON.stringify(nodes))); // Deep copy for logging\n\n    // Validate and process nodes and edges\n    const nodeMap = {};\n    nodes.forEach(node => {\n      if (node && node._id) {\n        nodeMap[node._id] = node;\n      }\n    });\n\n    // Filter out invalid edges\n    const validEdges = edges.filter(edge => \n      edge && \n      edge.source && \n      edge.target && \n      nodeMap[edge.source] && \n      nodeMap[edge.target]\n    );\n\n    const processedEdges = validEdges.map(edge => ({\n      id: edge._id,\n      source: nodeMap[edge.source],\n      target: nodeMap[edge.target],\n      type: edge.type || 'related',\n      _id: edge._id\n    }));\n\n    // Log edge processing for debugging\n    console.log('Processed edges count:', processedEdges.length);\n    console.log('Invalid edges count:', edges.length - validEdges.length);\n    // console.log('[D3 Data] Processed Edges:', JSON.parse(JSON.stringify(processedEdges)));\n\n    simulation\n      .nodes(nodes)\n      .on('tick', ticked);\n    simulation.force('link').links(processedEdges);\n\n    // Handle link rendering\n    const linkElements = linkGroup.selectAll('path.link')\n      .data(edges, d => d.id)\n      .join('path')\n      .attr('class', 'link')\n      .attr('data-id', d => d?.id || '')\n      .attr('stroke', '#A8C3A4')\n      .attr('stroke-width', 2)\n      .attr('fill', 'none')\n      .attr('marker-end', 'url(#arrow)')\n      .style('cursor', 'pointer')\n      .on('click', (event, d) => {\n        event.stopPropagation();\n        if (interactionMode === 'select') {\n          handleEdgeClick(event, d);\n        }\n      });\n\n    // Add error handling for click events\n    linkElements.on('click', (event, d) => {\n      try {\n        if (interactionMode === 'select') {\n          handleEdgeClick(event, d);\n        }\n      } catch (err) {\n        console.error('Error handling edge click:', err);\n      }\n    });\n    // console.log('[D3 Elements] linkElements count:', linkElements.size());\n\n    // Handle node rendering\n    const nodeElements = nodeGroup.selectAll('g.node')\n      .data(nodes, d => d._id)\n      .join(\n        enter => {\n          const g = enter.append('g')\n            .attr('class', 'node')\n            .attr('data-id', d => d._id)\n            .style('cursor', 'pointer');\n\n          // Create circle with event handlers\n          const circle = g.append('circle')\n            .attr('r', 12)\n            .attr('fill', '#2E7D32')\n            .attr('stroke', '#1B5E20')\n            .attr('stroke-width', 1.5)\n            .style('pointer-events', 'all');\n\n          // Create text\n          g.append('text')\n            .text(d => d.title || d._id.substring(0, 6) || 'Node')\n            .attr('x', 16)\n            .attr('y', 5)\n            .attr('fill', '#FAF3E0')\n            .attr('text-anchor', 'start')\n            .style('pointer-events', 'none');\n\n          // Add click and double-click handlers to the group\n          g.on('click', (event, d) => {\n            event.stopPropagation();\n            if (interactionMode === 'select' && onNodeClick) {\n              onNodeClick(d);\n            }\n          })\n          .on('dblclick', (event, d) => {\n            event.stopPropagation();\n            if (interactionMode === 'select' && onNodeDoubleClick) {\n              onNodeDoubleClick(d);\n            }\n          });\n\n          // Apply drag behavior to the circle\n          circle.call(dragBehavior(simulation, svg.node(), liveContainerWidth, liveContainerHeight));\n\n          return g;\n        },\n        update => {\n          // Apply drag behavior and event handlers\n          const circle = update.select('circle');\n          if (circle.node()) {\n            circle.call(dragBehavior(simulation, svg.node(), liveContainerWidth, liveContainerHeight));\n          }\n\n          // Update event handlers\n          update.on('click', (event, d) => {\n            event.stopPropagation();\n            if (interactionMode === 'select' && onNodeClick) {\n              onNodeClick(d);\n            }\n          });\n          update.on('dblclick', (event, d) => {\n            event.stopPropagation();\n            if (interactionMode === 'select' && onNodeDoubleClick) {\n              onNodeDoubleClick(d);\n            }\n          })\n\n          return update;\n        },\n        exit => {\n          // Remove nodes with null check\n          if (exit.node()) {\n            exit.remove();\n          }\n        }\n      );\n\n    // console.log('[D3 Elements] nodeElements count:', nodeElements.size());\n\n    // Update positions based on simulation\n    simulation.on('tick', () => {\n      linkElements.attr('d', d => {\n        const source = d.source;\n        const target = d.target;\n        return `M${source.x},${source.y}L${target.x},${target.y}`;\n      });\n\n      nodeElements.attr('transform', d => `translate(${d.x},${d.y})`);\n    });\n\n    function handleEdgeClick(event, d) {\n      event.stopPropagation();\n      if (interactionMode === 'select') {\n        d3.selectAll('.link').classed('selected', false);\n        d3.select(event.currentTarget).classed('selected', true);\n        setSelectedEdge(d);\n        if (onNodeClick) {\n          onNodeClick(null);\n        }\n      }\n    }\n\n    function ticked() {\n      // console.log('[Ticked] Simulation tick occurred.');\n      // if (nodes.length > 0 && nodes[0]) {\n      //     console.log(`[Ticked] Sample node 0: x=${nodes[0].x}, y=${nodes[0].y}, fx=${nodes[0].fx}, fy=${nodes[0].fy}`);\n      // }\n      // if (linkElements.size() > 0 && processedEdges.length > 0 && processedEdges[0]) {\n      //   const firstEdge = processedEdges[0];\n      //   if (firstEdge && firstEdge.source && typeof firstEdge.source.x === 'number' && firstEdge.target && typeof firstEdge.target.x === 'number') {\n      //        console.log(`[Ticked] Sample link 0 source: x=${firstEdge.source.x}, y=${firstEdge.source.y}. Target: x=${firstEdge.target.x}, y=${firstEdge.target.y}`);\n      //   }\n      // }\n\n      linkElements.attr('d', d => {\n        const sourceXPos = d.source.fx != null ? d.source.fx : d.source.x;\n        const sourceYPos = d.source.fy != null ? d.source.fy : d.source.y;\n        const targetXPos = d.target.fx != null ? d.target.fx : d.target.x;\n        const targetYPos = d.target.fy != null ? d.target.fy : d.target.y;\n\n        const sourceX = typeof sourceXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, sourceXPos)) : 0;\n        const sourceY = typeof sourceYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, sourceYPos)) : 0;\n        const targetX = typeof targetXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, targetXPos)) : 0;\n        const targetY = typeof targetYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, targetYPos)) : 0;\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\n      });\n\n      nodeElements.attr('transform', d => {\n        const xPos = d.fx != null ? d.fx : d.x;\n        const yPos = d.fy != null ? d.fy : d.y;\n\n        const x = typeof xPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, xPos)) : 0;\n        const y = typeof yPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, yPos)) : 0;\n        return `translate(${x},${y})`;\n      });\n    }\n\n    // TEMPORARILY COMMENT OUT THE SIMULATION KICK TO TEST ZOOM ISSUE\n    // simulation.alpha(0.3).restart(); // Previous state\n    simulation.alpha(0.1).restart(); // Re-enable with a gentle kick\n    simulation.alphaTarget(0); // Ensure this runs to keep the simulation cool\n    console.log('[Graph Effect - Main D3] Gentle simulation kick (alpha 0.1) re-enabled. Alpha target set to 0.');\n\n    // Cleanup for the main useEffect\n    return () => {\n      svg.on('click.diagnostic', null);\n      // Do not stop simulation here as it's persistent. Stop on unmount.\n      if (linkingState.current.tempLink) {\n        linkingState.current.tempLink.remove();\n      }\n      linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\n      if (clickTimeout.current) {\n        clearTimeout(clickTimeout.current);\n      }\n    };\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, onDeleteEdge, interactionMode, setInteractionMode, onBackgroundClick, isAnyPanelVisible, handleMouseMoveLinking, handleMouseUpLinking]);\n\n  // Add a separate useEffect for stopping the simulation on component unmount\n  useEffect(() => {\n    return () => {\n      if (simulationRef.current) {\n        console.log('[Graph Unmount] Stopping simulation.');\n        simulationRef.current.stop();\n      }\n    };\n  }, []); // Empty dependency array means this runs once on mount for the return (cleanup) function\n\n  // Handle keyboard delete for selected edges\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n          onDeleteEdge(selectedEdge._id);\n          setSelectedEdge(null);\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedEdge, onDeleteEdge]);\n\n  useEffect(() => {\n    if (svgRef.current) {\n      setIsSvgMounted(true);\n    }\n    return () => setIsSvgMounted(false);\n  }, []);\n\n  // Node click handler\n  const handleNodeClick = useCallback((event, d) => {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    // Handle connection mode\n    if (interactionMode === 'connect') {\n      if (!linkingState.current.isLinking) {\n        // Start a new connection\n        linkingState.current = {\n          isLinking: true,\n          sourceNode: d,\n          tempLink: d3.select(svgRef.current).append('path')\n            .attr('class', 'temp-link')\n            .attr('d', `M${d.x},${d.y}L${d.x},${d.y}`)\n            .attr('stroke-dasharray', '5,5')\n            .attr('stroke', '#B87333')\n            .attr('stroke-width', 2)\n            .attr('fill', 'none')\n            .attr('marker-end', 'url(#arrow)')\n            .raise()\n        };\n        \n        // Add visual feedback to the source node\n        d3.select(event.currentTarget).select('circle')\n          .attr('stroke', '#B87333')\n          .attr('stroke-width', 3);\n      } else {\n        // Complete the connection\n        const targetNode = d;\n        if (linkingState.current.sourceNode?._id !== targetNode?._id) {\n          const edgeData = {\n            source: linkingState.current.sourceNode._id,\n            target: targetNode._id,\n            type: 'related',\n            weight: 1\n          };\n          \n          if (onCreateEdge) {\n            onCreateEdge(edgeData);\n          }\n        }\n        \n        // Clean up\n        linkingState.current.tempLink?.remove();\n        \n        // Reset visual feedback\n        d3.selectAll('.node circle')\n          .attr('stroke', '#1B5E20')\n          .attr('stroke-width', 1.5);\n          \n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return;\n    }\n\n    // Handle select mode\n    if (interactionMode === 'select') {\n      // Single click opens node viewer\n      if (onNodeClick) {\n        onNodeClick(d);\n      }\n    }\n  }, [interactionMode, linkingState, onCreateEdge, svgRef]);\n\n  function dragBehavior(sim, svgInstance, containerWidth, containerHeight) {\n    return d3.drag()\n      .on('start', function(event, d) {\n        if (interactionMode !== 'select') return;\n        event.sourceEvent.stopPropagation();\n        if (!event.active) sim.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      })\n      .on('drag', function(event, d) {\n        if (interactionMode !== 'select') return;\n        event.sourceEvent.stopPropagation();\n        d.fx = event.x;\n        d.fy = event.y;\n      })\n      .on('end', function(event, d) {\n        if (interactionMode !== 'select') return;\n        if (!event.active) sim.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      });\n  }\n\n  // Connect button component\n  const ConnectButton = ({ interactionMode, setInteractionMode, linkingState, svgRef }) => {\n    const handleClick = () => {\n      const newMode = interactionMode === 'connect' ? 'select' : 'connect';\n      setInteractionMode(newMode);\n      if (newMode === 'select') {\n        d3.select(svgRef.current).selectAll('.temp-link').remove();\n        linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\n      }\n    };\n\n    return (\n      <button\n        onClick={handleClick}\n        className={`button accent ${interactionMode === 'connect' ? 'active' : ''}`}\n      >\n        <LinkIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\n        {interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes'}\n      </button>\n    );\n  };\n\n  return (\n    <div className=\"graph-container\" style={{ width: '100%', height: '100%', padding: '1rem', boxSizing: 'border-box', position: 'relative' }}>\n      <svg ref={svgRef} className=\"graph\" style={{ \n        width: '100%', \n        height: '100%', \n        pointerEvents: 'all'\n      }}>\n        <g className=\"links-group\"></g>\n        <g className=\"nodes-group\"></g>\n      </svg>\n      <div className=\"controls\" style={{ \n        position: 'absolute', \n        bottom: '1rem', \n        left: '50%', \n        transform: 'translateX(-50%)',\n        display: 'flex',\n        gap: '1rem'\n      }}>\n        <button\n          onClick={onCreateNew}\n          className=\"button primary\"\n        >\n          <PlusIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\n          Create New Node\n        </button>\n        <ConnectButton \n          interactionMode={interactionMode}\n          setInteractionMode={setInteractionMode}\n          linkingState={linkingState}\n          svgRef={svgRef}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Graph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}