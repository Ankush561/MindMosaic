{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Mind Mosaic\\\\client\\\\src\\\\components\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport api from '../services/api.js';\nimport PlusIcon from './icons/PlusIcon';\nimport LinkIcon from './icons/LinkIcon';\nimport TrashIcon from './icons/TrashIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  nodes = [],\n  edges = [],\n  onNodeClick,\n  onNodeDoubleClick,\n  onCreateNew,\n  onCreateEdge,\n  onDeleteEdge,\n  interactionMode = 'select',\n  setInteractionMode,\n  onBackgroundClick,\n  isAnyPanelVisible /*, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete */\n}) => {\n  _s();\n  console.log(\"CURRENT INTERACTION MODE:\", interactionMode);\n  const svgRef = useRef(null);\n  const [isSvgMounted, setIsSvgMounted] = useState(false);\n  const simulationRef = useRef(); // Ref to store the D3 simulation instance\n  const linkingState = useRef({\n    sourceNode: null,\n    tempLink: null,\n    isLinking: false\n  });\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const clickTimeout = useRef(null);\n  const graphDimensionsRef = useRef({\n    width: 800,\n    height: 600\n  }); // For App.js, needs live dimensions\n  const stableViewBoxDimensionsRef = useRef({\n    width: 0,\n    height: 0\n  }); // For D3 viewBox, needs initial stable dimensions\n\n  // console.log('Graph received:', {\n  //   nodeCount: nodes.length,\n  //   edgeCount: edges.length,\n  //   mode: interactionMode\n  // });\n\n  // Debug: Log the actual nodes and edges data\n  // console.log('Nodes data:', JSON.stringify(nodes, null, 2));\n  // console.log('Edges data:', JSON.stringify(edges, null, 2));\n\n  console.log(\"Current onCreateEdge function:\", onCreateEdge);\n  const handleMouseMoveLinking = useCallback(event => {\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\n      return;\n    }\n    if (!svgRef.current) return;\n    const [x, y] = d3.pointer(event, svgRef.current);\n\n    // Update the temp link to follow the mouse\n    linkingState.current.tempLink.attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\n  }, [svgRef, linkingState]);\n  const handleMouseUpLinking = useCallback(event => {\n    if (linkingState.current.isLinking) {\n      var _linkingState$current4;\n      if (!svgRef.current) return;\n      const clickedDomElement = event.target;\n      const closestNodeGroup = clickedDomElement.closest('.node');\n      const isNode = !!closestNodeGroup;\n      if (!isNode) {\n        var _linkingState$current;\n        console.log('Clicked on empty space - cancelling connection');\n\n        // Clean up\n        (_linkingState$current = linkingState.current.tempLink) === null || _linkingState$current === void 0 ? void 0 : _linkingState$current.remove();\n\n        // Reset visual feedback\n        d3.selectAll('.node circle').attr('stroke', '#1B5E20').attr('stroke-width', 1.5);\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Get the target node ID\n      const targetNode = d3.select(closestNodeGroup).datum();\n      if (!targetNode) {\n        var _linkingState$current2;\n        console.log('Failed to get target node data');\n        (_linkingState$current2 = linkingState.current.tempLink) === null || _linkingState$current2 === void 0 ? void 0 : _linkingState$current2.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Complete the connection\n      const sourceNode = linkingState.current.sourceNode;\n      if (sourceNode._id === targetNode._id) {\n        var _linkingState$current3;\n        console.log('Cannot connect node to itself');\n        (_linkingState$current3 = linkingState.current.tempLink) === null || _linkingState$current3 === void 0 ? void 0 : _linkingState$current3.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Create the edge\n      const edgeData = {\n        source: sourceNode._id,\n        target: targetNode._id,\n        type: 'related',\n        weight: 1\n      };\n\n      // Call the onCreateEdge callback\n      if (onCreateEdge) {\n        onCreateEdge(edgeData);\n      }\n\n      // Clean up\n      (_linkingState$current4 = linkingState.current.tempLink) === null || _linkingState$current4 === void 0 ? void 0 : _linkingState$current4.remove();\n      linkingState.current.isLinking = false;\n      linkingState.current.sourceNode = null;\n      linkingState.current.tempLink = null;\n\n      // Reset visual feedback\n      d3.selectAll('.node circle').attr('stroke', '#1B5E20').attr('stroke-width', 1.5);\n    }\n  }, [svgRef, linkingState, onCreateEdge]);\n  // onCreateEdge might be relevant if we decide to complete link here\n\n  useEffect(() => {\n    const svgInstance = d3.select(svgRef.current);\n    if (interactionMode === 'connect') {\n      const onMouseMoveLinking = handleMouseMoveLinking;\n      const onMouseUpLinking = handleMouseUpLinking;\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\n      // console.log('Global linking listeners ADDED to SVG for connect mode.');\n\n      return () => {\n        svgInstance.on('mousemove.linking', null);\n        svgInstance.on('mouseup.linking', null);\n        // console.log('Global linking listeners REMOVED from SVG.');\n      };\n    } else {\n      svgInstance.on('mousemove.linking', null);\n      svgInstance.on('mouseup.linking', null);\n      if (linkingState.current.isLinking) {\n        var _linkingState$current5;\n        // console.log('Exited connect mode with active link: Forcibly cleaning up.');\n        (_linkingState$current5 = linkingState.current.tempLink) === null || _linkingState$current5 === void 0 ? void 0 : _linkingState$current5.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return () => {};\n    }\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]);\n\n  // Main effect for D3 rendering and updates\n  useEffect(() => {\n    // console.log('[Graph Effect - Main D3] Running. Nodes count:', nodes.length, 'Edges count:', edges.length);\n    // console.log('[Graph Effect - Main D3] Nodes prop:', JSON.parse(JSON.stringify(nodes)));\n    // console.log('[Graph Effect - Main D3] Edges prop:', JSON.parse(JSON.stringify(edges)));\n\n    const currentSvg = svgRef.current;\n    if (!currentSvg) {\n      // console.log('[Graph Effect - Main D3] SVG ref not available yet. Aborting D3 setup.');\n      return; // SVG element isn't rendered yet (e.g. nodes are empty)\n    }\n\n    // Initialize simulation IF it doesn't exist yet AND currentSvg is available\n    if (!simulationRef.current) {\n      // console.log('[Graph Effect - Main D3] Initializing simulation.');\n      const initialWidth = graphDimensionsRef.current.width;\n      const initialHeight = graphDimensionsRef.current.height;\n      simulationRef.current = d3.forceSimulation().force('link', d3.forceLink([]).id(d => d._id).distance(150)).alpha(0).alphaDecay(1).alphaTarget(0);\n      // console.log('[Graph Effect - Main D3] Simulation initialized:', simulationRef.current);\n    }\n    const svg = d3.select(currentSvg); // Use currentSvg directly as it's confirmed not null\n    const simulation = simulationRef.current;\n\n    // This check should ideally not be hit if the above init logic works, but keep as safeguard\n    if (!simulation) {\n      // console.error('[Graph Effect - Main D3] Simulation ref is STILL not set! This is unexpected. Aborting.');\n      return;\n    }\n    // console.log('[Graph Effect - Main D3] Simulation instance retrieved:', simulation);\n\n    svg.on('click.diagnostic', event => {\n      // console.log('[SVG DIAGNOSTIC CLICK] SVG itself was clicked. Target:', event.target);\n    });\n\n    // 1. Manage the background rectangle: append if not exists, ensure attributes.\n    let backgroundRect = svg.select('rect.background');\n    if (backgroundRect.empty()) {\n      backgroundRect = svg.append('rect').attr('class', 'background');\n    }\n    backgroundRect // Ensure attributes are set on every run if they could change (e.g. dimensions)\n    .attr('width', '100%').attr('height', '100%').attr('fill', 'transparent').on('click', event => {\n      // console.log('[Background Rect Clicked Directly] Target:', event.target);\n      if (event.target.classList.contains('background')) {\n        d3.selectAll('.link').classed('selected', false);\n        setSelectedEdge(null);\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    });\n\n    // 2. Ensure dedicated groups for links and nodes exist (append if not).\n    let linkGroup = svg.select('g.links-group');\n    if (linkGroup.empty()) {\n      linkGroup = svg.append('g').attr('class', 'links-group');\n    }\n    let nodeGroup = svg.select('g.nodes-group');\n    if (nodeGroup.empty()) {\n      nodeGroup = svg.append('g').attr('class', 'nodes-group');\n    }\n\n    // 3. Manage defs for markers: append if not exists.\n    let defs = svg.select('defs');\n    if (defs.empty()) {\n      defs = svg.append('defs');\n    }\n    // Check if marker already exists before appending\n    if (defs.select('#arrow').empty()) {\n      defs.append(\"marker\").attr(\"id\", \"arrow\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 20).attr(\"refY\", 0).attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#A8C3A4\");\n    }\n\n    // Determine live dimensions for clamping and for App.js new node positioning\n    const liveContainerWidth = currentSvg.clientWidth;\n    const liveContainerHeight = currentSvg.clientHeight;\n    graphDimensionsRef.current = {\n      width: liveContainerWidth,\n      height: liveContainerHeight\n    }; // Update for App.js\n\n    // Set stable viewBox dimensions only once when valid live dimensions are first available\n    if (stableViewBoxDimensionsRef.current.width === 0 && liveContainerWidth > 0) {\n      stableViewBoxDimensionsRef.current.width = liveContainerWidth;\n      // console.log(`[Graph Dimensions] Stable viewBoxWidth SET to: ${liveContainerWidth}`);\n    }\n    if (stableViewBoxDimensionsRef.current.height === 0 && liveContainerHeight > 0) {\n      stableViewBoxDimensionsRef.current.height = liveContainerHeight;\n      // console.log(`[Graph Dimensions] Stable viewBoxHeight SET to: ${liveContainerHeight}`);\n    }\n\n    // Use stable dimensions for the viewBox if available, otherwise fallback to live (should only be for very first paint)\n    const viewBoxWidth = stableViewBoxDimensionsRef.current.width > 0 ? stableViewBoxDimensionsRef.current.width : liveContainerWidth;\n    const viewBoxHeight = stableViewBoxDimensionsRef.current.height > 0 ? stableViewBoxDimensionsRef.current.height : liveContainerHeight;\n\n    // console.log(`[Graph Dimensions] Using for viewBox: ${viewBoxWidth}x${viewBoxHeight}. Live: ${liveContainerWidth}x${liveContainerHeight}`);\n\n    svg.attr('viewBox', [0, 0, viewBoxWidth, viewBoxHeight]).attr('preserveAspectRatio', 'xMidYMid meet');\n\n    // Update node positions (fx, fy) before passing to simulation\n    nodes.forEach(node => {\n      const hasValidPositionProp = node.position && typeof node.position.x === 'number' && typeof node.position.y === 'number';\n      if (hasValidPositionProp) {\n        node.x = node.position.x;\n        node.y = node.position.y;\n        node.fx = node.position.x;\n        node.fy = node.position.y;\n      } else {\n        // Position from prop is invalid or missing. Node should be allowed to be placed by simulation.\n        // Or, if it's a new node without prior x/y, give it a random start.\n        node.x = typeof node.x === 'number' ? node.x : Math.random() * (liveContainerWidth - 100) + 50;\n        node.y = typeof node.y === 'number' ? node.y : Math.random() * (liveContainerHeight - 100) + 50;\n        node.fx = null; // Explicitly nullify fx/fy if position from prop is not definitive.\n        node.fy = null;\n\n        // For consistency or if other parts of the code expect node.position to exist:\n        // Update node.position to reflect the initial x,y that will be used by the simulation (if fx/fy are null).\n        // This ensures that if this node object is reused, its .position reflects its current state.\n        node.position = {\n          x: node.x,\n          y: node.y\n        };\n      }\n    });\n    // console.log('[D3 Data] Nodes after position init:', JSON.parse(JSON.stringify(nodes))); // Deep copy for logging\n\n    const nodeMap = {};\n    nodes.forEach(node => {\n      nodeMap[node._id] = node;\n    });\n    const processedEdges = edges.map(edge => ({\n      id: edge._id,\n      source: nodeMap[edge.source] || edge.source,\n      target: nodeMap[edge.target] || edge.target,\n      type: edge.type,\n      _id: edge._id\n    }));\n    // console.log('[D3 Data] Processed Edges:', JSON.parse(JSON.stringify(processedEdges)));\n\n    simulation.nodes(nodes).on('tick', ticked);\n    simulation.force('link').links(processedEdges);\n    const linkElements = linkGroup.selectAll('path.link').data(processedEdges, d => d.id).join('path').attr('class', 'link').attr('data-id', d => d.id).attr('stroke', '#A8C3A4').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)');\n    linkElements.on('click', handleEdgeClick);\n    // console.log('[D3 Elements] linkElements count:', linkElements.size());\n\n    const nodeElements = nodeGroup.selectAll('g.node').data(nodes, d => d._id).join(enter => {\n      var _g$datum;\n      const g = enter.append('g').attr('class', 'node').attr('data-id', d => d._id);\n\n      // Only apply drag behavior in select mode\n      if (interactionMode === 'select') {\n        g.call(dragBehavior(simulation, svg.node(), liveContainerWidth, liveContainerHeight));\n      }\n      g.append('circle').attr('r', 12).attr('fill', '#2E7D32').attr('stroke', '#1B5E20').attr('stroke-width', 1.5).style('pointer-events', 'all');\n      g.append('text').text(d => {\n        var _d$_id;\n        return d.title || ((_d$_id = d._id) === null || _d$_id === void 0 ? void 0 : _d$_id.substring(0, 6));\n      }).attr('x', 16).attr('y', 5).attr('fill', '#FAF3E0').attr('text-anchor', 'start');\n\n      // Make sure click events are attached\n      g.on('click', handleNodeClick);\n      console.log('🟢 Attached click handler to node:', (_g$datum = g.datum()) === null || _g$datum === void 0 ? void 0 : _g$datum._id);\n      return g;\n    }, update => {\n      // Re-apply or remove drag behavior based on current mode\n      if (interactionMode === 'select') {\n        update.call(dragBehavior(simulation, svg.node(), liveContainerWidth, liveContainerHeight));\n      } else {\n        // Remove drag behavior\n        update.on('.drag', null);\n      }\n\n      // Make sure click events are still attached\n      update.on('click', handleNodeClick);\n      return update;\n    }, exit => exit.remove());\n\n    // console.log('[D3 Elements] nodeElements count:', nodeElements.size());\n\n    const circles = nodeElements.select('circle');\n    circles.on('click', handleNodeClick).style('pointer-events', 'all');\n    function handleEdgeClick(event, d) {\n      console.log('[Edge Click] Attempted on edge:', d.id, 'Mode:', interactionMode);\n      event.stopPropagation();\n      if (interactionMode === 'select') {\n        d3.selectAll('.link').classed('selected', false);\n        d3.select(event.currentTarget).classed('selected', true);\n        setSelectedEdge(d);\n        if (onNodeClick) {\n          // This onNodeClick(null) is to deselect any selected node\n          console.log(\"handleEdgeClick: Calling onNodeClick(null) to deselect node.\");\n          onNodeClick(null); // Deselects any selected node in App.js\n        } else {\n          console.log(\"handleEdgeClick: onNodeClick prop is undefined (cannot deselect node).\");\n        }\n      } else {\n        console.log(\"handleEdgeClick: Not in 'select' mode. Current mode:\", interactionMode, \"No action taken.\");\n      }\n    }\n    function ticked() {\n      // console.log('[Ticked] Simulation tick occurred.');\n      // if (nodes.length > 0 && nodes[0]) {\n      //     console.log(`[Ticked] Sample node 0: x=${nodes[0].x}, y=${nodes[0].y}, fx=${nodes[0].fx}, fy=${nodes[0].fy}`);\n      // }\n      // if (linkElements.size() > 0 && processedEdges.length > 0 && processedEdges[0]) {\n      //   const firstEdge = processedEdges[0];\n      //   if (firstEdge && firstEdge.source && typeof firstEdge.source.x === 'number' && firstEdge.target && typeof firstEdge.target.x === 'number') {\n      //        console.log(`[Ticked] Sample link 0 source: x=${firstEdge.source.x}, y=${firstEdge.source.y}. Target: x=${firstEdge.target.x}, y=${firstEdge.target.y}`);\n      //   }\n      // }\n\n      linkElements.attr('d', d => {\n        const sourceXPos = d.source.fx != null ? d.source.fx : d.source.x;\n        const sourceYPos = d.source.fy != null ? d.source.fy : d.source.y;\n        const targetXPos = d.target.fx != null ? d.target.fx : d.target.x;\n        const targetYPos = d.target.fy != null ? d.target.fy : d.target.y;\n        const sourceX = typeof sourceXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, sourceXPos)) : 0;\n        const sourceY = typeof sourceYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, sourceYPos)) : 0;\n        const targetX = typeof targetXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, targetXPos)) : 0;\n        const targetY = typeof targetYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, targetYPos)) : 0;\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\n      });\n      nodeElements.attr('transform', d => {\n        const xPos = d.fx != null ? d.fx : d.x;\n        const yPos = d.fy != null ? d.fy : d.y;\n        const x = typeof xPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, xPos)) : 0;\n        const y = typeof yPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, yPos)) : 0;\n        return `translate(${x},${y})`;\n      });\n    }\n\n    // TEMPORARILY COMMENT OUT THE SIMULATION KICK TO TEST ZOOM ISSUE\n    // simulation.alpha(0.3).restart(); // Previous state\n    simulation.alpha(0.1).restart(); // Re-enable with a gentle kick\n    simulation.alphaTarget(0); // Ensure this runs to keep the simulation cool\n    console.log('[Graph Effect - Main D3] Gentle simulation kick (alpha 0.1) re-enabled. Alpha target set to 0.');\n\n    // Cleanup for the main useEffect\n    return () => {\n      svg.on('click.diagnostic', null);\n      // Do not stop simulation here as it's persistent. Stop on unmount.\n      if (linkingState.current.tempLink) {\n        linkingState.current.tempLink.remove();\n      }\n      linkingState.current = {\n        sourceNode: null,\n        tempLink: null,\n        isLinking: false\n      };\n      if (clickTimeout.current) {\n        clearTimeout(clickTimeout.current);\n      }\n    };\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, onDeleteEdge, interactionMode, setInteractionMode, onBackgroundClick, isAnyPanelVisible, handleMouseMoveLinking, handleMouseUpLinking]);\n\n  // Add a separate useEffect for stopping the simulation on component unmount\n  useEffect(() => {\n    return () => {\n      if (simulationRef.current) {\n        console.log('[Graph Unmount] Stopping simulation.');\n        simulationRef.current.stop();\n      }\n    };\n  }, []); // Empty dependency array means this runs once on mount for the return (cleanup) function\n\n  // Handle keyboard delete for selected edges\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n          onDeleteEdge(selectedEdge._id);\n          setSelectedEdge(null);\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedEdge, onDeleteEdge]);\n  useEffect(() => {\n    if (svgRef.current) {\n      setIsSvgMounted(true);\n    }\n    return () => setIsSvgMounted(false);\n  }, []);\n  function dragBehavior(sim, svgInstance, containerWidth, containerHeight) {\n    // Only return drag behavior if we're in select mode\n    if (interactionMode !== 'select') {\n      return d3.drag(); // Return empty drag behavior\n    }\n    return d3.drag().on('start', function (event, d) {\n      event.sourceEvent.stopPropagation();\n      if (!event.active) sim.alphaTarget(0.3).restart();\n      d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\n      d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\n    }).on('drag', function (event, d) {\n      event.sourceEvent.stopPropagation();\n      d.fx = Math.max(15, Math.min(containerWidth - 15, event.x));\n      d.fy = Math.max(15, Math.min(containerHeight - 15, event.y));\n      d.position = {\n        x: d.fx,\n        y: d.fy\n      };\n    }).on('end', async function (event, d) {\n      const wasClick = Math.abs(event.dx) < 2 && Math.abs(event.dy) < 2;\n      if (!wasClick && api !== null && api !== void 0 && api.updateNode) {\n        await api.updateNode(d._id, {\n          position: {\n            x: d.fx,\n            y: d.fy\n          }\n        }).catch(err => console.error(\"Failed to update node position:\", err));\n      }\n    });\n  }\n  const handleNodeClick = (event, d) => {\n    console.log(`[Node Click Handler] Node: ${d._id}, Mode: ${interactionMode}`);\n    console.log(`[Node Click Handler] Current linking state:`, linkingState.current);\n    console.log(`[Node Click Handler] onCreateEdge function:`, onCreateEdge);\n    if (event.defaultPrevented) {\n      console.log('[Node Click Handler] DefaultPrevented, returning early');\n      return;\n    }\n    if (interactionMode === 'connect') {\n      console.log('[Node Click Handler] In connect mode');\n      if (!linkingState.current.isLinking) {\n        // Start a new connection\n        console.log('🟢 STARTING connection from node:', d._id);\n        linkingState.current = {\n          isLinking: true,\n          sourceNode: d,\n          tempLink: d3.select(svgRef.current).append('path').attr('class', 'temp-link').attr('d', `M${d.x},${d.y}L${d.x},${d.y}`).attr('stroke-dasharray', '5,5').attr('stroke', '#B87333').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)').raise()\n        };\n        console.log('🟢 Linking state after start:', linkingState.current);\n\n        // Add visual feedback to the source node\n        d3.select(event.currentTarget).select('circle').attr('stroke', '#B87333').attr('stroke-width', 3);\n      } else {\n        var _linkingState$current6, _linkingState$current7, _linkingState$current8;\n        // Complete the connection\n        console.log('🔵 COMPLETING connection');\n        console.log('🔵 Source node:', (_linkingState$current6 = linkingState.current.sourceNode) === null || _linkingState$current6 === void 0 ? void 0 : _linkingState$current6._id);\n        console.log('🔵 Target node:', d._id);\n        if (linkingState.current.sourceNode && linkingState.current.sourceNode._id !== d._id) {\n          console.log('🟢 Creating edge from', linkingState.current.sourceNode._id, 'to', d._id);\n          console.log('🟢 onCreateEdge function exists:', !!onCreateEdge);\n          if (onCreateEdge) {\n            try {\n              console.log('🟢 Calling onCreateEdge...');\n              const result = onCreateEdge(linkingState.current.sourceNode._id, d._id);\n              console.log('🟢 onCreateEdge result:', result);\n            } catch (error) {\n              console.error('🔴 Error calling onCreateEdge:', error);\n            }\n          } else {\n            console.error('🔴 onCreateEdge is not defined!');\n          }\n        } else if (((_linkingState$current7 = linkingState.current.sourceNode) === null || _linkingState$current7 === void 0 ? void 0 : _linkingState$current7._id) === d._id) {\n          console.log('🟡 Cannot connect node to itself');\n        } else {\n          console.log('🔴 No source node found');\n        }\n\n        // Clean up\n        console.log('🔵 Cleaning up linking state');\n        (_linkingState$current8 = linkingState.current.tempLink) === null || _linkingState$current8 === void 0 ? void 0 : _linkingState$current8.remove();\n\n        // Reset visual feedback\n        d3.selectAll('.node circle').attr('stroke', '#1B5E20').attr('stroke-width', 1.5);\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return;\n    }\n\n    // Rest of your existing select mode logic...\n  };\n\n  // Handle edge deletion\n  const handleDeleteEdge = () => {\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n      onDeleteEdge(selectedEdge._id);\n      setSelectedEdge(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-wrapper\",\n    onClick: e => {\n      console.log('[Graph Wrapper Click] Target:', e.target, 'CurrentTarget:', e.currentTarget);\n      if (e.target === e.currentTarget) {\n        console.log('[Graph Wrapper Click] Click was directly on wrapper.');\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    },\n    children: [nodes && nodes.length > 0 ? /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      className: \"graph-svg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-svg empty-graph-placeholder\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-graph-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This canvas is empty. Start by creating a new node!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-controls\",\n      children: [selectedEdge && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteEdge,\n        className: \"button danger\",\n        children: [/*#__PURE__*/_jsxDEV(TrashIcon, {\n          style: {\n            width: '1rem',\n            height: '1rem',\n            marginRight: '0.5rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 13\n        }, this), \"Remove Edge\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            // Pass current dimensions when calling onCreateNew\n            if (onCreateNew) {\n              onCreateNew({\n                graphWidth: graphDimensionsRef.current.width,\n                graphHeight: graphDimensionsRef.current.height\n              });\n            }\n          },\n          className: \"button primary\",\n          children: [/*#__PURE__*/_jsxDEV(PlusIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 13\n          }, this), \"Create New Node\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            const newMode = interactionMode === 'connect' ? 'select' : 'connect';\n            setInteractionMode(newMode);\n\n            // Reset any existing connection state\n            if (newMode === 'select') {\n              d3.select(svgRef.current).selectAll('.temp-link').remove();\n              linkingState.current = {\n                sourceNode: null,\n                tempLink: null,\n                isLinking: false\n              };\n            }\n          },\n          className: `button accent ${interactionMode === 'connect' ? 'active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(LinkIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 677,\n            columnNumber: 3\n          }, this), interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 2\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 615,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"iP/yIuDoXxtRaNRpN0l1DhbZ/go=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","d3","api","PlusIcon","LinkIcon","TrashIcon","jsxDEV","_jsxDEV","Graph","nodes","edges","onNodeClick","onNodeDoubleClick","onCreateNew","onCreateEdge","onDeleteEdge","interactionMode","setInteractionMode","onBackgroundClick","isAnyPanelVisible","_s","console","log","svgRef","isSvgMounted","setIsSvgMounted","simulationRef","linkingState","sourceNode","tempLink","isLinking","selectedEdge","setSelectedEdge","clickTimeout","graphDimensionsRef","width","height","stableViewBoxDimensionsRef","handleMouseMoveLinking","event","current","x","y","pointer","attr","handleMouseUpLinking","_linkingState$current4","clickedDomElement","target","closestNodeGroup","closest","isNode","_linkingState$current","remove","selectAll","targetNode","select","datum","_linkingState$current2","_id","_linkingState$current3","edgeData","source","type","weight","svgInstance","onMouseMoveLinking","onMouseUpLinking","on","_linkingState$current5","currentSvg","initialWidth","initialHeight","forceSimulation","force","forceLink","id","d","distance","alpha","alphaDecay","alphaTarget","svg","simulation","backgroundRect","empty","append","classList","contains","classed","linkGroup","nodeGroup","defs","liveContainerWidth","clientWidth","liveContainerHeight","clientHeight","viewBoxWidth","viewBoxHeight","forEach","node","hasValidPositionProp","position","fx","fy","Math","random","nodeMap","processedEdges","map","edge","ticked","links","linkElements","data","join","handleEdgeClick","nodeElements","enter","_g$datum","g","call","dragBehavior","style","text","_d$_id","title","substring","handleNodeClick","update","exit","circles","stopPropagation","currentTarget","sourceXPos","sourceYPos","targetXPos","targetYPos","sourceX","max","min","sourceY","targetX","targetY","xPos","yPos","restart","clearTimeout","stop","handleKeyDown","key","window","addEventListener","removeEventListener","sim","containerWidth","containerHeight","drag","sourceEvent","active","wasClick","abs","dx","dy","updateNode","catch","err","error","defaultPrevented","raise","_linkingState$current6","_linkingState$current7","_linkingState$current8","result","handleDeleteEdge","className","onClick","e","children","length","ref","fileName","_jsxFileName","lineNumber","columnNumber","marginRight","graphWidth","graphHeight","newMode","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Mind Mosaic/client/src/components/graph.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\r\nimport * as d3 from 'd3';\r\nimport './Graph.css';\r\nimport api from '../services/api.js';\r\nimport PlusIcon from './icons/PlusIcon';\r\nimport LinkIcon from './icons/LinkIcon';\r\nimport TrashIcon from './icons/TrashIcon';\r\n\r\nconst Graph = ({ nodes = [], edges = [], onNodeClick, onNodeDoubleClick, onCreateNew, onCreateEdge, onDeleteEdge, interactionMode = 'select', setInteractionMode, onBackgroundClick, isAnyPanelVisible /*, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete */ }) => {\r\n  console.log(\"CURRENT INTERACTION MODE:\", interactionMode);\r\n  const svgRef = useRef(null);\r\n  const [isSvgMounted, setIsSvgMounted] = useState(false);\r\n  const simulationRef = useRef(); // Ref to store the D3 simulation instance\r\n  const linkingState = useRef({ sourceNode: null, tempLink: null, isLinking: false });\r\n  const [selectedEdge, setSelectedEdge] = useState(null);\r\n  const clickTimeout = useRef(null);\r\n  const graphDimensionsRef = useRef({ width: 800, height: 600 }); // For App.js, needs live dimensions\r\n  const stableViewBoxDimensionsRef = useRef({ width: 0, height: 0 }); // For D3 viewBox, needs initial stable dimensions\r\n\r\n  // console.log('Graph received:', {\r\n  //   nodeCount: nodes.length,\r\n  //   edgeCount: edges.length,\r\n  //   mode: interactionMode\r\n  // });\r\n\r\n  // Debug: Log the actual nodes and edges data\r\n  // console.log('Nodes data:', JSON.stringify(nodes, null, 2));\r\n  // console.log('Edges data:', JSON.stringify(edges, null, 2));\r\n\r\n  console.log(\"Current onCreateEdge function:\", onCreateEdge);\r\n\r\n  const handleMouseMoveLinking = useCallback((event) => {\r\n  if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\r\n    return;\r\n  }\r\n\r\n  if (!svgRef.current) return;\r\n  \r\n  const [x, y] = d3.pointer(event, svgRef.current);\r\n  \r\n  // Update the temp link to follow the mouse\r\n  linkingState.current.tempLink\r\n    .attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\r\n    \r\n}, [svgRef, linkingState]);\r\n\r\n\r\nconst handleMouseUpLinking = useCallback((event) => {\r\n  if (linkingState.current.isLinking) {\r\n    if (!svgRef.current) return;\r\n    \r\n    const clickedDomElement = event.target;\r\n    const closestNodeGroup = clickedDomElement.closest('.node');\r\n    const isNode = !!closestNodeGroup;\r\n\r\n    if (!isNode) {\r\n      console.log('Clicked on empty space - cancelling connection');\r\n      \r\n      // Clean up\r\n      linkingState.current.tempLink?.remove();\r\n      \r\n      // Reset visual feedback\r\n      d3.selectAll('.node circle')\r\n        .attr('stroke', '#1B5E20')\r\n        .attr('stroke-width', 1.5);\r\n      \r\n      linkingState.current.isLinking = false;\r\n      linkingState.current.sourceNode = null;\r\n      linkingState.current.tempLink = null;\r\n      return;\r\n    }\r\n\r\n    // Get the target node ID\r\n    const targetNode = d3.select(closestNodeGroup).datum();\r\n    if (!targetNode) {\r\n      console.log('Failed to get target node data');\r\n      linkingState.current.tempLink?.remove();\r\n      linkingState.current.isLinking = false;\r\n      linkingState.current.sourceNode = null;\r\n      linkingState.current.tempLink = null;\r\n      return;\r\n    }\r\n\r\n    // Complete the connection\r\n    const sourceNode = linkingState.current.sourceNode;\r\n    if (sourceNode._id === targetNode._id) {\r\n      console.log('Cannot connect node to itself');\r\n      linkingState.current.tempLink?.remove();\r\n      linkingState.current.isLinking = false;\r\n      linkingState.current.sourceNode = null;\r\n      linkingState.current.tempLink = null;\r\n      return;\r\n    }\r\n\r\n    // Create the edge\r\n    const edgeData = {\r\n      source: sourceNode._id,\r\n      target: targetNode._id,\r\n      type: 'related',\r\n      weight: 1\r\n    };\r\n\r\n    // Call the onCreateEdge callback\r\n    if (onCreateEdge) {\r\n      onCreateEdge(edgeData);\r\n    }\r\n\r\n    // Clean up\r\n    linkingState.current.tempLink?.remove();\r\n    linkingState.current.isLinking = false;\r\n    linkingState.current.sourceNode = null;\r\n    linkingState.current.tempLink = null;\r\n\r\n    // Reset visual feedback\r\n    d3.selectAll('.node circle')\r\n      .attr('stroke', '#1B5E20')\r\n      .attr('stroke-width', 1.5);\r\n  }\r\n}, [svgRef, linkingState, onCreateEdge]);\r\n // onCreateEdge might be relevant if we decide to complete link here\r\n\r\n  useEffect(() => {\r\n    const svgInstance = d3.select(svgRef.current);\r\n\r\n    if (interactionMode === 'connect') {\r\n      const onMouseMoveLinking = handleMouseMoveLinking;\r\n      const onMouseUpLinking = handleMouseUpLinking;\r\n\r\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\r\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\r\n      // console.log('Global linking listeners ADDED to SVG for connect mode.');\r\n\r\n      return () => {\r\n        svgInstance.on('mousemove.linking', null);\r\n        svgInstance.on('mouseup.linking', null);\r\n        // console.log('Global linking listeners REMOVED from SVG.');\r\n      };\r\n    } else {\r\n      svgInstance.on('mousemove.linking', null);\r\n      svgInstance.on('mouseup.linking', null);\r\n\r\n      if (linkingState.current.isLinking) {\r\n        // console.log('Exited connect mode with active link: Forcibly cleaning up.');\r\n        linkingState.current.tempLink?.remove();\r\n        linkingState.current.isLinking = false;\r\n        linkingState.current.sourceNode = null;\r\n        linkingState.current.tempLink = null;\r\n      }\r\n      return () => { };\r\n    }\r\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]);\r\n\r\n  // Main effect for D3 rendering and updates\r\n  useEffect(() => {\r\n    // console.log('[Graph Effect - Main D3] Running. Nodes count:', nodes.length, 'Edges count:', edges.length);\r\n    // console.log('[Graph Effect - Main D3] Nodes prop:', JSON.parse(JSON.stringify(nodes)));\r\n    // console.log('[Graph Effect - Main D3] Edges prop:', JSON.parse(JSON.stringify(edges)));\r\n\r\n    const currentSvg = svgRef.current;\r\n    if (!currentSvg) {\r\n      // console.log('[Graph Effect - Main D3] SVG ref not available yet. Aborting D3 setup.');\r\n      return; // SVG element isn't rendered yet (e.g. nodes are empty)\r\n    }\r\n\r\n    // Initialize simulation IF it doesn't exist yet AND currentSvg is available\r\n    if (!simulationRef.current) {\r\n      // console.log('[Graph Effect - Main D3] Initializing simulation.');\r\n      const initialWidth = graphDimensionsRef.current.width;\r\n      const initialHeight = graphDimensionsRef.current.height;\r\n      simulationRef.current = d3.forceSimulation()\r\n        .force('link', d3.forceLink([]).id(d => d._id).distance(150))\r\n        .alpha(0).alphaDecay(1).alphaTarget(0);\r\n      // console.log('[Graph Effect - Main D3] Simulation initialized:', simulationRef.current);\r\n    }\r\n\r\n    const svg = d3.select(currentSvg); // Use currentSvg directly as it's confirmed not null\r\n    const simulation = simulationRef.current;\r\n\r\n    // This check should ideally not be hit if the above init logic works, but keep as safeguard\r\n    if (!simulation) {\r\n      // console.error('[Graph Effect - Main D3] Simulation ref is STILL not set! This is unexpected. Aborting.');\r\n      return;\r\n    }\r\n    // console.log('[Graph Effect - Main D3] Simulation instance retrieved:', simulation);\r\n\r\n    svg.on('click.diagnostic', (event) => {\r\n      // console.log('[SVG DIAGNOSTIC CLICK] SVG itself was clicked. Target:', event.target);\r\n    });\r\n\r\n    // 1. Manage the background rectangle: append if not exists, ensure attributes.\r\n    let backgroundRect = svg.select('rect.background');\r\n    if (backgroundRect.empty()) {\r\n      backgroundRect = svg.append('rect')\r\n        .attr('class', 'background');\r\n    }\r\n    backgroundRect // Ensure attributes are set on every run if they could change (e.g. dimensions)\r\n      .attr('width', '100%')\r\n      .attr('height', '100%')\r\n      .attr('fill', 'transparent')\r\n      .on('click', (event) => {\r\n        // console.log('[Background Rect Clicked Directly] Target:', event.target);\r\n        if (event.target.classList.contains('background')) {\r\n          d3.selectAll('.link').classed('selected', false);\r\n          setSelectedEdge(null);\r\n          if (onBackgroundClick) {\r\n            onBackgroundClick();\r\n          }\r\n        }\r\n      });\r\n\r\n    // 2. Ensure dedicated groups for links and nodes exist (append if not).\r\n    let linkGroup = svg.select('g.links-group');\r\n    if (linkGroup.empty()) {\r\n      linkGroup = svg.append('g').attr('class', 'links-group');\r\n    }\r\n    let nodeGroup = svg.select('g.nodes-group');\r\n    if (nodeGroup.empty()) {\r\n      nodeGroup = svg.append('g').attr('class', 'nodes-group');\r\n    }\r\n\r\n    // 3. Manage defs for markers: append if not exists.\r\n    let defs = svg.select('defs');\r\n    if (defs.empty()) {\r\n      defs = svg.append('defs');\r\n    }\r\n    // Check if marker already exists before appending\r\n    if (defs.select('#arrow').empty()) {\r\n      defs.append(\"marker\")\r\n        .attr(\"id\", \"arrow\")\r\n        .attr(\"viewBox\", \"0 -5 10 10\")\r\n        .attr(\"refX\", 20)\r\n        .attr(\"refY\", 0)\r\n        .attr(\"markerWidth\", 6)\r\n        .attr(\"markerHeight\", 6)\r\n        .attr(\"orient\", \"auto\")\r\n        .append(\"path\")\r\n        .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n        .attr(\"fill\", \"#A8C3A4\");\r\n    }\r\n\r\n    // Determine live dimensions for clamping and for App.js new node positioning\r\n    const liveContainerWidth = currentSvg.clientWidth;\r\n    const liveContainerHeight = currentSvg.clientHeight;\r\n    graphDimensionsRef.current = { width: liveContainerWidth, height: liveContainerHeight }; // Update for App.js\r\n\r\n    // Set stable viewBox dimensions only once when valid live dimensions are first available\r\n    if (stableViewBoxDimensionsRef.current.width === 0 && liveContainerWidth > 0) {\r\n      stableViewBoxDimensionsRef.current.width = liveContainerWidth;\r\n      // console.log(`[Graph Dimensions] Stable viewBoxWidth SET to: ${liveContainerWidth}`);\r\n    }\r\n    if (stableViewBoxDimensionsRef.current.height === 0 && liveContainerHeight > 0) {\r\n      stableViewBoxDimensionsRef.current.height = liveContainerHeight;\r\n      // console.log(`[Graph Dimensions] Stable viewBoxHeight SET to: ${liveContainerHeight}`);\r\n    }\r\n\r\n    // Use stable dimensions for the viewBox if available, otherwise fallback to live (should only be for very first paint)\r\n    const viewBoxWidth = stableViewBoxDimensionsRef.current.width > 0 ? stableViewBoxDimensionsRef.current.width : liveContainerWidth;\r\n    const viewBoxHeight = stableViewBoxDimensionsRef.current.height > 0 ? stableViewBoxDimensionsRef.current.height : liveContainerHeight;\r\n\r\n    // console.log(`[Graph Dimensions] Using for viewBox: ${viewBoxWidth}x${viewBoxHeight}. Live: ${liveContainerWidth}x${liveContainerHeight}`);\r\n\r\n    svg\r\n      .attr('viewBox', [0, 0, viewBoxWidth, viewBoxHeight])\r\n      .attr('preserveAspectRatio', 'xMidYMid meet');\r\n\r\n    // Update node positions (fx, fy) before passing to simulation\r\n    nodes.forEach(node => {\r\n      const hasValidPositionProp = node.position && typeof node.position.x === 'number' && typeof node.position.y === 'number';\r\n\r\n      if (hasValidPositionProp) {\r\n        node.x = node.position.x;\r\n        node.y = node.position.y;\r\n        node.fx = node.position.x;\r\n        node.fy = node.position.y;\r\n      } else {\r\n        // Position from prop is invalid or missing. Node should be allowed to be placed by simulation.\r\n        // Or, if it's a new node without prior x/y, give it a random start.\r\n        node.x = typeof node.x === 'number' ? node.x : (Math.random() * (liveContainerWidth - 100) + 50);\r\n        node.y = typeof node.y === 'number' ? node.y : (Math.random() * (liveContainerHeight - 100) + 50);\r\n        node.fx = null; // Explicitly nullify fx/fy if position from prop is not definitive.\r\n        node.fy = null;\r\n\r\n        // For consistency or if other parts of the code expect node.position to exist:\r\n        // Update node.position to reflect the initial x,y that will be used by the simulation (if fx/fy are null).\r\n        // This ensures that if this node object is reused, its .position reflects its current state.\r\n        node.position = { x: node.x, y: node.y };\r\n      }\r\n    });\r\n    // console.log('[D3 Data] Nodes after position init:', JSON.parse(JSON.stringify(nodes))); // Deep copy for logging\r\n\r\n    const nodeMap = {};\r\n    nodes.forEach(node => { nodeMap[node._id] = node; });\r\n    const processedEdges = edges.map(edge => ({\r\n      id: edge._id,\r\n      source: nodeMap[edge.source] || edge.source,\r\n      target: nodeMap[edge.target] || edge.target,\r\n      type: edge.type,\r\n      _id: edge._id\r\n    }));\r\n    // console.log('[D3 Data] Processed Edges:', JSON.parse(JSON.stringify(processedEdges)));\r\n\r\n    simulation\r\n      .nodes(nodes)\r\n      .on('tick', ticked);\r\n    simulation.force('link').links(processedEdges);\r\n\r\n    const linkElements = linkGroup.selectAll('path.link')\r\n      .data(processedEdges, d => d.id)\r\n      .join('path')\r\n      .attr('class', 'link')\r\n      .attr('data-id', d => d.id)\r\n      .attr('stroke', '#A8C3A4')\r\n      .attr('stroke-width', 2)\r\n      .attr('fill', 'none')\r\n      .attr('marker-end', 'url(#arrow)');\r\n    linkElements.on('click', handleEdgeClick);\r\n    // console.log('[D3 Elements] linkElements count:', linkElements.size());\r\n\r\n    const nodeElements = nodeGroup.selectAll('g.node')\r\n  .data(nodes, d => d._id)\r\n  .join(\r\n    enter => {\r\n      const g = enter.append('g')\r\n        .attr('class', 'node')\r\n        .attr('data-id', d => d._id);\r\n      \r\n      // Only apply drag behavior in select mode\r\n      if (interactionMode === 'select') {\r\n        g.call(dragBehavior(simulation, svg.node(), liveContainerWidth, liveContainerHeight));\r\n      }\r\n\r\n      g.append('circle')\r\n        .attr('r', 12)\r\n        .attr('fill', '#2E7D32')\r\n        .attr('stroke', '#1B5E20')\r\n        .attr('stroke-width', 1.5)\r\n        .style('pointer-events', 'all');\r\n\r\n      g.append('text')\r\n        .text(d => d.title || d._id?.substring(0, 6))\r\n        .attr('x', 16).attr('y', 5).attr('fill', '#FAF3E0').attr('text-anchor', 'start');\r\n\r\n      // Make sure click events are attached\r\n      g.on('click', handleNodeClick);\r\n      console.log('🟢 Attached click handler to node:', g.datum()?._id);\r\n\r\n      return g;\r\n    },\r\n    update => {\r\n      // Re-apply or remove drag behavior based on current mode\r\n      if (interactionMode === 'select') {\r\n        update.call(dragBehavior(simulation, svg.node(), liveContainerWidth, liveContainerHeight));\r\n      } else {\r\n        // Remove drag behavior\r\n        update.on('.drag', null);\r\n      }\r\n      \r\n      // Make sure click events are still attached\r\n      update.on('click', handleNodeClick);\r\n      \r\n      return update;\r\n    },\r\n    exit => exit.remove()\r\n  );\r\n\r\n\r\n\r\n    // console.log('[D3 Elements] nodeElements count:', nodeElements.size());\r\n\r\n    const circles = nodeElements.select('circle');\r\n    circles.on('click', handleNodeClick).style('pointer-events', 'all');\r\n\r\n    function handleEdgeClick(event, d) {\r\n      console.log('[Edge Click] Attempted on edge:', d.id, 'Mode:', interactionMode);\r\n      event.stopPropagation();\r\n      if (interactionMode === 'select') {\r\n        d3.selectAll('.link').classed('selected', false);\r\n        d3.select(event.currentTarget).classed('selected', true);\r\n        setSelectedEdge(d);\r\n        if (onNodeClick) { // This onNodeClick(null) is to deselect any selected node\r\n          console.log(\"handleEdgeClick: Calling onNodeClick(null) to deselect node.\");\r\n          onNodeClick(null); // Deselects any selected node in App.js\r\n        } else {\r\n          console.log(\"handleEdgeClick: onNodeClick prop is undefined (cannot deselect node).\");\r\n        }\r\n      } else {\r\n        console.log(\"handleEdgeClick: Not in 'select' mode. Current mode:\", interactionMode, \"No action taken.\");\r\n      }\r\n    }\r\n\r\n    function ticked() {\r\n      // console.log('[Ticked] Simulation tick occurred.');\r\n      // if (nodes.length > 0 && nodes[0]) {\r\n      //     console.log(`[Ticked] Sample node 0: x=${nodes[0].x}, y=${nodes[0].y}, fx=${nodes[0].fx}, fy=${nodes[0].fy}`);\r\n      // }\r\n      // if (linkElements.size() > 0 && processedEdges.length > 0 && processedEdges[0]) {\r\n      //   const firstEdge = processedEdges[0];\r\n      //   if (firstEdge && firstEdge.source && typeof firstEdge.source.x === 'number' && firstEdge.target && typeof firstEdge.target.x === 'number') {\r\n      //        console.log(`[Ticked] Sample link 0 source: x=${firstEdge.source.x}, y=${firstEdge.source.y}. Target: x=${firstEdge.target.x}, y=${firstEdge.target.y}`);\r\n      //   }\r\n      // }\r\n\r\n      linkElements.attr('d', d => {\r\n        const sourceXPos = d.source.fx != null ? d.source.fx : d.source.x;\r\n        const sourceYPos = d.source.fy != null ? d.source.fy : d.source.y;\r\n        const targetXPos = d.target.fx != null ? d.target.fx : d.target.x;\r\n        const targetYPos = d.target.fy != null ? d.target.fy : d.target.y;\r\n\r\n        const sourceX = typeof sourceXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, sourceXPos)) : 0;\r\n        const sourceY = typeof sourceYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, sourceYPos)) : 0;\r\n        const targetX = typeof targetXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, targetXPos)) : 0;\r\n        const targetY = typeof targetYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, targetYPos)) : 0;\r\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\r\n      });\r\n\r\n      nodeElements.attr('transform', d => {\r\n        const xPos = d.fx != null ? d.fx : d.x;\r\n        const yPos = d.fy != null ? d.fy : d.y;\r\n\r\n        const x = typeof xPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, xPos)) : 0;\r\n        const y = typeof yPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, yPos)) : 0;\r\n        return `translate(${x},${y})`;\r\n      });\r\n    }\r\n\r\n    // TEMPORARILY COMMENT OUT THE SIMULATION KICK TO TEST ZOOM ISSUE\r\n    // simulation.alpha(0.3).restart(); // Previous state\r\n    simulation.alpha(0.1).restart(); // Re-enable with a gentle kick\r\n    simulation.alphaTarget(0); // Ensure this runs to keep the simulation cool\r\n    console.log('[Graph Effect - Main D3] Gentle simulation kick (alpha 0.1) re-enabled. Alpha target set to 0.');\r\n\r\n    // Cleanup for the main useEffect\r\n    return () => {\r\n      svg.on('click.diagnostic', null);\r\n      // Do not stop simulation here as it's persistent. Stop on unmount.\r\n      if (linkingState.current.tempLink) {\r\n        linkingState.current.tempLink.remove();\r\n      }\r\n      linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n      if (clickTimeout.current) {\r\n        clearTimeout(clickTimeout.current);\r\n      }\r\n    };\r\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, onDeleteEdge, interactionMode, setInteractionMode, onBackgroundClick, isAnyPanelVisible, handleMouseMoveLinking, handleMouseUpLinking]);\r\n\r\n  // Add a separate useEffect for stopping the simulation on component unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (simulationRef.current) {\r\n        console.log('[Graph Unmount] Stopping simulation.');\r\n        simulationRef.current.stop();\r\n      }\r\n    };\r\n  }, []); // Empty dependency array means this runs once on mount for the return (cleanup) function\r\n\r\n  // Handle keyboard delete for selected edges\r\n  useEffect(() => {\r\n    const handleKeyDown = (event) => {\r\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\r\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\r\n          onDeleteEdge(selectedEdge._id);\r\n          setSelectedEdge(null);\r\n        }\r\n      }\r\n    };\r\n\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [selectedEdge, onDeleteEdge]);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      setIsSvgMounted(true);\r\n    }\r\n    return () => setIsSvgMounted(false);\r\n  }, []);\r\n\r\n\r\n\r\n\r\nfunction dragBehavior(sim, svgInstance, containerWidth, containerHeight) {\r\n  // Only return drag behavior if we're in select mode\r\n  if (interactionMode !== 'select') {\r\n    return d3.drag(); // Return empty drag behavior\r\n  }\r\n  \r\n  return d3.drag()\r\n    .on('start', function(event, d) {\r\n      event.sourceEvent.stopPropagation();\r\n      if (!event.active) sim.alphaTarget(0.3).restart();\r\n      d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\r\n      d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\r\n    })\r\n    .on('drag', function(event, d) {\r\n      event.sourceEvent.stopPropagation();\r\n      d.fx = Math.max(15, Math.min(containerWidth - 15, event.x));\r\n      d.fy = Math.max(15, Math.min(containerHeight - 15, event.y));\r\n      d.position = { x: d.fx, y: d.fy };\r\n    })\r\n    .on('end', async function(event, d) {\r\n      const wasClick = Math.abs(event.dx) < 2 && Math.abs(event.dy) < 2;\r\n      if (!wasClick && api?.updateNode) {\r\n        await api.updateNode(d._id, { position: { x: d.fx, y: d.fy } })\r\n          .catch(err => console.error(\"Failed to update node position:\", err));\r\n      }\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleNodeClick = (event, d) => {\r\n  console.log(`[Node Click Handler] Node: ${d._id}, Mode: ${interactionMode}`);\r\n  console.log(`[Node Click Handler] Current linking state:`, linkingState.current);\r\n  console.log(`[Node Click Handler] onCreateEdge function:`, onCreateEdge);\r\n  \r\n  if (event.defaultPrevented) {\r\n    console.log('[Node Click Handler] DefaultPrevented, returning early');\r\n    return;\r\n  }\r\n\r\n  if (interactionMode === 'connect') {\r\n    console.log('[Node Click Handler] In connect mode');\r\n    \r\n    if (!linkingState.current.isLinking) {\r\n      // Start a new connection\r\n      console.log('🟢 STARTING connection from node:', d._id);\r\n      linkingState.current = {\r\n        isLinking: true,\r\n        sourceNode: d,\r\n        tempLink: d3.select(svgRef.current).append('path')\r\n          .attr('class', 'temp-link')\r\n          .attr('d', `M${d.x},${d.y}L${d.x},${d.y}`)\r\n          .attr('stroke-dasharray', '5,5')\r\n          .attr('stroke', '#B87333')\r\n          .attr('stroke-width', 2)\r\n          .attr('fill', 'none')\r\n          .attr('marker-end', 'url(#arrow)')\r\n          .raise()\r\n      };\r\n      \r\n      console.log('🟢 Linking state after start:', linkingState.current);\r\n      \r\n      // Add visual feedback to the source node\r\n      d3.select(event.currentTarget).select('circle')\r\n        .attr('stroke', '#B87333')\r\n        .attr('stroke-width', 3);\r\n        \r\n    } else {\r\n      // Complete the connection\r\n      console.log('🔵 COMPLETING connection');\r\n      console.log('🔵 Source node:', linkingState.current.sourceNode?._id);\r\n      console.log('🔵 Target node:', d._id);\r\n      \r\n      if (linkingState.current.sourceNode && linkingState.current.sourceNode._id !== d._id) {\r\n        console.log('🟢 Creating edge from', linkingState.current.sourceNode._id, 'to', d._id);\r\n        console.log('🟢 onCreateEdge function exists:', !!onCreateEdge);\r\n        \r\n        if (onCreateEdge) {\r\n          try {\r\n            console.log('🟢 Calling onCreateEdge...');\r\n            const result = onCreateEdge(linkingState.current.sourceNode._id, d._id);\r\n            console.log('🟢 onCreateEdge result:', result);\r\n          } catch (error) {\r\n            console.error('🔴 Error calling onCreateEdge:', error);\r\n          }\r\n        } else {\r\n          console.error('🔴 onCreateEdge is not defined!');\r\n        }\r\n      } else if (linkingState.current.sourceNode?._id === d._id) {\r\n        console.log('🟡 Cannot connect node to itself');\r\n      } else {\r\n        console.log('🔴 No source node found');\r\n      }\r\n      \r\n      // Clean up\r\n      console.log('🔵 Cleaning up linking state');\r\n      linkingState.current.tempLink?.remove();\r\n      \r\n      // Reset visual feedback\r\n      d3.selectAll('.node circle')\r\n        .attr('stroke', '#1B5E20')\r\n        .attr('stroke-width', 1.5);\r\n      \r\n      linkingState.current.isLinking = false;\r\n      linkingState.current.sourceNode = null;\r\n      linkingState.current.tempLink = null;\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Rest of your existing select mode logic...\r\n};\r\n\r\n\r\n\r\n\r\n\r\n  // Handle edge deletion\r\n  const handleDeleteEdge = () => {\r\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\r\n      onDeleteEdge(selectedEdge._id);\r\n      setSelectedEdge(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-wrapper\" onClick={(e) => {\r\n      console.log('[Graph Wrapper Click] Target:', e.target, 'CurrentTarget:', e.currentTarget);\r\n      if (e.target === e.currentTarget) {\r\n        console.log('[Graph Wrapper Click] Click was directly on wrapper.');\r\n        if (onBackgroundClick) {\r\n          onBackgroundClick();\r\n        }\r\n      }\r\n    }}>\r\n      {nodes && nodes.length > 0 ? (\r\n        <svg ref={svgRef} className=\"graph-svg\" />\r\n      ) : (\r\n        <div className=\"graph-svg empty-graph-placeholder\">\r\n          <div className=\"empty-graph-message\">\r\n            <p>This canvas is empty. Start by creating a new node!</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className=\"graph-controls\">\r\n        {selectedEdge && (\r\n          <button\r\n            onClick={handleDeleteEdge}\r\n            className=\"button danger\"\r\n          >\r\n            <TrashIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            Remove Edge\r\n          </button>\r\n        )}\r\n        <div className=\"button-row\">\r\n          <button\r\n            onClick={() => {\r\n              // Pass current dimensions when calling onCreateNew\r\n              if (onCreateNew) {\r\n                onCreateNew({\r\n                  graphWidth: graphDimensionsRef.current.width,\r\n                  graphHeight: graphDimensionsRef.current.height\r\n                });\r\n              }\r\n            }}\r\n            className=\"button primary\"\r\n          >\r\n            <PlusIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            Create New Node\r\n          </button>\r\n\r\n\r\n\r\n\r\n\r\n <button\r\n  onClick={() => {\r\n    const newMode = interactionMode === 'connect' ? 'select' : 'connect';\r\n    setInteractionMode(newMode);\r\n    \r\n    // Reset any existing connection state\r\n    if (newMode === 'select') {\r\n      d3.select(svgRef.current).selectAll('.temp-link').remove();\r\n      linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n    }\r\n  }}\r\n  className={`button accent ${interactionMode === 'connect' ? 'active' : ''}`}\r\n>\r\n  <LinkIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n  {interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes'}\r\n</button>\r\n\r\n\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACvE,OAAO,KAAKC,EAAE,MAAM,IAAI;AACxB,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,oBAAoB;AACpC,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,SAAS,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,KAAK,GAAGA,CAAC;EAAEC,KAAK,GAAG,EAAE;EAAEC,KAAK,GAAG,EAAE;EAAEC,WAAW;EAAEC,iBAAiB;EAAEC,WAAW;EAAEC,YAAY;EAAEC,YAAY;EAAEC,eAAe,GAAG,QAAQ;EAAEC,kBAAkB;EAAEC,iBAAiB;EAAEC,iBAAiB,CAAC;AAAmG,CAAC,KAAK;EAAAC,EAAA;EAC9SC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEN,eAAe,CAAC;EACzD,MAAMO,MAAM,GAAG1B,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAM,CAAC2B,YAAY,EAAEC,eAAe,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM2B,aAAa,GAAG7B,MAAM,CAAC,CAAC,CAAC,CAAC;EAChC,MAAM8B,YAAY,GAAG9B,MAAM,CAAC;IAAE+B,UAAU,EAAE,IAAI;IAAEC,QAAQ,EAAE,IAAI;IAAEC,SAAS,EAAE;EAAM,CAAC,CAAC;EACnF,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAMkC,YAAY,GAAGpC,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMqC,kBAAkB,GAAGrC,MAAM,CAAC;IAAEsC,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAI,CAAC,CAAC,CAAC,CAAC;EAChE,MAAMC,0BAA0B,GAAGxC,MAAM,CAAC;IAAEsC,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE;EAAE,CAAC,CAAC,CAAC,CAAC;;EAEpE;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEAf,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAER,YAAY,CAAC;EAE3D,MAAMwB,sBAAsB,GAAGtC,WAAW,CAAEuC,KAAK,IAAK;IACtD,IAAI,CAACZ,YAAY,CAACa,OAAO,CAACV,SAAS,IAAI,CAACH,YAAY,CAACa,OAAO,CAACZ,UAAU,IAAI,CAACD,YAAY,CAACa,OAAO,CAACX,QAAQ,EAAE;MACzG;IACF;IAEA,IAAI,CAACN,MAAM,CAACiB,OAAO,EAAE;IAErB,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAGzC,EAAE,CAAC0C,OAAO,CAACJ,KAAK,EAAEhB,MAAM,CAACiB,OAAO,CAAC;;IAEhD;IACAb,YAAY,CAACa,OAAO,CAACX,QAAQ,CAC1Be,IAAI,CAAC,GAAG,EAAE,IAAIjB,YAAY,CAACa,OAAO,CAACZ,UAAU,CAACa,CAAC,IAAId,YAAY,CAACa,OAAO,CAACZ,UAAU,CAACc,CAAC,IAAID,CAAC,IAAIC,CAAC,EAAE,CAAC;EAEtG,CAAC,EAAE,CAACnB,MAAM,EAAEI,YAAY,CAAC,CAAC;EAG1B,MAAMkB,oBAAoB,GAAG7C,WAAW,CAAEuC,KAAK,IAAK;IAClD,IAAIZ,YAAY,CAACa,OAAO,CAACV,SAAS,EAAE;MAAA,IAAAgB,sBAAA;MAClC,IAAI,CAACvB,MAAM,CAACiB,OAAO,EAAE;MAErB,MAAMO,iBAAiB,GAAGR,KAAK,CAACS,MAAM;MACtC,MAAMC,gBAAgB,GAAGF,iBAAiB,CAACG,OAAO,CAAC,OAAO,CAAC;MAC3D,MAAMC,MAAM,GAAG,CAAC,CAACF,gBAAgB;MAEjC,IAAI,CAACE,MAAM,EAAE;QAAA,IAAAC,qBAAA;QACX/B,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;;QAE7D;QACA,CAAA8B,qBAAA,GAAAzB,YAAY,CAACa,OAAO,CAACX,QAAQ,cAAAuB,qBAAA,uBAA7BA,qBAAA,CAA+BC,MAAM,CAAC,CAAC;;QAEvC;QACApD,EAAE,CAACqD,SAAS,CAAC,cAAc,CAAC,CACzBV,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CACzBA,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC;QAE5BjB,YAAY,CAACa,OAAO,CAACV,SAAS,GAAG,KAAK;QACtCH,YAAY,CAACa,OAAO,CAACZ,UAAU,GAAG,IAAI;QACtCD,YAAY,CAACa,OAAO,CAACX,QAAQ,GAAG,IAAI;QACpC;MACF;;MAEA;MACA,MAAM0B,UAAU,GAAGtD,EAAE,CAACuD,MAAM,CAACP,gBAAgB,CAAC,CAACQ,KAAK,CAAC,CAAC;MACtD,IAAI,CAACF,UAAU,EAAE;QAAA,IAAAG,sBAAA;QACfrC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;QAC7C,CAAAoC,sBAAA,GAAA/B,YAAY,CAACa,OAAO,CAACX,QAAQ,cAAA6B,sBAAA,uBAA7BA,sBAAA,CAA+BL,MAAM,CAAC,CAAC;QACvC1B,YAAY,CAACa,OAAO,CAACV,SAAS,GAAG,KAAK;QACtCH,YAAY,CAACa,OAAO,CAACZ,UAAU,GAAG,IAAI;QACtCD,YAAY,CAACa,OAAO,CAACX,QAAQ,GAAG,IAAI;QACpC;MACF;;MAEA;MACA,MAAMD,UAAU,GAAGD,YAAY,CAACa,OAAO,CAACZ,UAAU;MAClD,IAAIA,UAAU,CAAC+B,GAAG,KAAKJ,UAAU,CAACI,GAAG,EAAE;QAAA,IAAAC,sBAAA;QACrCvC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;QAC5C,CAAAsC,sBAAA,GAAAjC,YAAY,CAACa,OAAO,CAACX,QAAQ,cAAA+B,sBAAA,uBAA7BA,sBAAA,CAA+BP,MAAM,CAAC,CAAC;QACvC1B,YAAY,CAACa,OAAO,CAACV,SAAS,GAAG,KAAK;QACtCH,YAAY,CAACa,OAAO,CAACZ,UAAU,GAAG,IAAI;QACtCD,YAAY,CAACa,OAAO,CAACX,QAAQ,GAAG,IAAI;QACpC;MACF;;MAEA;MACA,MAAMgC,QAAQ,GAAG;QACfC,MAAM,EAAElC,UAAU,CAAC+B,GAAG;QACtBX,MAAM,EAAEO,UAAU,CAACI,GAAG;QACtBI,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE;MACV,CAAC;;MAED;MACA,IAAIlD,YAAY,EAAE;QAChBA,YAAY,CAAC+C,QAAQ,CAAC;MACxB;;MAEA;MACA,CAAAf,sBAAA,GAAAnB,YAAY,CAACa,OAAO,CAACX,QAAQ,cAAAiB,sBAAA,uBAA7BA,sBAAA,CAA+BO,MAAM,CAAC,CAAC;MACvC1B,YAAY,CAACa,OAAO,CAACV,SAAS,GAAG,KAAK;MACtCH,YAAY,CAACa,OAAO,CAACZ,UAAU,GAAG,IAAI;MACtCD,YAAY,CAACa,OAAO,CAACX,QAAQ,GAAG,IAAI;;MAEpC;MACA5B,EAAE,CAACqD,SAAS,CAAC,cAAc,CAAC,CACzBV,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CACzBA,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC;IAC9B;EACF,CAAC,EAAE,CAACrB,MAAM,EAAEI,YAAY,EAAEb,YAAY,CAAC,CAAC;EACvC;;EAEChB,SAAS,CAAC,MAAM;IACd,MAAMmE,WAAW,GAAGhE,EAAE,CAACuD,MAAM,CAACjC,MAAM,CAACiB,OAAO,CAAC;IAE7C,IAAIxB,eAAe,KAAK,SAAS,EAAE;MACjC,MAAMkD,kBAAkB,GAAG5B,sBAAsB;MACjD,MAAM6B,gBAAgB,GAAGtB,oBAAoB;MAE7CoB,WAAW,CAACG,EAAE,CAAC,mBAAmB,EAAEF,kBAAkB,CAAC;MACvDD,WAAW,CAACG,EAAE,CAAC,iBAAiB,EAAED,gBAAgB,CAAC;MACnD;;MAEA,OAAO,MAAM;QACXF,WAAW,CAACG,EAAE,CAAC,mBAAmB,EAAE,IAAI,CAAC;QACzCH,WAAW,CAACG,EAAE,CAAC,iBAAiB,EAAE,IAAI,CAAC;QACvC;MACF,CAAC;IACH,CAAC,MAAM;MACLH,WAAW,CAACG,EAAE,CAAC,mBAAmB,EAAE,IAAI,CAAC;MACzCH,WAAW,CAACG,EAAE,CAAC,iBAAiB,EAAE,IAAI,CAAC;MAEvC,IAAIzC,YAAY,CAACa,OAAO,CAACV,SAAS,EAAE;QAAA,IAAAuC,sBAAA;QAClC;QACA,CAAAA,sBAAA,GAAA1C,YAAY,CAACa,OAAO,CAACX,QAAQ,cAAAwC,sBAAA,uBAA7BA,sBAAA,CAA+BhB,MAAM,CAAC,CAAC;QACvC1B,YAAY,CAACa,OAAO,CAACV,SAAS,GAAG,KAAK;QACtCH,YAAY,CAACa,OAAO,CAACZ,UAAU,GAAG,IAAI;QACtCD,YAAY,CAACa,OAAO,CAACX,QAAQ,GAAG,IAAI;MACtC;MACA,OAAO,MAAM,CAAE,CAAC;IAClB;EACF,CAAC,EAAE,CAACb,eAAe,EAAEO,MAAM,EAAEe,sBAAsB,EAAEO,oBAAoB,CAAC,CAAC;;EAE3E;EACA/C,SAAS,CAAC,MAAM;IACd;IACA;IACA;;IAEA,MAAMwE,UAAU,GAAG/C,MAAM,CAACiB,OAAO;IACjC,IAAI,CAAC8B,UAAU,EAAE;MACf;MACA,OAAO,CAAC;IACV;;IAEA;IACA,IAAI,CAAC5C,aAAa,CAACc,OAAO,EAAE;MAC1B;MACA,MAAM+B,YAAY,GAAGrC,kBAAkB,CAACM,OAAO,CAACL,KAAK;MACrD,MAAMqC,aAAa,GAAGtC,kBAAkB,CAACM,OAAO,CAACJ,MAAM;MACvDV,aAAa,CAACc,OAAO,GAAGvC,EAAE,CAACwE,eAAe,CAAC,CAAC,CACzCC,KAAK,CAAC,MAAM,EAAEzE,EAAE,CAAC0E,SAAS,CAAC,EAAE,CAAC,CAACC,EAAE,CAACC,CAAC,IAAIA,CAAC,CAAClB,GAAG,CAAC,CAACmB,QAAQ,CAAC,GAAG,CAAC,CAAC,CAC5DC,KAAK,CAAC,CAAC,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;MACxC;IACF;IAEA,MAAMC,GAAG,GAAGjF,EAAE,CAACuD,MAAM,CAACc,UAAU,CAAC,CAAC,CAAC;IACnC,MAAMa,UAAU,GAAGzD,aAAa,CAACc,OAAO;;IAExC;IACA,IAAI,CAAC2C,UAAU,EAAE;MACf;MACA;IACF;IACA;;IAEAD,GAAG,CAACd,EAAE,CAAC,kBAAkB,EAAG7B,KAAK,IAAK;MACpC;IAAA,CACD,CAAC;;IAEF;IACA,IAAI6C,cAAc,GAAGF,GAAG,CAAC1B,MAAM,CAAC,iBAAiB,CAAC;IAClD,IAAI4B,cAAc,CAACC,KAAK,CAAC,CAAC,EAAE;MAC1BD,cAAc,GAAGF,GAAG,CAACI,MAAM,CAAC,MAAM,CAAC,CAChC1C,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC;IAChC;IACAwC,cAAc,CAAC;IAAA,CACZxC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CACrBA,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CACtBA,IAAI,CAAC,MAAM,EAAE,aAAa,CAAC,CAC3BwB,EAAE,CAAC,OAAO,EAAG7B,KAAK,IAAK;MACtB;MACA,IAAIA,KAAK,CAACS,MAAM,CAACuC,SAAS,CAACC,QAAQ,CAAC,YAAY,CAAC,EAAE;QACjDvF,EAAE,CAACqD,SAAS,CAAC,OAAO,CAAC,CAACmC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC;QAChDzD,eAAe,CAAC,IAAI,CAAC;QACrB,IAAId,iBAAiB,EAAE;UACrBA,iBAAiB,CAAC,CAAC;QACrB;MACF;IACF,CAAC,CAAC;;IAEJ;IACA,IAAIwE,SAAS,GAAGR,GAAG,CAAC1B,MAAM,CAAC,eAAe,CAAC;IAC3C,IAAIkC,SAAS,CAACL,KAAK,CAAC,CAAC,EAAE;MACrBK,SAAS,GAAGR,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAAC1C,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC;IAC1D;IACA,IAAI+C,SAAS,GAAGT,GAAG,CAAC1B,MAAM,CAAC,eAAe,CAAC;IAC3C,IAAImC,SAAS,CAACN,KAAK,CAAC,CAAC,EAAE;MACrBM,SAAS,GAAGT,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAAC1C,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC;IAC1D;;IAEA;IACA,IAAIgD,IAAI,GAAGV,GAAG,CAAC1B,MAAM,CAAC,MAAM,CAAC;IAC7B,IAAIoC,IAAI,CAACP,KAAK,CAAC,CAAC,EAAE;MAChBO,IAAI,GAAGV,GAAG,CAACI,MAAM,CAAC,MAAM,CAAC;IAC3B;IACA;IACA,IAAIM,IAAI,CAACpC,MAAM,CAAC,QAAQ,CAAC,CAAC6B,KAAK,CAAC,CAAC,EAAE;MACjCO,IAAI,CAACN,MAAM,CAAC,QAAQ,CAAC,CAClB1C,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CACnBA,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAC7BA,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAChBA,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CACfA,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CACtBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBA,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CACtB0C,MAAM,CAAC,MAAM,CAAC,CACd1C,IAAI,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAC3BA,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC;IAC5B;;IAEA;IACA,MAAMiD,kBAAkB,GAAGvB,UAAU,CAACwB,WAAW;IACjD,MAAMC,mBAAmB,GAAGzB,UAAU,CAAC0B,YAAY;IACnD9D,kBAAkB,CAACM,OAAO,GAAG;MAAEL,KAAK,EAAE0D,kBAAkB;MAAEzD,MAAM,EAAE2D;IAAoB,CAAC,CAAC,CAAC;;IAEzF;IACA,IAAI1D,0BAA0B,CAACG,OAAO,CAACL,KAAK,KAAK,CAAC,IAAI0D,kBAAkB,GAAG,CAAC,EAAE;MAC5ExD,0BAA0B,CAACG,OAAO,CAACL,KAAK,GAAG0D,kBAAkB;MAC7D;IACF;IACA,IAAIxD,0BAA0B,CAACG,OAAO,CAACJ,MAAM,KAAK,CAAC,IAAI2D,mBAAmB,GAAG,CAAC,EAAE;MAC9E1D,0BAA0B,CAACG,OAAO,CAACJ,MAAM,GAAG2D,mBAAmB;MAC/D;IACF;;IAEA;IACA,MAAME,YAAY,GAAG5D,0BAA0B,CAACG,OAAO,CAACL,KAAK,GAAG,CAAC,GAAGE,0BAA0B,CAACG,OAAO,CAACL,KAAK,GAAG0D,kBAAkB;IACjI,MAAMK,aAAa,GAAG7D,0BAA0B,CAACG,OAAO,CAACJ,MAAM,GAAG,CAAC,GAAGC,0BAA0B,CAACG,OAAO,CAACJ,MAAM,GAAG2D,mBAAmB;;IAErI;;IAEAb,GAAG,CACAtC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEqD,YAAY,EAAEC,aAAa,CAAC,CAAC,CACpDtD,IAAI,CAAC,qBAAqB,EAAE,eAAe,CAAC;;IAE/C;IACAnC,KAAK,CAAC0F,OAAO,CAACC,IAAI,IAAI;MACpB,MAAMC,oBAAoB,GAAGD,IAAI,CAACE,QAAQ,IAAI,OAAOF,IAAI,CAACE,QAAQ,CAAC7D,CAAC,KAAK,QAAQ,IAAI,OAAO2D,IAAI,CAACE,QAAQ,CAAC5D,CAAC,KAAK,QAAQ;MAExH,IAAI2D,oBAAoB,EAAE;QACxBD,IAAI,CAAC3D,CAAC,GAAG2D,IAAI,CAACE,QAAQ,CAAC7D,CAAC;QACxB2D,IAAI,CAAC1D,CAAC,GAAG0D,IAAI,CAACE,QAAQ,CAAC5D,CAAC;QACxB0D,IAAI,CAACG,EAAE,GAAGH,IAAI,CAACE,QAAQ,CAAC7D,CAAC;QACzB2D,IAAI,CAACI,EAAE,GAAGJ,IAAI,CAACE,QAAQ,CAAC5D,CAAC;MAC3B,CAAC,MAAM;QACL;QACA;QACA0D,IAAI,CAAC3D,CAAC,GAAG,OAAO2D,IAAI,CAAC3D,CAAC,KAAK,QAAQ,GAAG2D,IAAI,CAAC3D,CAAC,GAAIgE,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIb,kBAAkB,GAAG,GAAG,CAAC,GAAG,EAAG;QAChGO,IAAI,CAAC1D,CAAC,GAAG,OAAO0D,IAAI,CAAC1D,CAAC,KAAK,QAAQ,GAAG0D,IAAI,CAAC1D,CAAC,GAAI+D,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIX,mBAAmB,GAAG,GAAG,CAAC,GAAG,EAAG;QACjGK,IAAI,CAACG,EAAE,GAAG,IAAI,CAAC,CAAC;QAChBH,IAAI,CAACI,EAAE,GAAG,IAAI;;QAEd;QACA;QACA;QACAJ,IAAI,CAACE,QAAQ,GAAG;UAAE7D,CAAC,EAAE2D,IAAI,CAAC3D,CAAC;UAAEC,CAAC,EAAE0D,IAAI,CAAC1D;QAAE,CAAC;MAC1C;IACF,CAAC,CAAC;IACF;;IAEA,MAAMiE,OAAO,GAAG,CAAC,CAAC;IAClBlG,KAAK,CAAC0F,OAAO,CAACC,IAAI,IAAI;MAAEO,OAAO,CAACP,IAAI,CAACzC,GAAG,CAAC,GAAGyC,IAAI;IAAE,CAAC,CAAC;IACpD,MAAMQ,cAAc,GAAGlG,KAAK,CAACmG,GAAG,CAACC,IAAI,KAAK;MACxClC,EAAE,EAAEkC,IAAI,CAACnD,GAAG;MACZG,MAAM,EAAE6C,OAAO,CAACG,IAAI,CAAChD,MAAM,CAAC,IAAIgD,IAAI,CAAChD,MAAM;MAC3Cd,MAAM,EAAE2D,OAAO,CAACG,IAAI,CAAC9D,MAAM,CAAC,IAAI8D,IAAI,CAAC9D,MAAM;MAC3Ce,IAAI,EAAE+C,IAAI,CAAC/C,IAAI;MACfJ,GAAG,EAAEmD,IAAI,CAACnD;IACZ,CAAC,CAAC,CAAC;IACH;;IAEAwB,UAAU,CACP1E,KAAK,CAACA,KAAK,CAAC,CACZ2D,EAAE,CAAC,MAAM,EAAE2C,MAAM,CAAC;IACrB5B,UAAU,CAACT,KAAK,CAAC,MAAM,CAAC,CAACsC,KAAK,CAACJ,cAAc,CAAC;IAE9C,MAAMK,YAAY,GAAGvB,SAAS,CAACpC,SAAS,CAAC,WAAW,CAAC,CAClD4D,IAAI,CAACN,cAAc,EAAE/B,CAAC,IAAIA,CAAC,CAACD,EAAE,CAAC,CAC/BuC,IAAI,CAAC,MAAM,CAAC,CACZvE,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CACrBA,IAAI,CAAC,SAAS,EAAEiC,CAAC,IAAIA,CAAC,CAACD,EAAE,CAAC,CAC1BhC,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CACzBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBA,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CACpBA,IAAI,CAAC,YAAY,EAAE,aAAa,CAAC;IACpCqE,YAAY,CAAC7C,EAAE,CAAC,OAAO,EAAEgD,eAAe,CAAC;IACzC;;IAEA,MAAMC,YAAY,GAAG1B,SAAS,CAACrC,SAAS,CAAC,QAAQ,CAAC,CACnD4D,IAAI,CAACzG,KAAK,EAAEoE,CAAC,IAAIA,CAAC,CAAClB,GAAG,CAAC,CACvBwD,IAAI,CACHG,KAAK,IAAI;MAAA,IAAAC,QAAA;MACP,MAAMC,CAAC,GAAGF,KAAK,CAAChC,MAAM,CAAC,GAAG,CAAC,CACxB1C,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CACrBA,IAAI,CAAC,SAAS,EAAEiC,CAAC,IAAIA,CAAC,CAAClB,GAAG,CAAC;;MAE9B;MACA,IAAI3C,eAAe,KAAK,QAAQ,EAAE;QAChCwG,CAAC,CAACC,IAAI,CAACC,YAAY,CAACvC,UAAU,EAAED,GAAG,CAACkB,IAAI,CAAC,CAAC,EAAEP,kBAAkB,EAAEE,mBAAmB,CAAC,CAAC;MACvF;MAEAyB,CAAC,CAAClC,MAAM,CAAC,QAAQ,CAAC,CACf1C,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CACbA,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CACvBA,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CACzBA,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzB+E,KAAK,CAAC,gBAAgB,EAAE,KAAK,CAAC;MAEjCH,CAAC,CAAClC,MAAM,CAAC,MAAM,CAAC,CACbsC,IAAI,CAAC/C,CAAC;QAAA,IAAAgD,MAAA;QAAA,OAAIhD,CAAC,CAACiD,KAAK,MAAAD,MAAA,GAAIhD,CAAC,CAAClB,GAAG,cAAAkE,MAAA,uBAALA,MAAA,CAAOE,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;MAAA,EAAC,CAC5CnF,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAACA,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAACA,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAACA,IAAI,CAAC,aAAa,EAAE,OAAO,CAAC;;MAElF;MACA4E,CAAC,CAACpD,EAAE,CAAC,OAAO,EAAE4D,eAAe,CAAC;MAC9B3G,OAAO,CAACC,GAAG,CAAC,oCAAoC,GAAAiG,QAAA,GAAEC,CAAC,CAAC/D,KAAK,CAAC,CAAC,cAAA8D,QAAA,uBAATA,QAAA,CAAW5D,GAAG,CAAC;MAEjE,OAAO6D,CAAC;IACV,CAAC,EACDS,MAAM,IAAI;MACR;MACA,IAAIjH,eAAe,KAAK,QAAQ,EAAE;QAChCiH,MAAM,CAACR,IAAI,CAACC,YAAY,CAACvC,UAAU,EAAED,GAAG,CAACkB,IAAI,CAAC,CAAC,EAAEP,kBAAkB,EAAEE,mBAAmB,CAAC,CAAC;MAC5F,CAAC,MAAM;QACL;QACAkC,MAAM,CAAC7D,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC;MAC1B;;MAEA;MACA6D,MAAM,CAAC7D,EAAE,CAAC,OAAO,EAAE4D,eAAe,CAAC;MAEnC,OAAOC,MAAM;IACf,CAAC,EACDC,IAAI,IAAIA,IAAI,CAAC7E,MAAM,CAAC,CACtB,CAAC;;IAIC;;IAEA,MAAM8E,OAAO,GAAGd,YAAY,CAAC7D,MAAM,CAAC,QAAQ,CAAC;IAC7C2E,OAAO,CAAC/D,EAAE,CAAC,OAAO,EAAE4D,eAAe,CAAC,CAACL,KAAK,CAAC,gBAAgB,EAAE,KAAK,CAAC;IAEnE,SAASP,eAAeA,CAAC7E,KAAK,EAAEsC,CAAC,EAAE;MACjCxD,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEuD,CAAC,CAACD,EAAE,EAAE,OAAO,EAAE5D,eAAe,CAAC;MAC9EuB,KAAK,CAAC6F,eAAe,CAAC,CAAC;MACvB,IAAIpH,eAAe,KAAK,QAAQ,EAAE;QAChCf,EAAE,CAACqD,SAAS,CAAC,OAAO,CAAC,CAACmC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC;QAChDxF,EAAE,CAACuD,MAAM,CAACjB,KAAK,CAAC8F,aAAa,CAAC,CAAC5C,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC;QACxDzD,eAAe,CAAC6C,CAAC,CAAC;QAClB,IAAIlE,WAAW,EAAE;UAAE;UACjBU,OAAO,CAACC,GAAG,CAAC,8DAA8D,CAAC;UAC3EX,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;QACrB,CAAC,MAAM;UACLU,OAAO,CAACC,GAAG,CAAC,wEAAwE,CAAC;QACvF;MACF,CAAC,MAAM;QACLD,OAAO,CAACC,GAAG,CAAC,sDAAsD,EAAEN,eAAe,EAAE,kBAAkB,CAAC;MAC1G;IACF;IAEA,SAAS+F,MAAMA,CAAA,EAAG;MAChB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEAE,YAAY,CAACrE,IAAI,CAAC,GAAG,EAAEiC,CAAC,IAAI;QAC1B,MAAMyD,UAAU,GAAGzD,CAAC,CAACf,MAAM,CAACyC,EAAE,IAAI,IAAI,GAAG1B,CAAC,CAACf,MAAM,CAACyC,EAAE,GAAG1B,CAAC,CAACf,MAAM,CAACrB,CAAC;QACjE,MAAM8F,UAAU,GAAG1D,CAAC,CAACf,MAAM,CAAC0C,EAAE,IAAI,IAAI,GAAG3B,CAAC,CAACf,MAAM,CAAC0C,EAAE,GAAG3B,CAAC,CAACf,MAAM,CAACpB,CAAC;QACjE,MAAM8F,UAAU,GAAG3D,CAAC,CAAC7B,MAAM,CAACuD,EAAE,IAAI,IAAI,GAAG1B,CAAC,CAAC7B,MAAM,CAACuD,EAAE,GAAG1B,CAAC,CAAC7B,MAAM,CAACP,CAAC;QACjE,MAAMgG,UAAU,GAAG5D,CAAC,CAAC7B,MAAM,CAACwD,EAAE,IAAI,IAAI,GAAG3B,CAAC,CAAC7B,MAAM,CAACwD,EAAE,GAAG3B,CAAC,CAAC7B,MAAM,CAACN,CAAC;QAEjE,MAAMgG,OAAO,GAAG,OAAOJ,UAAU,KAAK,QAAQ,GAAG7B,IAAI,CAACkC,GAAG,CAAC,EAAE,EAAElC,IAAI,CAACmC,GAAG,CAAC/C,kBAAkB,GAAG,EAAE,EAAEyC,UAAU,CAAC,CAAC,GAAG,CAAC;QAChH,MAAMO,OAAO,GAAG,OAAON,UAAU,KAAK,QAAQ,GAAG9B,IAAI,CAACkC,GAAG,CAAC,EAAE,EAAElC,IAAI,CAACmC,GAAG,CAAC7C,mBAAmB,GAAG,EAAE,EAAEwC,UAAU,CAAC,CAAC,GAAG,CAAC;QACjH,MAAMO,OAAO,GAAG,OAAON,UAAU,KAAK,QAAQ,GAAG/B,IAAI,CAACkC,GAAG,CAAC,EAAE,EAAElC,IAAI,CAACmC,GAAG,CAAC/C,kBAAkB,GAAG,EAAE,EAAE2C,UAAU,CAAC,CAAC,GAAG,CAAC;QAChH,MAAMO,OAAO,GAAG,OAAON,UAAU,KAAK,QAAQ,GAAGhC,IAAI,CAACkC,GAAG,CAAC,EAAE,EAAElC,IAAI,CAACmC,GAAG,CAAC7C,mBAAmB,GAAG,EAAE,EAAE0C,UAAU,CAAC,CAAC,GAAG,CAAC;QACjH,OAAO,IAAIC,OAAO,IAAIG,OAAO,IAAIC,OAAO,IAAIC,OAAO,EAAE;MACvD,CAAC,CAAC;MAEF1B,YAAY,CAACzE,IAAI,CAAC,WAAW,EAAEiC,CAAC,IAAI;QAClC,MAAMmE,IAAI,GAAGnE,CAAC,CAAC0B,EAAE,IAAI,IAAI,GAAG1B,CAAC,CAAC0B,EAAE,GAAG1B,CAAC,CAACpC,CAAC;QACtC,MAAMwG,IAAI,GAAGpE,CAAC,CAAC2B,EAAE,IAAI,IAAI,GAAG3B,CAAC,CAAC2B,EAAE,GAAG3B,CAAC,CAACnC,CAAC;QAEtC,MAAMD,CAAC,GAAG,OAAOuG,IAAI,KAAK,QAAQ,GAAGvC,IAAI,CAACkC,GAAG,CAAC,EAAE,EAAElC,IAAI,CAACmC,GAAG,CAAC/C,kBAAkB,GAAG,EAAE,EAAEmD,IAAI,CAAC,CAAC,GAAG,CAAC;QAC9F,MAAMtG,CAAC,GAAG,OAAOuG,IAAI,KAAK,QAAQ,GAAGxC,IAAI,CAACkC,GAAG,CAAC,EAAE,EAAElC,IAAI,CAACmC,GAAG,CAAC7C,mBAAmB,GAAG,EAAE,EAAEkD,IAAI,CAAC,CAAC,GAAG,CAAC;QAC/F,OAAO,aAAaxG,CAAC,IAAIC,CAAC,GAAG;MAC/B,CAAC,CAAC;IACJ;;IAEA;IACA;IACAyC,UAAU,CAACJ,KAAK,CAAC,GAAG,CAAC,CAACmE,OAAO,CAAC,CAAC,CAAC,CAAC;IACjC/D,UAAU,CAACF,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3B5D,OAAO,CAACC,GAAG,CAAC,gGAAgG,CAAC;;IAE7G;IACA,OAAO,MAAM;MACX4D,GAAG,CAACd,EAAE,CAAC,kBAAkB,EAAE,IAAI,CAAC;MAChC;MACA,IAAIzC,YAAY,CAACa,OAAO,CAACX,QAAQ,EAAE;QACjCF,YAAY,CAACa,OAAO,CAACX,QAAQ,CAACwB,MAAM,CAAC,CAAC;MACxC;MACA1B,YAAY,CAACa,OAAO,GAAG;QAAEZ,UAAU,EAAE,IAAI;QAAEC,QAAQ,EAAE,IAAI;QAAEC,SAAS,EAAE;MAAM,CAAC;MAC7E,IAAIG,YAAY,CAACO,OAAO,EAAE;QACxB2G,YAAY,CAAClH,YAAY,CAACO,OAAO,CAAC;MACpC;IACF,CAAC;EACH,CAAC,EAAE,CAAC/B,KAAK,EAAEC,KAAK,EAAEC,WAAW,EAAEC,iBAAiB,EAAEE,YAAY,EAAEC,YAAY,EAAEC,eAAe,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAEC,iBAAiB,EAAEmB,sBAAsB,EAAEO,oBAAoB,CAAC,CAAC;;EAEvM;EACA/C,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAI4B,aAAa,CAACc,OAAO,EAAE;QACzBnB,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;QACnDI,aAAa,CAACc,OAAO,CAAC4G,IAAI,CAAC,CAAC;MAC9B;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACAtJ,SAAS,CAAC,MAAM;IACd,MAAMuJ,aAAa,GAAI9G,KAAK,IAAK;MAC/B,IAAI,CAACA,KAAK,CAAC+G,GAAG,KAAK,QAAQ,IAAI/G,KAAK,CAAC+G,GAAG,KAAK,WAAW,KAAKvH,YAAY,EAAE;QACzE,IAAIA,YAAY,IAAIA,YAAY,CAAC4B,GAAG,IAAI5C,YAAY,EAAE;UACpDA,YAAY,CAACgB,YAAY,CAAC4B,GAAG,CAAC;UAC9B3B,eAAe,CAAC,IAAI,CAAC;QACvB;MACF;IACF,CAAC;IAGDuH,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEH,aAAa,CAAC;IACjD,OAAO,MAAM;MACXE,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEJ,aAAa,CAAC;IACtD,CAAC;EACH,CAAC,EAAE,CAACtH,YAAY,EAAEhB,YAAY,CAAC,CAAC;EAEhCjB,SAAS,CAAC,MAAM;IACd,IAAIyB,MAAM,CAACiB,OAAO,EAAE;MAClBf,eAAe,CAAC,IAAI,CAAC;IACvB;IACA,OAAO,MAAMA,eAAe,CAAC,KAAK,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;EAKR,SAASiG,YAAYA,CAACgC,GAAG,EAAEzF,WAAW,EAAE0F,cAAc,EAAEC,eAAe,EAAE;IACvE;IACA,IAAI5I,eAAe,KAAK,QAAQ,EAAE;MAChC,OAAOf,EAAE,CAAC4J,IAAI,CAAC,CAAC,CAAC,CAAC;IACpB;IAEA,OAAO5J,EAAE,CAAC4J,IAAI,CAAC,CAAC,CACbzF,EAAE,CAAC,OAAO,EAAE,UAAS7B,KAAK,EAAEsC,CAAC,EAAE;MAC9BtC,KAAK,CAACuH,WAAW,CAAC1B,eAAe,CAAC,CAAC;MACnC,IAAI,CAAC7F,KAAK,CAACwH,MAAM,EAAEL,GAAG,CAACzE,WAAW,CAAC,GAAG,CAAC,CAACiE,OAAO,CAAC,CAAC;MACjDrE,CAAC,CAAC0B,EAAE,GAAGE,IAAI,CAACkC,GAAG,CAAC,EAAE,EAAElC,IAAI,CAACmC,GAAG,CAACe,cAAc,GAAG,EAAE,EAAE9E,CAAC,CAACpC,CAAC,CAAC,CAAC;MACvDoC,CAAC,CAAC2B,EAAE,GAAGC,IAAI,CAACkC,GAAG,CAAC,EAAE,EAAElC,IAAI,CAACmC,GAAG,CAACgB,eAAe,GAAG,EAAE,EAAE/E,CAAC,CAACnC,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CACD0B,EAAE,CAAC,MAAM,EAAE,UAAS7B,KAAK,EAAEsC,CAAC,EAAE;MAC7BtC,KAAK,CAACuH,WAAW,CAAC1B,eAAe,CAAC,CAAC;MACnCvD,CAAC,CAAC0B,EAAE,GAAGE,IAAI,CAACkC,GAAG,CAAC,EAAE,EAAElC,IAAI,CAACmC,GAAG,CAACe,cAAc,GAAG,EAAE,EAAEpH,KAAK,CAACE,CAAC,CAAC,CAAC;MAC3DoC,CAAC,CAAC2B,EAAE,GAAGC,IAAI,CAACkC,GAAG,CAAC,EAAE,EAAElC,IAAI,CAACmC,GAAG,CAACgB,eAAe,GAAG,EAAE,EAAErH,KAAK,CAACG,CAAC,CAAC,CAAC;MAC5DmC,CAAC,CAACyB,QAAQ,GAAG;QAAE7D,CAAC,EAAEoC,CAAC,CAAC0B,EAAE;QAAE7D,CAAC,EAAEmC,CAAC,CAAC2B;MAAG,CAAC;IACnC,CAAC,CAAC,CACDpC,EAAE,CAAC,KAAK,EAAE,gBAAe7B,KAAK,EAAEsC,CAAC,EAAE;MAClC,MAAMmF,QAAQ,GAAGvD,IAAI,CAACwD,GAAG,CAAC1H,KAAK,CAAC2H,EAAE,CAAC,GAAG,CAAC,IAAIzD,IAAI,CAACwD,GAAG,CAAC1H,KAAK,CAAC4H,EAAE,CAAC,GAAG,CAAC;MACjE,IAAI,CAACH,QAAQ,IAAI9J,GAAG,aAAHA,GAAG,eAAHA,GAAG,CAAEkK,UAAU,EAAE;QAChC,MAAMlK,GAAG,CAACkK,UAAU,CAACvF,CAAC,CAAClB,GAAG,EAAE;UAAE2C,QAAQ,EAAE;YAAE7D,CAAC,EAAEoC,CAAC,CAAC0B,EAAE;YAAE7D,CAAC,EAAEmC,CAAC,CAAC2B;UAAG;QAAE,CAAC,CAAC,CAC5D6D,KAAK,CAACC,GAAG,IAAIjJ,OAAO,CAACkJ,KAAK,CAAC,iCAAiC,EAAED,GAAG,CAAC,CAAC;MACxE;IACF,CAAC,CAAC;EACN;EASE,MAAMtC,eAAe,GAAGA,CAACzF,KAAK,EAAEsC,CAAC,KAAK;IACtCxD,OAAO,CAACC,GAAG,CAAC,8BAA8BuD,CAAC,CAAClB,GAAG,WAAW3C,eAAe,EAAE,CAAC;IAC5EK,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAAEK,YAAY,CAACa,OAAO,CAAC;IAChFnB,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAAER,YAAY,CAAC;IAExE,IAAIyB,KAAK,CAACiI,gBAAgB,EAAE;MAC1BnJ,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;MACrE;IACF;IAEA,IAAIN,eAAe,KAAK,SAAS,EAAE;MACjCK,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MAEnD,IAAI,CAACK,YAAY,CAACa,OAAO,CAACV,SAAS,EAAE;QACnC;QACAT,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEuD,CAAC,CAAClB,GAAG,CAAC;QACvDhC,YAAY,CAACa,OAAO,GAAG;UACrBV,SAAS,EAAE,IAAI;UACfF,UAAU,EAAEiD,CAAC;UACbhD,QAAQ,EAAE5B,EAAE,CAACuD,MAAM,CAACjC,MAAM,CAACiB,OAAO,CAAC,CAAC8C,MAAM,CAAC,MAAM,CAAC,CAC/C1C,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,CAC1BA,IAAI,CAAC,GAAG,EAAE,IAAIiC,CAAC,CAACpC,CAAC,IAAIoC,CAAC,CAACnC,CAAC,IAAImC,CAAC,CAACpC,CAAC,IAAIoC,CAAC,CAACnC,CAAC,EAAE,CAAC,CACzCE,IAAI,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAC/BA,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CACzBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBA,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CACpBA,IAAI,CAAC,YAAY,EAAE,aAAa,CAAC,CACjC6H,KAAK,CAAC;QACX,CAAC;QAEDpJ,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEK,YAAY,CAACa,OAAO,CAAC;;QAElE;QACAvC,EAAE,CAACuD,MAAM,CAACjB,KAAK,CAAC8F,aAAa,CAAC,CAAC7E,MAAM,CAAC,QAAQ,CAAC,CAC5CZ,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CACzBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;MAE5B,CAAC,MAAM;QAAA,IAAA8H,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;QACL;QACAvJ,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;QACvCD,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAAAoJ,sBAAA,GAAE/I,YAAY,CAACa,OAAO,CAACZ,UAAU,cAAA8I,sBAAA,uBAA/BA,sBAAA,CAAiC/G,GAAG,CAAC;QACpEtC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEuD,CAAC,CAAClB,GAAG,CAAC;QAErC,IAAIhC,YAAY,CAACa,OAAO,CAACZ,UAAU,IAAID,YAAY,CAACa,OAAO,CAACZ,UAAU,CAAC+B,GAAG,KAAKkB,CAAC,CAAClB,GAAG,EAAE;UACpFtC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEK,YAAY,CAACa,OAAO,CAACZ,UAAU,CAAC+B,GAAG,EAAE,IAAI,EAAEkB,CAAC,CAAClB,GAAG,CAAC;UACtFtC,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAE,CAAC,CAACR,YAAY,CAAC;UAE/D,IAAIA,YAAY,EAAE;YAChB,IAAI;cACFO,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;cACzC,MAAMuJ,MAAM,GAAG/J,YAAY,CAACa,YAAY,CAACa,OAAO,CAACZ,UAAU,CAAC+B,GAAG,EAAEkB,CAAC,CAAClB,GAAG,CAAC;cACvEtC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEuJ,MAAM,CAAC;YAChD,CAAC,CAAC,OAAON,KAAK,EAAE;cACdlJ,OAAO,CAACkJ,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;YACxD;UACF,CAAC,MAAM;YACLlJ,OAAO,CAACkJ,KAAK,CAAC,iCAAiC,CAAC;UAClD;QACF,CAAC,MAAM,IAAI,EAAAI,sBAAA,GAAAhJ,YAAY,CAACa,OAAO,CAACZ,UAAU,cAAA+I,sBAAA,uBAA/BA,sBAAA,CAAiChH,GAAG,MAAKkB,CAAC,CAAClB,GAAG,EAAE;UACzDtC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;QACjD,CAAC,MAAM;UACLD,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;QACxC;;QAEA;QACAD,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;QAC3C,CAAAsJ,sBAAA,GAAAjJ,YAAY,CAACa,OAAO,CAACX,QAAQ,cAAA+I,sBAAA,uBAA7BA,sBAAA,CAA+BvH,MAAM,CAAC,CAAC;;QAEvC;QACApD,EAAE,CAACqD,SAAS,CAAC,cAAc,CAAC,CACzBV,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CACzBA,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC;QAE5BjB,YAAY,CAACa,OAAO,CAACV,SAAS,GAAG,KAAK;QACtCH,YAAY,CAACa,OAAO,CAACZ,UAAU,GAAG,IAAI;QACtCD,YAAY,CAACa,OAAO,CAACX,QAAQ,GAAG,IAAI;MACtC;MACA;IACF;;IAEA;EACF,CAAC;;EAMC;EACA,MAAMiJ,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAI/I,YAAY,IAAIA,YAAY,CAAC4B,GAAG,IAAI5C,YAAY,EAAE;MACpDA,YAAY,CAACgB,YAAY,CAAC4B,GAAG,CAAC;MAC9B3B,eAAe,CAAC,IAAI,CAAC;IACvB;EACF,CAAC;EAED,oBACEzB,OAAA;IAAKwK,SAAS,EAAC,eAAe;IAACC,OAAO,EAAGC,CAAC,IAAK;MAC7C5J,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE2J,CAAC,CAACjI,MAAM,EAAE,gBAAgB,EAAEiI,CAAC,CAAC5C,aAAa,CAAC;MACzF,IAAI4C,CAAC,CAACjI,MAAM,KAAKiI,CAAC,CAAC5C,aAAa,EAAE;QAChChH,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;QACnE,IAAIJ,iBAAiB,EAAE;UACrBA,iBAAiB,CAAC,CAAC;QACrB;MACF;IACF,CAAE;IAAAgK,QAAA,GACCzK,KAAK,IAAIA,KAAK,CAAC0K,MAAM,GAAG,CAAC,gBACxB5K,OAAA;MAAK6K,GAAG,EAAE7J,MAAO;MAACwJ,SAAS,EAAC;IAAW;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAE1CjL,OAAA;MAAKwK,SAAS,EAAC,mCAAmC;MAAAG,QAAA,eAChD3K,OAAA;QAAKwK,SAAS,EAAC,qBAAqB;QAAAG,QAAA,eAClC3K,OAAA;UAAA2K,QAAA,EAAG;QAAmD;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,eACDjL,OAAA;MAAKwK,SAAS,EAAC,gBAAgB;MAAAG,QAAA,GAC5BnJ,YAAY,iBACXxB,OAAA;QACEyK,OAAO,EAAEF,gBAAiB;QAC1BC,SAAS,EAAC,eAAe;QAAAG,QAAA,gBAEzB3K,OAAA,CAACF,SAAS;UAACsH,KAAK,EAAE;YAAExF,KAAK,EAAE,MAAM;YAAEC,MAAM,EAAE,MAAM;YAAEqJ,WAAW,EAAE;UAAS;QAAE;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAEhF;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACT,eACDjL,OAAA;QAAKwK,SAAS,EAAC,YAAY;QAAAG,QAAA,gBACzB3K,OAAA;UACEyK,OAAO,EAAEA,CAAA,KAAM;YACb;YACA,IAAInK,WAAW,EAAE;cACfA,WAAW,CAAC;gBACV6K,UAAU,EAAExJ,kBAAkB,CAACM,OAAO,CAACL,KAAK;gBAC5CwJ,WAAW,EAAEzJ,kBAAkB,CAACM,OAAO,CAACJ;cAC1C,CAAC,CAAC;YACJ;UACF,CAAE;UACF2I,SAAS,EAAC,gBAAgB;UAAAG,QAAA,gBAE1B3K,OAAA,CAACJ,QAAQ;YAACwH,KAAK,EAAE;cAAExF,KAAK,EAAE,MAAM;cAAEC,MAAM,EAAE,MAAM;cAAEqJ,WAAW,EAAE;YAAS;UAAE;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,mBAE/E;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAMlBjL,OAAA;UACCyK,OAAO,EAAEA,CAAA,KAAM;YACb,MAAMY,OAAO,GAAG5K,eAAe,KAAK,SAAS,GAAG,QAAQ,GAAG,SAAS;YACpEC,kBAAkB,CAAC2K,OAAO,CAAC;;YAE3B;YACA,IAAIA,OAAO,KAAK,QAAQ,EAAE;cACxB3L,EAAE,CAACuD,MAAM,CAACjC,MAAM,CAACiB,OAAO,CAAC,CAACc,SAAS,CAAC,YAAY,CAAC,CAACD,MAAM,CAAC,CAAC;cAC1D1B,YAAY,CAACa,OAAO,GAAG;gBAAEZ,UAAU,EAAE,IAAI;gBAAEC,QAAQ,EAAE,IAAI;gBAAEC,SAAS,EAAE;cAAM,CAAC;YAC/E;UACF,CAAE;UACFiJ,SAAS,EAAE,iBAAiB/J,eAAe,KAAK,SAAS,GAAG,QAAQ,GAAG,EAAE,EAAG;UAAAkK,QAAA,gBAE5E3K,OAAA,CAACH,QAAQ;YAACuH,KAAK,EAAE;cAAExF,KAAK,EAAE,MAAM;cAAEC,MAAM,EAAE,MAAM;cAAEqJ,WAAW,EAAE;YAAS;UAAE;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,EAC5ExK,eAAe,KAAK,SAAS,GAAG,iBAAiB,GAAG,eAAe;QAAA;UAAAqK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9D,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAII,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACpK,EAAA,CAtqBIZ,KAAK;AAAAqL,EAAA,GAALrL,KAAK;AAwqBX,eAAeA,KAAK;AAAC,IAAAqL,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}