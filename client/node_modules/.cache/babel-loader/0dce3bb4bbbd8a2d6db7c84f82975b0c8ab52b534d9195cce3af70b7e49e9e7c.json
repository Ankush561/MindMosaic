{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Mind Mosaic\\\\client\\\\src\\\\components\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport api from '../services/api.js';\nimport PlusIcon from './icons/PlusIcon';\nimport LinkIcon from './icons/LinkIcon';\nimport TrashIcon from './icons/TrashIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  nodes = [],\n  edges = [],\n  onNodeClick,\n  onNodeDoubleClick,\n  onCreateNew,\n  onCreateEdge,\n  onDeleteEdge,\n  interactionMode = 'select',\n  setInteractionMode,\n  onBackgroundClick,\n  isAnyPanelVisible /*, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete */\n}) => {\n  _s();\n  console.log(\"CURRENT INTERACTION MODE:\", interactionMode);\n  const svgRef = useRef(null);\n  const [isSvgMounted, setIsSvgMounted] = useState(false);\n  const simulationRef = useRef(); // Ref to store the D3 simulation instance\n  const linkingState = useRef({\n    sourceNode: null,\n    tempLink: null,\n    isLinking: false\n  });\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const clickTimeout = useRef(null);\n  const graphDimensionsRef = useRef({\n    width: 800,\n    height: 600\n  }); // For App.js, needs live dimensions\n  const stableViewBoxDimensionsRef = useRef({\n    width: 0,\n    height: 0\n  }); // For D3 viewBox, needs initial stable dimensions\n\n  // console.log('Graph received:', {\n  //   nodeCount: nodes.length,\n  //   edgeCount: edges.length,\n  //   mode: interactionMode\n  // });\n\n  // Debug: Log the actual nodes and edges data\n  // console.log('Nodes data:', JSON.stringify(nodes, null, 2));\n  // console.log('Edges data:', JSON.stringify(edges, null, 2));\n\n  const handleMouseMoveLinking = useCallback(event => {\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\n      return;\n    }\n    if (!svgRef.current) return;\n    const [x, y] = d3.pointer(event, svgRef.current);\n    const tempLinkNode = linkingState.current.tempLink.node();\n    if (!tempLinkNode) return;\n    const tagName = tempLinkNode.tagName.toLowerCase();\n    if (tagName === 'line') {\n      linkingState.current.tempLink.attr('x2', x).attr('y2', y);\n    } else if (tagName === 'path') {\n      linkingState.current.tempLink.attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\n    }\n  }, [svgRef, linkingState]);\n  const handleMouseUpLinking = useCallback(event => {\n    // console.log('MouseUp in linking state:', linkingState.current.isLinking);\n    // console.log('SVG mouseup.linking triggered. Target:', event.target, 'isLinking:', linkingState.current.isLinking);\n    if (linkingState.current.isLinking) {\n      if (!svgRef.current) return;\n      const clickedDomElement = event.target;\n      const closestNodeGroup = clickedDomElement.closest('.node');\n      const isNode = !!closestNodeGroup;\n\n      // console.log('SVG mouseup.linking: Is target related to a node?', isNode, 'Clicked DOM Element:', clickedDomElement, 'Closest Node Group:', closestNodeGroup);\n\n      if (!isNode) {\n        var _linkingState$current;\n        // console.log('SVG mouseup.linking: Target is NOT a node. Cancelling link.');\n        (_linkingState$current = linkingState.current.tempLink) === null || _linkingState$current === void 0 ? void 0 : _linkingState$current.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        setInteractionMode('select');\n      } else {\n        console.log('SVG mouseup.linking: Target IS a node. Deferring to node\\'s click handler for completion.');\n        // If the mouseup is on a node, the `handleNodeClick` for that target node will handle the link completion (if applicable based on drag state).\n        // Or, if it was a drag operation ending on a node, that node's click event (which might be this one)\n        // needs to correctly interpret the state. The dragended + this mouseup should correctly lead to link creation if conditions are met.\n      }\n    }\n  }, [svgRef, linkingState, setInteractionMode, onCreateEdge]); // onCreateEdge might be relevant if we decide to complete link here\n\n  useEffect(() => {\n    const svgInstance = d3.select(svgRef.current);\n    if (interactionMode === 'connect') {\n      const onMouseMoveLinking = handleMouseMoveLinking;\n      const onMouseUpLinking = handleMouseUpLinking;\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\n      // console.log('Global linking listeners ADDED to SVG for connect mode.');\n\n      return () => {\n        svgInstance.on('mousemove.linking', null);\n        svgInstance.on('mouseup.linking', null);\n        // console.log('Global linking listeners REMOVED from SVG.');\n      };\n    } else {\n      svgInstance.on('mousemove.linking', null);\n      svgInstance.on('mouseup.linking', null);\n      if (linkingState.current.isLinking) {\n        var _linkingState$current2;\n        // console.log('Exited connect mode with active link: Forcibly cleaning up.');\n        (_linkingState$current2 = linkingState.current.tempLink) === null || _linkingState$current2 === void 0 ? void 0 : _linkingState$current2.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return () => {};\n    }\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]);\n\n  // Main effect for D3 rendering and updates\n  useEffect(() => {\n    // console.log('[Graph Effect - Main D3] Running. Nodes count:', nodes.length, 'Edges count:', edges.length);\n    // console.log('[Graph Effect - Main D3] Nodes prop:', JSON.parse(JSON.stringify(nodes)));\n    // console.log('[Graph Effect - Main D3] Edges prop:', JSON.parse(JSON.stringify(edges)));\n\n    const currentSvg = svgRef.current;\n    if (!currentSvg) {\n      // console.log('[Graph Effect - Main D3] SVG ref not available yet. Aborting D3 setup.');\n      return; // SVG element isn't rendered yet (e.g. nodes are empty)\n    }\n\n    // Initialize simulation IF it doesn't exist yet AND currentSvg is available\n    if (!simulationRef.current) {\n      // console.log('[Graph Effect - Main D3] Initializing simulation.');\n      const initialWidth = graphDimensionsRef.current.width;\n      const initialHeight = graphDimensionsRef.current.height;\n      simulationRef.current = d3.forceSimulation().force('link', d3.forceLink([]).id(d => d._id).distance(150)).alpha(0).alphaDecay(1).alphaTarget(0);\n      // console.log('[Graph Effect - Main D3] Simulation initialized:', simulationRef.current);\n    }\n    const svg = d3.select(currentSvg); // Use currentSvg directly as it's confirmed not null\n    const simulation = simulationRef.current;\n\n    // This check should ideally not be hit if the above init logic works, but keep as safeguard\n    if (!simulation) {\n      // console.error('[Graph Effect - Main D3] Simulation ref is STILL not set! This is unexpected. Aborting.');\n      return;\n    }\n    // console.log('[Graph Effect - Main D3] Simulation instance retrieved:', simulation);\n\n    svg.on('click.diagnostic', event => {\n      // console.log('[SVG DIAGNOSTIC CLICK] SVG itself was clicked. Target:', event.target);\n    });\n\n    // 1. Manage the background rectangle: append if not exists, ensure attributes.\n    let backgroundRect = svg.select('rect.background');\n    if (backgroundRect.empty()) {\n      backgroundRect = svg.append('rect').attr('class', 'background');\n    }\n    backgroundRect // Ensure attributes are set on every run if they could change (e.g. dimensions)\n    .attr('width', '100%').attr('height', '100%').attr('fill', 'transparent').on('click', event => {\n      // console.log('[Background Rect Clicked Directly] Target:', event.target);\n      if (event.target.classList.contains('background')) {\n        d3.selectAll('.link').classed('selected', false);\n        setSelectedEdge(null);\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    });\n\n    // 2. Ensure dedicated groups for links and nodes exist (append if not).\n    let linkGroup = svg.select('g.links-group');\n    if (linkGroup.empty()) {\n      linkGroup = svg.append('g').attr('class', 'links-group');\n    }\n    let nodeGroup = svg.select('g.nodes-group');\n    if (nodeGroup.empty()) {\n      nodeGroup = svg.append('g').attr('class', 'nodes-group');\n    }\n\n    // 3. Manage defs for markers: append if not exists.\n    let defs = svg.select('defs');\n    if (defs.empty()) {\n      defs = svg.append('defs');\n    }\n    // Check if marker already exists before appending\n    if (defs.select('#arrow').empty()) {\n      defs.append(\"marker\").attr(\"id\", \"arrow\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 20).attr(\"refY\", 0).attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#A8C3A4\");\n    }\n\n    // Determine live dimensions for clamping and for App.js new node positioning\n    const liveContainerWidth = currentSvg.clientWidth;\n    const liveContainerHeight = currentSvg.clientHeight;\n    graphDimensionsRef.current = {\n      width: liveContainerWidth,\n      height: liveContainerHeight\n    }; // Update for App.js\n\n    // Set stable viewBox dimensions only once when valid live dimensions are first available\n    if (stableViewBoxDimensionsRef.current.width === 0 && liveContainerWidth > 0) {\n      stableViewBoxDimensionsRef.current.width = liveContainerWidth;\n      // console.log(`[Graph Dimensions] Stable viewBoxWidth SET to: ${liveContainerWidth}`);\n    }\n    if (stableViewBoxDimensionsRef.current.height === 0 && liveContainerHeight > 0) {\n      stableViewBoxDimensionsRef.current.height = liveContainerHeight;\n      // console.log(`[Graph Dimensions] Stable viewBoxHeight SET to: ${liveContainerHeight}`);\n    }\n\n    // Use stable dimensions for the viewBox if available, otherwise fallback to live (should only be for very first paint)\n    const viewBoxWidth = stableViewBoxDimensionsRef.current.width > 0 ? stableViewBoxDimensionsRef.current.width : liveContainerWidth;\n    const viewBoxHeight = stableViewBoxDimensionsRef.current.height > 0 ? stableViewBoxDimensionsRef.current.height : liveContainerHeight;\n\n    // console.log(`[Graph Dimensions] Using for viewBox: ${viewBoxWidth}x${viewBoxHeight}. Live: ${liveContainerWidth}x${liveContainerHeight}`);\n\n    svg.attr('viewBox', [0, 0, viewBoxWidth, viewBoxHeight]).attr('preserveAspectRatio', 'xMidYMid meet');\n\n    // Update node positions (fx, fy) before passing to simulation\n    nodes.forEach(node => {\n      const hasValidPositionProp = node.position && typeof node.position.x === 'number' && typeof node.position.y === 'number';\n      if (hasValidPositionProp) {\n        node.x = node.position.x;\n        node.y = node.position.y;\n        node.fx = node.position.x;\n        node.fy = node.position.y;\n      } else {\n        // Position from prop is invalid or missing. Node should be allowed to be placed by simulation.\n        // Or, if it's a new node without prior x/y, give it a random start.\n        node.x = typeof node.x === 'number' ? node.x : Math.random() * (liveContainerWidth - 100) + 50;\n        node.y = typeof node.y === 'number' ? node.y : Math.random() * (liveContainerHeight - 100) + 50;\n        node.fx = null; // Explicitly nullify fx/fy if position from prop is not definitive.\n        node.fy = null;\n\n        // For consistency or if other parts of the code expect node.position to exist:\n        // Update node.position to reflect the initial x,y that will be used by the simulation (if fx/fy are null).\n        // This ensures that if this node object is reused, its .position reflects its current state.\n        node.position = {\n          x: node.x,\n          y: node.y\n        };\n      }\n    });\n    // console.log('[D3 Data] Nodes after position init:', JSON.parse(JSON.stringify(nodes))); // Deep copy for logging\n\n    const nodeMap = {};\n    nodes.forEach(node => {\n      nodeMap[node._id] = node;\n    });\n    const processedEdges = edges.map(edge => ({\n      id: edge._id,\n      source: nodeMap[edge.source] || edge.source,\n      target: nodeMap[edge.target] || edge.target,\n      type: edge.type,\n      _id: edge._id\n    }));\n    // console.log('[D3 Data] Processed Edges:', JSON.parse(JSON.stringify(processedEdges)));\n\n    simulation.nodes(nodes).on('tick', ticked);\n    simulation.force('link').links(processedEdges);\n    const linkElements = linkGroup.selectAll('path.link').data(processedEdges, d => d.id).join('path').attr('class', 'link').attr('data-id', d => d.id).attr('stroke', '#A8C3A4').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)');\n    linkElements.on('click', handleEdgeClick);\n    // console.log('[D3 Elements] linkElements count:', linkElements.size());\n\n    const nodeElements = nodeGroup.selectAll('g.node').data(nodes, d => d._id).join(enter => {\n      const g = enter.append('g').attr('class', 'node').attr('data-id', d => d._id).call(dragBehavior(simulation, svg, liveContainerWidth, liveContainerHeight));\n      // console.log('Node elements:', nodeGroup.selectAll('g.node').size());\n      g.append('circle').attr('r', 12).attr('fill', '#2E7D32').attr('stroke', '#1B5E20').attr('stroke-width', 1.5).style('pointer-events', 'all');\n      g.append('text').text(d => {\n        var _d$_id;\n        return d.title || ((_d$_id = d._id) === null || _d$_id === void 0 ? void 0 : _d$_id.substring(0, 6));\n      }).attr('x', 16).attr('y', 5).attr('fill', '#FAF3E0').attr('text-anchor', 'start');\n      return g;\n    }, update => update, update => update.call(dragBehavior(simulation, svg, liveContainerWidth, liveContainerHeight)),\n    // Re-bind on updates\n    exit => exit.remove());\n    // console.log('[D3 Elements] nodeElements count:', nodeElements.size());\n\n    const circles = nodeElements.select('circle');\n    circles.on('click', handleNodeClick).style('pointer-events', 'all');\n    function handleEdgeClick(event, d) {\n      console.log('[Edge Click] Attempted on edge:', d.id, 'Mode:', interactionMode);\n      event.stopPropagation();\n      if (interactionMode === 'select') {\n        d3.selectAll('.link').classed('selected', false);\n        d3.select(event.currentTarget).classed('selected', true);\n        setSelectedEdge(d);\n        if (onNodeClick) {\n          // This onNodeClick(null) is to deselect any selected node\n          console.log(\"handleEdgeClick: Calling onNodeClick(null) to deselect node.\");\n          onNodeClick(null); // Deselects any selected node in App.js\n        } else {\n          console.log(\"handleEdgeClick: onNodeClick prop is undefined (cannot deselect node).\");\n        }\n      } else {\n        console.log(\"handleEdgeClick: Not in 'select' mode. Current mode:\", interactionMode, \"No action taken.\");\n      }\n    }\n    function ticked() {\n      // console.log('[Ticked] Simulation tick occurred.');\n      // if (nodes.length > 0 && nodes[0]) {\n      //     console.log(`[Ticked] Sample node 0: x=${nodes[0].x}, y=${nodes[0].y}, fx=${nodes[0].fx}, fy=${nodes[0].fy}`);\n      // }\n      // if (linkElements.size() > 0 && processedEdges.length > 0 && processedEdges[0]) {\n      //   const firstEdge = processedEdges[0];\n      //   if (firstEdge && firstEdge.source && typeof firstEdge.source.x === 'number' && firstEdge.target && typeof firstEdge.target.x === 'number') {\n      //        console.log(`[Ticked] Sample link 0 source: x=${firstEdge.source.x}, y=${firstEdge.source.y}. Target: x=${firstEdge.target.x}, y=${firstEdge.target.y}`);\n      //   }\n      // }\n\n      linkElements.attr('d', d => {\n        const sourceXPos = d.source.fx != null ? d.source.fx : d.source.x;\n        const sourceYPos = d.source.fy != null ? d.source.fy : d.source.y;\n        const targetXPos = d.target.fx != null ? d.target.fx : d.target.x;\n        const targetYPos = d.target.fy != null ? d.target.fy : d.target.y;\n        const sourceX = typeof sourceXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, sourceXPos)) : 0;\n        const sourceY = typeof sourceYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, sourceYPos)) : 0;\n        const targetX = typeof targetXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, targetXPos)) : 0;\n        const targetY = typeof targetYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, targetYPos)) : 0;\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\n      });\n      nodeElements.attr('transform', d => {\n        const xPos = d.fx != null ? d.fx : d.x;\n        const yPos = d.fy != null ? d.fy : d.y;\n        const x = typeof xPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, xPos)) : 0;\n        const y = typeof yPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, yPos)) : 0;\n        return `translate(${x},${y})`;\n      });\n    }\n\n    // TEMPORARILY COMMENT OUT THE SIMULATION KICK TO TEST ZOOM ISSUE\n    // simulation.alpha(0.3).restart(); // Previous state\n    simulation.alpha(0.1).restart(); // Re-enable with a gentle kick\n    simulation.alphaTarget(0); // Ensure this runs to keep the simulation cool\n    console.log('[Graph Effect - Main D3] Gentle simulation kick (alpha 0.1) re-enabled. Alpha target set to 0.');\n\n    // Cleanup for the main useEffect\n    return () => {\n      svg.on('click.diagnostic', null);\n      // Do not stop simulation here as it's persistent. Stop on unmount.\n      if (linkingState.current.tempLink) {\n        linkingState.current.tempLink.remove();\n      }\n      linkingState.current = {\n        sourceNode: null,\n        tempLink: null,\n        isLinking: false\n      };\n      if (clickTimeout.current) {\n        clearTimeout(clickTimeout.current);\n      }\n    };\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, onDeleteEdge, interactionMode, setInteractionMode, onBackgroundClick, isAnyPanelVisible, handleMouseMoveLinking, handleMouseUpLinking]);\n\n  // Add a separate useEffect for stopping the simulation on component unmount\n  useEffect(() => {\n    return () => {\n      if (simulationRef.current) {\n        console.log('[Graph Unmount] Stopping simulation.');\n        simulationRef.current.stop();\n      }\n    };\n  }, []); // Empty dependency array means this runs once on mount for the return (cleanup) function\n\n  // Handle keyboard delete for selected edges\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n          onDeleteEdge(selectedEdge._id);\n          setSelectedEdge(null);\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedEdge, onDeleteEdge]);\n  useEffect(() => {\n    if (svgRef.current) {\n      setIsSvgMounted(true);\n    }\n    return () => setIsSvgMounted(false);\n  }, []);\n  function dragBehavior(sim, svgInstance, containerWidth, containerHeight) {\n    // Store the initial interaction mode when drag starts\n    let initialInteractionMode = interactionMode;\n    let isConnectModeDrag = false;\n    function dragstarted(event, d) {\n      initialInteractionMode = interactionMode;\n      isConnectModeDrag = initialInteractionMode === 'connect';\n      console.log('Drag started - Mode:', initialInteractionMode, 'Connect drag:', isConnectModeDrag);\n      if (isConnectModeDrag) {\n        linkingState.current.isLinking = true;\n        linkingState.current.sourceNode = d;\n        if (svgInstance) {\n          linkingState.current.tempLink = d3.select(svgInstance).append('path').attr('class', 'temp-link').attr('d', `M${d.x},${d.y}L${d.x},${d.y}`).attr('stroke-dasharray', '5,5').attr('stroke', '#B87333').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)').raise();\n        }\n        event.sourceEvent.stopPropagation();\n      } else {\n        if (!event.active) sim.alphaTarget(0.3).restart();\n        d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\n        d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\n      }\n    }\n    function dragged(event, d) {\n      if (isConnectModeDrag && linkingState.current.isLinking) {\n        console.log('Updating temp link in connect mode');\n        event.sourceEvent.stopPropagation();\n        const [x, y] = d3.pointer(event, svgInstance);\n        linkingState.current.tempLink.attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\n      } else {\n        event.sourceEvent.stopPropagation();\n        d.fx = Math.max(15, Math.min(containerWidth - 15, event.x));\n        d.fy = Math.max(15, Math.min(containerHeight - 15, event.y));\n        d.position = {\n          x: d.fx,\n          y: d.fy\n        };\n      }\n    }\n    async function dragended(event, d) {\n      console.log('Drag ended - Initial mode:', initialInteractionMode, 'Current mode:', interactionMode);\n      if (isConnectModeDrag && linkingState.current.isLinking) {\n        var _linkingState$current3;\n        const releaseTargetElement = document.elementFromPoint(event.sourceEvent.clientX, event.sourceEvent.clientY);\n        const closestNodeGroup = releaseTargetElement === null || releaseTargetElement === void 0 ? void 0 : releaseTargetElement.closest('.node');\n        if (closestNodeGroup) {\n          const targetNodeData = d3.select(closestNodeGroup).datum();\n          if (targetNodeData && linkingState.current.sourceNode && linkingState.current.sourceNode._id !== targetNodeData._id) {\n            console.log(`Creating edge from ${linkingState.current.sourceNode._id} to ${targetNodeData._id}`);\n            if (onCreateEdge) {\n              try {\n                await onCreateEdge(linkingState.current.sourceNode._id, targetNodeData._id);\n              } catch (err) {\n                console.error('Failed to create edge:', err);\n              }\n            }\n          }\n        }\n\n        // Clean up\n        (_linkingState$current3 = linkingState.current.tempLink) === null || _linkingState$current3 === void 0 ? void 0 : _linkingState$current3.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      } else {\n        const wasClick = Math.abs(event.dx) < 2 && Math.abs(event.dy) < 2;\n        if (!wasClick) {\n          if (api !== null && api !== void 0 && api.updateNode) {\n            await api.updateNode(d._id, {\n              position: {\n                x: d.fx,\n                y: d.fy\n              }\n            }).catch(err => console.error(\"Failed to update node position:\", err));\n          }\n        }\n      }\n    }\n    return d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended);\n  }\n  const handleNodeClick = (event, d) => {\n    console.log(`[Node Click Handler] Node: ${d._id}, Mode: ${interactionMode}, DefaultPrevented: ${event.defaultPrevented}`);\n    if (event.defaultPrevented) {\n      console.log('[Node Click Handler] DefaultPrevented, returning early (likely drag related).');\n      return;\n    }\n    if (clickTimeout.current) {\n      // Double-click\n      clearTimeout(clickTimeout.current);\n      clickTimeout.current = null;\n      console.log(`[Node Click Handler] Double-click on node ${d._id}.`);\n      if (onNodeDoubleClick) {\n        onNodeDoubleClick(d);\n      }\n      return;\n    }\n\n    // For single-click, set a timeout. \n    clickTimeout.current = setTimeout(() => {\n      clickTimeout.current = null;\n      console.log(`[Node Click Handler] Timeout for single click on ${d._id}. Mode: ${interactionMode}.`);\n      if (interactionMode === 'connect') {\n        console.log(`[Node Click Handler - Connect Mode] Single click on node ${d._id}. No action for click-linking.`);\n      } else {\n        // interactionMode === 'select'\n        console.log(`[Node Click Handler - Select Mode] Processing single click for node ${d._id}.`);\n        setSelectedEdge(null);\n        if (onNodeClick) {\n          onNodeClick(d);\n        }\n      }\n    }, 250);\n  };\n\n  // Handle edge deletion\n  const handleDeleteEdge = () => {\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n      onDeleteEdge(selectedEdge._id);\n      setSelectedEdge(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-wrapper\",\n    onClick: e => {\n      console.log('[Graph Wrapper Click] Target:', e.target, 'CurrentTarget:', e.currentTarget);\n      if (e.target === e.currentTarget) {\n        console.log('[Graph Wrapper Click] Click was directly on wrapper.');\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    },\n    children: [nodes && nodes.length > 0 ? /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      className: \"graph-svg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-svg empty-graph-placeholder\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-graph-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This canvas is empty. Start by creating a new node!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 568,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-controls\",\n      children: [selectedEdge && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteEdge,\n        className: \"button danger\",\n        children: [/*#__PURE__*/_jsxDEV(TrashIcon, {\n          style: {\n            width: '1rem',\n            height: '1rem',\n            marginRight: '0.5rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 13\n        }, this), \"Remove Edge\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            // Pass current dimensions when calling onCreateNew\n            if (onCreateNew) {\n              onCreateNew({\n                graphWidth: graphDimensionsRef.current.width,\n                graphHeight: graphDimensionsRef.current.height\n              });\n            }\n          },\n          className: \"button primary\",\n          children: [/*#__PURE__*/_jsxDEV(PlusIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 13\n          }, this), \"Create New Node\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (interactionMode === 'connect') {\n              var _linkingState$current4;\n              // Clean up any existing temp link\n              (_linkingState$current4 = linkingState.current.tempLink) === null || _linkingState$current4 === void 0 ? void 0 : _linkingState$current4.remove();\n              linkingState.current.isLinking = false;\n              linkingState.current.sourceNode = null;\n              setInteractionMode('select');\n            } else {\n              setInteractionMode('connect');\n            }\n          },\n          className: `button accent ${interactionMode === 'connect' ? 'active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(LinkIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 3\n          }, this), interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 556,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"iP/yIuDoXxtRaNRpN0l1DhbZ/go=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","d3","api","PlusIcon","LinkIcon","TrashIcon","jsxDEV","_jsxDEV","Graph","nodes","edges","onNodeClick","onNodeDoubleClick","onCreateNew","onCreateEdge","onDeleteEdge","interactionMode","setInteractionMode","onBackgroundClick","isAnyPanelVisible","_s","console","log","svgRef","isSvgMounted","setIsSvgMounted","simulationRef","linkingState","sourceNode","tempLink","isLinking","selectedEdge","setSelectedEdge","clickTimeout","graphDimensionsRef","width","height","stableViewBoxDimensionsRef","handleMouseMoveLinking","event","current","x","y","pointer","tempLinkNode","node","tagName","toLowerCase","attr","handleMouseUpLinking","clickedDomElement","target","closestNodeGroup","closest","isNode","_linkingState$current","remove","svgInstance","select","onMouseMoveLinking","onMouseUpLinking","on","_linkingState$current2","currentSvg","initialWidth","initialHeight","forceSimulation","force","forceLink","id","d","_id","distance","alpha","alphaDecay","alphaTarget","svg","simulation","backgroundRect","empty","append","classList","contains","selectAll","classed","linkGroup","nodeGroup","defs","liveContainerWidth","clientWidth","liveContainerHeight","clientHeight","viewBoxWidth","viewBoxHeight","forEach","hasValidPositionProp","position","fx","fy","Math","random","nodeMap","processedEdges","map","edge","source","type","ticked","links","linkElements","data","join","handleEdgeClick","nodeElements","enter","g","call","dragBehavior","style","text","_d$_id","title","substring","update","exit","circles","handleNodeClick","stopPropagation","currentTarget","sourceXPos","sourceYPos","targetXPos","targetYPos","sourceX","max","min","sourceY","targetX","targetY","xPos","yPos","restart","clearTimeout","stop","handleKeyDown","key","window","addEventListener","removeEventListener","sim","containerWidth","containerHeight","initialInteractionMode","isConnectModeDrag","dragstarted","raise","sourceEvent","active","dragged","dragended","_linkingState$current3","releaseTargetElement","document","elementFromPoint","clientX","clientY","targetNodeData","datum","err","error","wasClick","abs","dx","dy","updateNode","catch","drag","defaultPrevented","setTimeout","handleDeleteEdge","className","onClick","e","children","length","ref","fileName","_jsxFileName","lineNumber","columnNumber","marginRight","graphWidth","graphHeight","_linkingState$current4","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Mind Mosaic/client/src/components/graph.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\r\nimport * as d3 from 'd3';\r\nimport './Graph.css';\r\nimport api from '../services/api.js';\r\nimport PlusIcon from './icons/PlusIcon';\r\nimport LinkIcon from './icons/LinkIcon';\r\nimport TrashIcon from './icons/TrashIcon';\r\n\r\nconst Graph = ({ nodes = [], edges = [], onNodeClick, onNodeDoubleClick, onCreateNew, onCreateEdge, onDeleteEdge, interactionMode = 'select', setInteractionMode, onBackgroundClick, isAnyPanelVisible /*, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete */ }) => {\r\n  console.log(\"CURRENT INTERACTION MODE:\", interactionMode);\r\n  const svgRef = useRef(null);\r\n  const [isSvgMounted, setIsSvgMounted] = useState(false);\r\n  const simulationRef = useRef(); // Ref to store the D3 simulation instance\r\n  const linkingState = useRef({ sourceNode: null, tempLink: null, isLinking: false });\r\n  const [selectedEdge, setSelectedEdge] = useState(null);\r\n  const clickTimeout = useRef(null);\r\n  const graphDimensionsRef = useRef({ width: 800, height: 600 }); // For App.js, needs live dimensions\r\n  const stableViewBoxDimensionsRef = useRef({ width: 0, height: 0 }); // For D3 viewBox, needs initial stable dimensions\r\n\r\n  // console.log('Graph received:', {\r\n  //   nodeCount: nodes.length,\r\n  //   edgeCount: edges.length,\r\n  //   mode: interactionMode\r\n  // });\r\n\r\n  // Debug: Log the actual nodes and edges data\r\n  // console.log('Nodes data:', JSON.stringify(nodes, null, 2));\r\n  // console.log('Edges data:', JSON.stringify(edges, null, 2));\r\n\r\n  const handleMouseMoveLinking = useCallback((event) => {\r\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\r\n      return;\r\n    }\r\n    if (!svgRef.current) return;\r\n    const [x, y] = d3.pointer(event, svgRef.current);\r\n\r\n    const tempLinkNode = linkingState.current.tempLink.node();\r\n    if (!tempLinkNode) return;\r\n\r\n    const tagName = tempLinkNode.tagName.toLowerCase();\r\n\r\n    if (tagName === 'line') {\r\n      linkingState.current.tempLink.attr('x2', x).attr('y2', y);\r\n    } else if (tagName === 'path') {\r\n      linkingState.current.tempLink\r\n        .attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\r\n    }\r\n  }, [svgRef, linkingState]);\r\n\r\n  const handleMouseUpLinking = useCallback((event) => {\r\n    // console.log('MouseUp in linking state:', linkingState.current.isLinking);\r\n    // console.log('SVG mouseup.linking triggered. Target:', event.target, 'isLinking:', linkingState.current.isLinking);\r\n    if (linkingState.current.isLinking) {\r\n      if (!svgRef.current) return;\r\n\r\n      const clickedDomElement = event.target;\r\n      const closestNodeGroup = clickedDomElement.closest('.node');\r\n      const isNode = !!closestNodeGroup;\r\n\r\n      // console.log('SVG mouseup.linking: Is target related to a node?', isNode, 'Clicked DOM Element:', clickedDomElement, 'Closest Node Group:', closestNodeGroup);\r\n\r\n      if (!isNode) {\r\n        // console.log('SVG mouseup.linking: Target is NOT a node. Cancelling link.');\r\n        linkingState.current.tempLink?.remove();\r\n        linkingState.current.isLinking = false;\r\n        linkingState.current.sourceNode = null;\r\n        linkingState.current.tempLink = null;\r\n        setInteractionMode('select');\r\n      } else {\r\n        console.log('SVG mouseup.linking: Target IS a node. Deferring to node\\'s click handler for completion.');\r\n        // If the mouseup is on a node, the `handleNodeClick` for that target node will handle the link completion (if applicable based on drag state).\r\n        // Or, if it was a drag operation ending on a node, that node's click event (which might be this one)\r\n        // needs to correctly interpret the state. The dragended + this mouseup should correctly lead to link creation if conditions are met.\r\n      }\r\n    }\r\n  }, [svgRef, linkingState, setInteractionMode, onCreateEdge]); // onCreateEdge might be relevant if we decide to complete link here\r\n\r\n  useEffect(() => {\r\n    const svgInstance = d3.select(svgRef.current);\r\n\r\n    if (interactionMode === 'connect') {\r\n      const onMouseMoveLinking = handleMouseMoveLinking;\r\n      const onMouseUpLinking = handleMouseUpLinking;\r\n\r\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\r\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\r\n      // console.log('Global linking listeners ADDED to SVG for connect mode.');\r\n\r\n      return () => {\r\n        svgInstance.on('mousemove.linking', null);\r\n        svgInstance.on('mouseup.linking', null);\r\n        // console.log('Global linking listeners REMOVED from SVG.');\r\n      };\r\n    } else {\r\n      svgInstance.on('mousemove.linking', null);\r\n      svgInstance.on('mouseup.linking', null);\r\n\r\n      if (linkingState.current.isLinking) {\r\n        // console.log('Exited connect mode with active link: Forcibly cleaning up.');\r\n        linkingState.current.tempLink?.remove();\r\n        linkingState.current.isLinking = false;\r\n        linkingState.current.sourceNode = null;\r\n        linkingState.current.tempLink = null;\r\n      }\r\n      return () => { };\r\n    }\r\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]);\r\n\r\n  // Main effect for D3 rendering and updates\r\n  useEffect(() => {\r\n    // console.log('[Graph Effect - Main D3] Running. Nodes count:', nodes.length, 'Edges count:', edges.length);\r\n    // console.log('[Graph Effect - Main D3] Nodes prop:', JSON.parse(JSON.stringify(nodes)));\r\n    // console.log('[Graph Effect - Main D3] Edges prop:', JSON.parse(JSON.stringify(edges)));\r\n\r\n    const currentSvg = svgRef.current;\r\n    if (!currentSvg) {\r\n      // console.log('[Graph Effect - Main D3] SVG ref not available yet. Aborting D3 setup.');\r\n      return; // SVG element isn't rendered yet (e.g. nodes are empty)\r\n    }\r\n\r\n    // Initialize simulation IF it doesn't exist yet AND currentSvg is available\r\n    if (!simulationRef.current) {\r\n      // console.log('[Graph Effect - Main D3] Initializing simulation.');\r\n      const initialWidth = graphDimensionsRef.current.width;\r\n      const initialHeight = graphDimensionsRef.current.height;\r\n      simulationRef.current = d3.forceSimulation()\r\n        .force('link', d3.forceLink([]).id(d => d._id).distance(150))\r\n        .alpha(0).alphaDecay(1).alphaTarget(0);\r\n      // console.log('[Graph Effect - Main D3] Simulation initialized:', simulationRef.current);\r\n    }\r\n\r\n    const svg = d3.select(currentSvg); // Use currentSvg directly as it's confirmed not null\r\n    const simulation = simulationRef.current;\r\n\r\n    // This check should ideally not be hit if the above init logic works, but keep as safeguard\r\n    if (!simulation) {\r\n      // console.error('[Graph Effect - Main D3] Simulation ref is STILL not set! This is unexpected. Aborting.');\r\n      return;\r\n    }\r\n    // console.log('[Graph Effect - Main D3] Simulation instance retrieved:', simulation);\r\n\r\n    svg.on('click.diagnostic', (event) => {\r\n      // console.log('[SVG DIAGNOSTIC CLICK] SVG itself was clicked. Target:', event.target);\r\n    });\r\n\r\n    // 1. Manage the background rectangle: append if not exists, ensure attributes.\r\n    let backgroundRect = svg.select('rect.background');\r\n    if (backgroundRect.empty()) {\r\n      backgroundRect = svg.append('rect')\r\n        .attr('class', 'background');\r\n    }\r\n    backgroundRect // Ensure attributes are set on every run if they could change (e.g. dimensions)\r\n      .attr('width', '100%')\r\n      .attr('height', '100%')\r\n      .attr('fill', 'transparent')\r\n      .on('click', (event) => {\r\n        // console.log('[Background Rect Clicked Directly] Target:', event.target);\r\n        if (event.target.classList.contains('background')) {\r\n          d3.selectAll('.link').classed('selected', false);\r\n          setSelectedEdge(null);\r\n          if (onBackgroundClick) {\r\n            onBackgroundClick();\r\n          }\r\n        }\r\n      });\r\n\r\n    // 2. Ensure dedicated groups for links and nodes exist (append if not).\r\n    let linkGroup = svg.select('g.links-group');\r\n    if (linkGroup.empty()) {\r\n      linkGroup = svg.append('g').attr('class', 'links-group');\r\n    }\r\n    let nodeGroup = svg.select('g.nodes-group');\r\n    if (nodeGroup.empty()) {\r\n      nodeGroup = svg.append('g').attr('class', 'nodes-group');\r\n    }\r\n\r\n    // 3. Manage defs for markers: append if not exists.\r\n    let defs = svg.select('defs');\r\n    if (defs.empty()) {\r\n      defs = svg.append('defs');\r\n    }\r\n    // Check if marker already exists before appending\r\n    if (defs.select('#arrow').empty()) {\r\n      defs.append(\"marker\")\r\n        .attr(\"id\", \"arrow\")\r\n        .attr(\"viewBox\", \"0 -5 10 10\")\r\n        .attr(\"refX\", 20)\r\n        .attr(\"refY\", 0)\r\n        .attr(\"markerWidth\", 6)\r\n        .attr(\"markerHeight\", 6)\r\n        .attr(\"orient\", \"auto\")\r\n        .append(\"path\")\r\n        .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n        .attr(\"fill\", \"#A8C3A4\");\r\n    }\r\n\r\n    // Determine live dimensions for clamping and for App.js new node positioning\r\n    const liveContainerWidth = currentSvg.clientWidth;\r\n    const liveContainerHeight = currentSvg.clientHeight;\r\n    graphDimensionsRef.current = { width: liveContainerWidth, height: liveContainerHeight }; // Update for App.js\r\n\r\n    // Set stable viewBox dimensions only once when valid live dimensions are first available\r\n    if (stableViewBoxDimensionsRef.current.width === 0 && liveContainerWidth > 0) {\r\n      stableViewBoxDimensionsRef.current.width = liveContainerWidth;\r\n      // console.log(`[Graph Dimensions] Stable viewBoxWidth SET to: ${liveContainerWidth}`);\r\n    }\r\n    if (stableViewBoxDimensionsRef.current.height === 0 && liveContainerHeight > 0) {\r\n      stableViewBoxDimensionsRef.current.height = liveContainerHeight;\r\n      // console.log(`[Graph Dimensions] Stable viewBoxHeight SET to: ${liveContainerHeight}`);\r\n    }\r\n\r\n    // Use stable dimensions for the viewBox if available, otherwise fallback to live (should only be for very first paint)\r\n    const viewBoxWidth = stableViewBoxDimensionsRef.current.width > 0 ? stableViewBoxDimensionsRef.current.width : liveContainerWidth;\r\n    const viewBoxHeight = stableViewBoxDimensionsRef.current.height > 0 ? stableViewBoxDimensionsRef.current.height : liveContainerHeight;\r\n\r\n    // console.log(`[Graph Dimensions] Using for viewBox: ${viewBoxWidth}x${viewBoxHeight}. Live: ${liveContainerWidth}x${liveContainerHeight}`);\r\n\r\n    svg\r\n      .attr('viewBox', [0, 0, viewBoxWidth, viewBoxHeight])\r\n      .attr('preserveAspectRatio', 'xMidYMid meet');\r\n\r\n    // Update node positions (fx, fy) before passing to simulation\r\n    nodes.forEach(node => {\r\n      const hasValidPositionProp = node.position && typeof node.position.x === 'number' && typeof node.position.y === 'number';\r\n\r\n      if (hasValidPositionProp) {\r\n        node.x = node.position.x;\r\n        node.y = node.position.y;\r\n        node.fx = node.position.x;\r\n        node.fy = node.position.y;\r\n      } else {\r\n        // Position from prop is invalid or missing. Node should be allowed to be placed by simulation.\r\n        // Or, if it's a new node without prior x/y, give it a random start.\r\n        node.x = typeof node.x === 'number' ? node.x : (Math.random() * (liveContainerWidth - 100) + 50);\r\n        node.y = typeof node.y === 'number' ? node.y : (Math.random() * (liveContainerHeight - 100) + 50);\r\n        node.fx = null; // Explicitly nullify fx/fy if position from prop is not definitive.\r\n        node.fy = null;\r\n\r\n        // For consistency or if other parts of the code expect node.position to exist:\r\n        // Update node.position to reflect the initial x,y that will be used by the simulation (if fx/fy are null).\r\n        // This ensures that if this node object is reused, its .position reflects its current state.\r\n        node.position = { x: node.x, y: node.y };\r\n      }\r\n    });\r\n    // console.log('[D3 Data] Nodes after position init:', JSON.parse(JSON.stringify(nodes))); // Deep copy for logging\r\n\r\n    const nodeMap = {};\r\n    nodes.forEach(node => { nodeMap[node._id] = node; });\r\n    const processedEdges = edges.map(edge => ({\r\n      id: edge._id,\r\n      source: nodeMap[edge.source] || edge.source,\r\n      target: nodeMap[edge.target] || edge.target,\r\n      type: edge.type,\r\n      _id: edge._id\r\n    }));\r\n    // console.log('[D3 Data] Processed Edges:', JSON.parse(JSON.stringify(processedEdges)));\r\n\r\n    simulation\r\n      .nodes(nodes)\r\n      .on('tick', ticked);\r\n    simulation.force('link').links(processedEdges);\r\n\r\n    const linkElements = linkGroup.selectAll('path.link')\r\n      .data(processedEdges, d => d.id)\r\n      .join('path')\r\n      .attr('class', 'link')\r\n      .attr('data-id', d => d.id)\r\n      .attr('stroke', '#A8C3A4')\r\n      .attr('stroke-width', 2)\r\n      .attr('fill', 'none')\r\n      .attr('marker-end', 'url(#arrow)');\r\n    linkElements.on('click', handleEdgeClick);\r\n    // console.log('[D3 Elements] linkElements count:', linkElements.size());\r\n\r\n    const nodeElements = nodeGroup.selectAll('g.node')\r\n      .data(nodes, d => d._id)\r\n      .join(\r\n        enter => {\r\n          const g = enter.append('g')\r\n            .attr('class', 'node')\r\n            .attr('data-id', d => d._id)\r\n            .call(dragBehavior(simulation, svg, liveContainerWidth, liveContainerHeight));\r\n          // console.log('Node elements:', nodeGroup.selectAll('g.node').size());\r\n          g.append('circle')\r\n            .attr('r', 12)\r\n            .attr('fill', '#2E7D32')\r\n            .attr('stroke', '#1B5E20')\r\n            .attr('stroke-width', 1.5)\r\n            .style('pointer-events', 'all');\r\n          g.append('text')\r\n            .text(d => d.title || d._id?.substring(0, 6))\r\n            .attr('x', 16).attr('y', 5).attr('fill', '#FAF3E0').attr('text-anchor', 'start');\r\n          return g;\r\n        },\r\n        update => update,\r\n        update => update.call(dragBehavior(simulation, svg, liveContainerWidth, liveContainerHeight)), // Re-bind on updates\r\n        exit => exit.remove()\r\n      );\r\n    // console.log('[D3 Elements] nodeElements count:', nodeElements.size());\r\n\r\n    const circles = nodeElements.select('circle');\r\n    circles.on('click', handleNodeClick).style('pointer-events', 'all');\r\n\r\n    function handleEdgeClick(event, d) {\r\n      console.log('[Edge Click] Attempted on edge:', d.id, 'Mode:', interactionMode);\r\n      event.stopPropagation();\r\n      if (interactionMode === 'select') {\r\n        d3.selectAll('.link').classed('selected', false);\r\n        d3.select(event.currentTarget).classed('selected', true);\r\n        setSelectedEdge(d);\r\n        if (onNodeClick) { // This onNodeClick(null) is to deselect any selected node\r\n          console.log(\"handleEdgeClick: Calling onNodeClick(null) to deselect node.\");\r\n          onNodeClick(null); // Deselects any selected node in App.js\r\n        } else {\r\n          console.log(\"handleEdgeClick: onNodeClick prop is undefined (cannot deselect node).\");\r\n        }\r\n      } else {\r\n        console.log(\"handleEdgeClick: Not in 'select' mode. Current mode:\", interactionMode, \"No action taken.\");\r\n      }\r\n    }\r\n\r\n    function ticked() {\r\n      // console.log('[Ticked] Simulation tick occurred.');\r\n      // if (nodes.length > 0 && nodes[0]) {\r\n      //     console.log(`[Ticked] Sample node 0: x=${nodes[0].x}, y=${nodes[0].y}, fx=${nodes[0].fx}, fy=${nodes[0].fy}`);\r\n      // }\r\n      // if (linkElements.size() > 0 && processedEdges.length > 0 && processedEdges[0]) {\r\n      //   const firstEdge = processedEdges[0];\r\n      //   if (firstEdge && firstEdge.source && typeof firstEdge.source.x === 'number' && firstEdge.target && typeof firstEdge.target.x === 'number') {\r\n      //        console.log(`[Ticked] Sample link 0 source: x=${firstEdge.source.x}, y=${firstEdge.source.y}. Target: x=${firstEdge.target.x}, y=${firstEdge.target.y}`);\r\n      //   }\r\n      // }\r\n\r\n      linkElements.attr('d', d => {\r\n        const sourceXPos = d.source.fx != null ? d.source.fx : d.source.x;\r\n        const sourceYPos = d.source.fy != null ? d.source.fy : d.source.y;\r\n        const targetXPos = d.target.fx != null ? d.target.fx : d.target.x;\r\n        const targetYPos = d.target.fy != null ? d.target.fy : d.target.y;\r\n\r\n        const sourceX = typeof sourceXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, sourceXPos)) : 0;\r\n        const sourceY = typeof sourceYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, sourceYPos)) : 0;\r\n        const targetX = typeof targetXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, targetXPos)) : 0;\r\n        const targetY = typeof targetYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, targetYPos)) : 0;\r\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\r\n      });\r\n\r\n      nodeElements.attr('transform', d => {\r\n        const xPos = d.fx != null ? d.fx : d.x;\r\n        const yPos = d.fy != null ? d.fy : d.y;\r\n\r\n        const x = typeof xPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, xPos)) : 0;\r\n        const y = typeof yPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, yPos)) : 0;\r\n        return `translate(${x},${y})`;\r\n      });\r\n    }\r\n\r\n    // TEMPORARILY COMMENT OUT THE SIMULATION KICK TO TEST ZOOM ISSUE\r\n    // simulation.alpha(0.3).restart(); // Previous state\r\n    simulation.alpha(0.1).restart(); // Re-enable with a gentle kick\r\n    simulation.alphaTarget(0); // Ensure this runs to keep the simulation cool\r\n    console.log('[Graph Effect - Main D3] Gentle simulation kick (alpha 0.1) re-enabled. Alpha target set to 0.');\r\n\r\n    // Cleanup for the main useEffect\r\n    return () => {\r\n      svg.on('click.diagnostic', null);\r\n      // Do not stop simulation here as it's persistent. Stop on unmount.\r\n      if (linkingState.current.tempLink) {\r\n        linkingState.current.tempLink.remove();\r\n      }\r\n      linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n      if (clickTimeout.current) {\r\n        clearTimeout(clickTimeout.current);\r\n      }\r\n    };\r\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, onDeleteEdge, interactionMode, setInteractionMode, onBackgroundClick, isAnyPanelVisible, handleMouseMoveLinking, handleMouseUpLinking]);\r\n\r\n  // Add a separate useEffect for stopping the simulation on component unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (simulationRef.current) {\r\n        console.log('[Graph Unmount] Stopping simulation.');\r\n        simulationRef.current.stop();\r\n      }\r\n    };\r\n  }, []); // Empty dependency array means this runs once on mount for the return (cleanup) function\r\n\r\n  // Handle keyboard delete for selected edges\r\n  useEffect(() => {\r\n    const handleKeyDown = (event) => {\r\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\r\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\r\n          onDeleteEdge(selectedEdge._id);\r\n          setSelectedEdge(null);\r\n        }\r\n      }\r\n    };\r\n\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [selectedEdge, onDeleteEdge]);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      setIsSvgMounted(true);\r\n    }\r\n    return () => setIsSvgMounted(false);\r\n  }, []);\r\nfunction dragBehavior(sim, svgInstance, containerWidth, containerHeight) {\r\n  // Store the initial interaction mode when drag starts\r\n  let initialInteractionMode = interactionMode;\r\n  let isConnectModeDrag = false;\r\n\r\n  function dragstarted(event, d) {\r\n    initialInteractionMode = interactionMode;\r\n    isConnectModeDrag = initialInteractionMode === 'connect';\r\n    \r\n    console.log('Drag started - Mode:', initialInteractionMode, \r\n               'Connect drag:', isConnectModeDrag);\r\n\r\n    if (isConnectModeDrag) {\r\n      linkingState.current.isLinking = true;\r\n      linkingState.current.sourceNode = d;\r\n      if (svgInstance) {\r\n        linkingState.current.tempLink = d3.select(svgInstance).append('path')\r\n          .attr('class', 'temp-link')\r\n          .attr('d', `M${d.x},${d.y}L${d.x},${d.y}`)\r\n          .attr('stroke-dasharray', '5,5')\r\n          .attr('stroke', '#B87333')\r\n          .attr('stroke-width', 2)\r\n          .attr('fill', 'none')\r\n          .attr('marker-end', 'url(#arrow)')\r\n          .raise();\r\n      }\r\n      event.sourceEvent.stopPropagation();\r\n    } else {\r\n      if (!event.active) sim.alphaTarget(0.3).restart();\r\n      d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\r\n      d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\r\n    }\r\n  }\r\n\r\n  function dragged(event, d) {\r\n    if (isConnectModeDrag && linkingState.current.isLinking) {\r\n      console.log('Updating temp link in connect mode');\r\n      event.sourceEvent.stopPropagation();\r\n      const [x, y] = d3.pointer(event, svgInstance);\r\n      linkingState.current.tempLink\r\n        .attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\r\n    } else {\r\n      event.sourceEvent.stopPropagation();\r\n      d.fx = Math.max(15, Math.min(containerWidth - 15, event.x));\r\n      d.fy = Math.max(15, Math.min(containerHeight - 15, event.y));\r\n      d.position = { x: d.fx, y: d.fy };\r\n    }\r\n  }\r\n\r\n  async function dragended(event, d) {\r\n    console.log('Drag ended - Initial mode:', initialInteractionMode, \r\n               'Current mode:', interactionMode);\r\n\r\n    if (isConnectModeDrag && linkingState.current.isLinking) {\r\n      const releaseTargetElement = document.elementFromPoint(\r\n        event.sourceEvent.clientX, \r\n        event.sourceEvent.clientY\r\n      );\r\n      const closestNodeGroup = releaseTargetElement?.closest('.node');\r\n\r\n      if (closestNodeGroup) {\r\n        const targetNodeData = d3.select(closestNodeGroup).datum();\r\n        if (targetNodeData && \r\n            linkingState.current.sourceNode && \r\n            linkingState.current.sourceNode._id !== targetNodeData._id) {\r\n          console.log(`Creating edge from ${linkingState.current.sourceNode._id} to ${targetNodeData._id}`);\r\n          if (onCreateEdge) {\r\n            try {\r\n              await onCreateEdge(\r\n                linkingState.current.sourceNode._id, \r\n                targetNodeData._id\r\n              );\r\n            } catch (err) {\r\n              console.error('Failed to create edge:', err);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Clean up\r\n      linkingState.current.tempLink?.remove();\r\n      linkingState.current.isLinking = false;\r\n      linkingState.current.sourceNode = null;\r\n      linkingState.current.tempLink = null;\r\n    } else {\r\n      const wasClick = Math.abs(event.dx) < 2 && Math.abs(event.dy) < 2;\r\n      if (!wasClick) {\r\n        if (api?.updateNode) {\r\n          await api.updateNode(d._id, { position: { x: d.fx, y: d.fy } })\r\n            .catch(err => console.error(\"Failed to update node position:\", err));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return d3.drag()\r\n    .on('start', dragstarted)\r\n    .on('drag', dragged)\r\n    .on('end', dragended);\r\n}\r\n\r\n  const handleNodeClick = (event, d) => {\r\n    console.log(`[Node Click Handler] Node: ${d._id}, Mode: ${interactionMode}, DefaultPrevented: ${event.defaultPrevented}`);\r\n\r\n    if (event.defaultPrevented) {\r\n      console.log('[Node Click Handler] DefaultPrevented, returning early (likely drag related).');\r\n      return;\r\n    }\r\n\r\n    if (clickTimeout.current) { // Double-click\r\n      clearTimeout(clickTimeout.current);\r\n      clickTimeout.current = null;\r\n      console.log(`[Node Click Handler] Double-click on node ${d._id}.`);\r\n      if (onNodeDoubleClick) {\r\n        onNodeDoubleClick(d);\r\n      }\r\n      return;\r\n    }\r\n\r\n    // For single-click, set a timeout. \r\n    clickTimeout.current = setTimeout(() => {\r\n      clickTimeout.current = null;\r\n      console.log(`[Node Click Handler] Timeout for single click on ${d._id}. Mode: ${interactionMode}.`);\r\n\r\n      if (interactionMode === 'connect') {\r\n        console.log(`[Node Click Handler - Connect Mode] Single click on node ${d._id}. No action for click-linking.`);\r\n      } else { // interactionMode === 'select'\r\n        console.log(`[Node Click Handler - Select Mode] Processing single click for node ${d._id}.`);\r\n        setSelectedEdge(null);\r\n        if (onNodeClick) {\r\n          onNodeClick(d);\r\n        }\r\n      }\r\n    }, 250);\r\n  };\r\n\r\n  // Handle edge deletion\r\n  const handleDeleteEdge = () => {\r\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\r\n      onDeleteEdge(selectedEdge._id);\r\n      setSelectedEdge(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-wrapper\" onClick={(e) => {\r\n      console.log('[Graph Wrapper Click] Target:', e.target, 'CurrentTarget:', e.currentTarget);\r\n      if (e.target === e.currentTarget) {\r\n        console.log('[Graph Wrapper Click] Click was directly on wrapper.');\r\n        if (onBackgroundClick) {\r\n          onBackgroundClick();\r\n        }\r\n      }\r\n    }}>\r\n      {nodes && nodes.length > 0 ? (\r\n        <svg ref={svgRef} className=\"graph-svg\" />\r\n      ) : (\r\n        <div className=\"graph-svg empty-graph-placeholder\">\r\n          <div className=\"empty-graph-message\">\r\n            <p>This canvas is empty. Start by creating a new node!</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className=\"graph-controls\">\r\n        {selectedEdge && (\r\n          <button\r\n            onClick={handleDeleteEdge}\r\n            className=\"button danger\"\r\n          >\r\n            <TrashIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            Remove Edge\r\n          </button>\r\n        )}\r\n        <div className=\"button-row\">\r\n          <button\r\n            onClick={() => {\r\n              // Pass current dimensions when calling onCreateNew\r\n              if (onCreateNew) {\r\n                onCreateNew({\r\n                  graphWidth: graphDimensionsRef.current.width,\r\n                  graphHeight: graphDimensionsRef.current.height\r\n                });\r\n              }\r\n            }}\r\n            className=\"button primary\"\r\n          >\r\n            <PlusIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            Create New Node\r\n          </button>\r\n          <button\r\n  onClick={() => {\r\n    if (interactionMode === 'connect') {\r\n      // Clean up any existing temp link\r\n      linkingState.current.tempLink?.remove();\r\n      linkingState.current.isLinking = false;\r\n      linkingState.current.sourceNode = null;\r\n      setInteractionMode('select');\r\n    } else {\r\n      setInteractionMode('connect');\r\n    }\r\n  }}\r\n  className={`button accent ${interactionMode === 'connect' ? 'active' : ''}`}\r\n>\r\n  <LinkIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n  {interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes'}\r\n</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}