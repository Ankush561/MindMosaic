{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Mind Mosaic\\\\client\\\\src\\\\components\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport api from '../services/api.js';\nimport PlusIcon from './icons/PlusIcon';\nimport LinkIcon from './icons/LinkIcon';\nimport TrashIcon from './icons/TrashIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  nodes = [],\n  edges = [],\n  onNodeClick,\n  onNodeDoubleClick,\n  onCreateNew,\n  onCreateEdge,\n  onDeleteEdge,\n  interactionMode = 'select',\n  setInteractionMode,\n  onBackgroundClick,\n  isAnyPanelVisible /*, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete */\n}) => {\n  _s();\n  const svgRef = useRef();\n  const simulationRef = useRef(); // Ref to store the D3 simulation instance\n  const linkingState = useRef({\n    sourceNode: null,\n    tempLink: null,\n    isLinking: false\n  });\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const clickTimeout = useRef(null);\n  const graphDimensionsRef = useRef({\n    width: 800,\n    height: 600\n  }); // Store graph dimensions\n\n  console.log('Graph received:', {\n    nodeCount: nodes.length,\n    edgeCount: edges.length,\n    mode: interactionMode\n  });\n\n  // Debug: Log the actual nodes and edges data\n  console.log('Nodes data:', JSON.stringify(nodes, null, 2));\n  console.log('Edges data:', JSON.stringify(edges, null, 2));\n\n  // Initialize simulation only once\n  useEffect(() => {\n    const currentSvg = svgRef.current;\n    if (!currentSvg) return;\n    // Use stored dimensions for initial simulation setup if available, otherwise calculate\n    const initialWidth = graphDimensionsRef.current.width;\n    const initialHeight = graphDimensionsRef.current.height;\n    simulationRef.current = d3.forceSimulation().force('link', d3.forceLink([]).id(d => d._id).distance(150))\n    // Add other forces if needed (e.g., charge, center)\n    // .force('charge', d3.forceManyBody().strength(-100))\n    // .force('center', d3.forceCenter(initialWidth / 2, initialHeight / 2))\n    .alpha(0) // Keep it initially cool\n    .alphaDecay(1).alphaTarget(0);\n\n    // Cleanup simulation on unmount\n    return () => {\n      var _simulationRef$curren;\n      (_simulationRef$curren = simulationRef.current) === null || _simulationRef$curren === void 0 ? void 0 : _simulationRef$curren.stop();\n    };\n  }, []); // Empty dependency array means this runs once on mount\n\n  const handleMouseMoveLinking = useCallback(event => {\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\n      return;\n    }\n    if (!svgRef.current) return;\n    const [x, y] = d3.pointer(event, svgRef.current);\n    const tempLinkNode = linkingState.current.tempLink.node();\n    if (!tempLinkNode) return;\n    const tagName = tempLinkNode.tagName.toLowerCase();\n    if (tagName === 'line') {\n      linkingState.current.tempLink.attr('x2', x).attr('y2', y);\n    } else if (tagName === 'path') {\n      linkingState.current.tempLink.attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\n    }\n  }, [svgRef, linkingState]);\n  const handleMouseUpLinking = useCallback(event => {\n    console.log('SVG mouseup.linking triggered. Target:', event.target, 'isLinking:', linkingState.current.isLinking);\n    if (linkingState.current.isLinking) {\n      if (!svgRef.current) return;\n      const clickedDomElement = event.target;\n      const closestNodeGroup = clickedDomElement.closest('.node');\n      const isNode = !!closestNodeGroup;\n      console.log('SVG mouseup.linking: Is target related to a node?', isNode, 'Clicked DOM Element:', clickedDomElement, 'Closest Node Group:', closestNodeGroup);\n      if (!isNode) {\n        var _linkingState$current;\n        console.log('SVG mouseup.linking: Target is NOT a node. Cancelling link.');\n        (_linkingState$current = linkingState.current.tempLink) === null || _linkingState$current === void 0 ? void 0 : _linkingState$current.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        setInteractionMode('select');\n      } else {\n        console.log('SVG mouseup.linking: Target IS a node. Deferring to node\\'s click handler for completion.');\n        // If the mouseup is on a node, the `handleNodeClick` for that target node will handle the link completion (if applicable based on drag state).\n        // Or, if it was a drag operation ending on a node, that node's click event (which might be this one)\n        // needs to correctly interpret the state. The dragended + this mouseup should correctly lead to link creation if conditions are met.\n      }\n    }\n  }, [svgRef, linkingState, setInteractionMode, onCreateEdge]); // onCreateEdge might be relevant if we decide to complete link here\n\n  useEffect(() => {\n    const svgInstance = d3.select(svgRef.current);\n    if (interactionMode === 'connect') {\n      const onMouseMoveLinking = handleMouseMoveLinking;\n      const onMouseUpLinking = handleMouseUpLinking;\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\n      console.log('Global linking listeners ADDED to SVG for connect mode.');\n      return () => {\n        svgInstance.on('mousemove.linking', null);\n        svgInstance.on('mouseup.linking', null);\n        console.log('Global linking listeners REMOVED from SVG.');\n      };\n    } else {\n      svgInstance.on('mousemove.linking', null);\n      svgInstance.on('mouseup.linking', null);\n      if (linkingState.current.isLinking) {\n        var _linkingState$current2;\n        console.log('Exited connect mode with active link: Forcibly cleaning up.');\n        (_linkingState$current2 = linkingState.current.tempLink) === null || _linkingState$current2 === void 0 ? void 0 : _linkingState$current2.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return () => {};\n    }\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]);\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    const simulation = simulationRef.current;\n    if (!simulation) return; // Simulation might not be ready on first pass\n\n    svg.on('click.diagnostic', event => {\n      console.log('[SVG DIAGNOSTIC CLICK] SVG itself was clicked. Target:', event.target);\n    });\n    const currentSvg = svgRef.current;\n    if (!currentSvg) return;\n\n    // 1. Manage the background rectangle: append if not exists, ensure attributes.\n    let backgroundRect = svg.select('rect.background');\n    if (backgroundRect.empty()) {\n      backgroundRect = svg.append('rect').attr('class', 'background');\n    }\n    backgroundRect // Ensure attributes are set on every run if they could change (e.g. dimensions)\n    .attr('width', '100%').attr('height', '100%').attr('fill', 'transparent').on('click', event => {\n      console.log('[Background Rect Clicked Directly] Target:', event.target);\n      if (event.target.classList.contains('background')) {\n        d3.selectAll('.link').classed('selected', false);\n        setSelectedEdge(null);\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    });\n\n    // 2. Ensure dedicated groups for links and nodes exist (append if not).\n    let linkGroup = svg.select('g.links-group');\n    if (linkGroup.empty()) {\n      linkGroup = svg.append('g').attr('class', 'links-group');\n    }\n    let nodeGroup = svg.select('g.nodes-group');\n    if (nodeGroup.empty()) {\n      nodeGroup = svg.append('g').attr('class', 'nodes-group');\n    }\n\n    // 3. Manage defs for markers: append if not exists.\n    let defs = svg.select('defs');\n    if (defs.empty()) {\n      defs = svg.append('defs');\n    }\n    // Check if marker already exists before appending\n    if (defs.select('#arrow').empty()) {\n      defs.append(\"marker\").attr(\"id\", \"arrow\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 20).attr(\"refY\", 0).attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#A8C3A4\");\n    }\n    let localContainerWidth = currentSvg.clientWidth;\n    let localContainerHeight = currentSvg.clientHeight;\n    console.log(`[Graph Dimensions] useEffect: clientWidth=${localContainerWidth}, clientHeight=${localContainerHeight}, isAnyPanelVisible=${isAnyPanelVisible}`); // Log dimensions\n\n    if (localContainerWidth < 50) localContainerWidth = 50;\n    if (localContainerHeight < 50) localContainerHeight = 50;\n\n    // Update the ref with the actual dimensions\n    graphDimensionsRef.current = {\n      width: localContainerWidth,\n      height: localContainerHeight\n    };\n    const containerWidth = localContainerWidth;\n    const containerHeight = localContainerHeight;\n    svg.attr('viewBox', [0, 0, containerWidth, containerHeight]).attr('preserveAspectRatio', 'xMidYMid meet');\n\n    // Update node positions (fx, fy) before passing to simulation\n    nodes.forEach(node => {\n      if (node.position && node.position.x != null && node.position.y != null) {\n        node.x = node.position.x;\n        node.y = node.position.y;\n        node.fx = node.position.x;\n        node.fy = node.position.y;\n      } else {\n        node.x = node.x || Math.random() * (containerWidth - 100) + 50;\n        node.y = node.y || Math.random() * (containerHeight - 100) + 50;\n        if (!node.position || node.position.x == null || node.position.y == null) {\n          node.position = {\n            x: node.x,\n            y: node.y\n          };\n        }\n        // If it's a new node or should not be fixed, fx/fy might be null\n        // node.fx = node.fx; // Keep existing fx if any\n        // node.fy = node.fy; // Keep existing fy if any\n      }\n    });\n    const nodeMap = {};\n    nodes.forEach(node => {\n      nodeMap[node._id] = node;\n    });\n    const processedEdges = edges.map(edge => ({\n      id: edge._id,\n      source: nodeMap[edge.source] || edge.source,\n      target: nodeMap[edge.target] || edge.target,\n      type: edge.type,\n      _id: edge._id\n    }));\n\n    // Update simulation with new nodes and links\n    simulation.nodes(nodes).on('tick', ticked);\n    simulation.force('link').links(processedEdges);\n\n    // If nodes/edges changed, reheat simulation briefly if it's meant to be dynamic\n    // For a mostly static graph (fx, fy set), this might not be needed or alpha can be very low.\n    // simulation.alpha(0.1).restart(); // Optional: give it a small kick if layout needs to adjust\n    // simulation.alphaTarget(0); // And cool it down immediately\n\n    const linkElements = linkGroup.selectAll('path.link').data(processedEdges, d => d.id).join('path')\n    // ... link attributes and click handler ...\n    .attr('class', 'link').attr('data-id', d => d.id).attr('stroke', '#A8C3A4').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)');\n    linkElements.on('click', handleEdgeClick);\n    const nodeElements = nodeGroup.selectAll('g.node').data(nodes, d => d._id).join(enter => {\n      const g = enter.append('g').attr('class', 'node').attr('data-id', d => d._id)\n      // Initial position set by simulation tick or fx/fy\n      .call(dragBehavior(simulation, svg, containerWidth, containerHeight));\n      g.append('circle')\n      // ... circle attributes ...\n      .attr('r', 12).attr('fill', '#2E7D32').attr('stroke', '#1B5E20').attr('stroke-width', 1.5).style('pointer-events', 'all');\n      g.append('text')\n      // ... text attributes ...\n      .text(d => {\n        var _d$_id;\n        return d.title || ((_d$_id = d._id) === null || _d$_id === void 0 ? void 0 : _d$_id.substring(0, 6));\n      }).attr('x', 16).attr('y', 5).attr('fill', '#FAF3E0').attr('text-anchor', 'start');\n      return g;\n    }, update => update,\n    // Position updates handled by ticked function\n    exit => exit.remove());\n    const circles = nodeElements.select('circle');\n    circles.on('click', handleNodeClick).style('pointer-events', 'all');\n    function handleEdgeClick(event, d) {\n      console.log('[Edge Click] Attempted on edge:', d.id, 'Mode:', interactionMode);\n      event.stopPropagation();\n      if (interactionMode === 'select') {\n        d3.selectAll('.link').classed('selected', false);\n        d3.select(event.currentTarget).classed('selected', true);\n        setSelectedEdge(d);\n        if (onNodeClick) {\n          // This onNodeClick(null) is to deselect any selected node\n          console.log(\"handleEdgeClick: Calling onNodeClick(null) to deselect node.\");\n          onNodeClick(null); // Deselects any selected node in App.js\n        } else {\n          console.log(\"handleEdgeClick: onNodeClick prop is undefined (cannot deselect node).\");\n        }\n      } else {\n        console.log(\"handleEdgeClick: Not in 'select' mode. Current mode:\", interactionMode, \"No action taken.\");\n      }\n    }\n    function ticked() {\n      console.log('[Ticked] Simulation tick occurred.'); // Log when ticked is called\n      linkElements.attr('d', d => {\n        const sourceX = Math.max(15, Math.min(containerWidth - 15, d.source.x));\n        const sourceY = Math.max(15, Math.min(containerHeight - 15, d.source.y));\n        const targetX = Math.max(15, Math.min(containerWidth - 15, d.target.x));\n        const targetY = Math.max(15, Math.min(containerHeight - 15, d.target.y));\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\n      });\n      nodeElements.attr('transform', d => {\n        const x = Math.max(15, Math.min(containerWidth - 15, d.x));\n        const y = Math.max(15, Math.min(containerHeight - 15, d.y));\n        return `translate(${x},${y})`;\n      });\n    }\n\n    // Unconditionally give the simulation a small kick to apply initial/updated positions\n    // and then tell it to cool down. This ensures the ticked function runs.\n    simulation.alpha(0.3).restart();\n    simulation.alphaTarget(0);\n\n    // Cleanup for the main useEffect\n    return () => {\n      svg.on('click.diagnostic', null);\n      // simulation.stop(); // Simulation is managed by simulationRef lifecycle now\n      if (linkingState.current.tempLink) {\n        linkingState.current.tempLink.remove();\n      }\n      linkingState.current = {\n        sourceNode: null,\n        tempLink: null,\n        isLinking: false\n      };\n      if (clickTimeout.current) {\n        clearTimeout(clickTimeout.current);\n      }\n    };\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, onDeleteEdge, interactionMode, setInteractionMode, onBackgroundClick, isAnyPanelVisible, handleMouseMoveLinking, handleMouseUpLinking /*, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete */]); // Added new node animation props\n\n  // Handle keyboard delete for selected edges\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n          onDeleteEdge(selectedEdge._id);\n          setSelectedEdge(null);\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedEdge, onDeleteEdge]);\n  function dragBehavior(sim, svgInstance, containerWidth, containerHeight) {\n    function dragstarted(event, d) {\n      const currentSim = simulationRef.current; // Use the ref\n      if (!currentSim) return;\n      console.log(\"[Drag Start] Mode:\", interactionMode, \"Node:\", d._id);\n      if (interactionMode === 'connect') {\n        if (linkingState.current.tempLink) {\n          linkingState.current.tempLink.remove();\n          linkingState.current.tempLink = null;\n        }\n        linkingState.current.isLinking = true;\n        linkingState.current.sourceNode = d;\n        event.sourceEvent.stopPropagation(); // KEEP for connect mode\n        if (svgInstance) {\n          linkingState.current.tempLink = d3.select(svgInstance).append('path').attr('class', 'temp-link').attr('d', `M${d.x},${d.y}L${d.x},${d.y}`).attr('stroke-dasharray', '5,5').attr('stroke', '#B87333').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)').raise();\n        }\n      } else {\n        // 'select' mode (regular node dragging)\n        // event.sourceEvent.stopPropagation(); // CRITICAL: Ensure this is commented out or removed for select mode clicks to work\n        console.log(\"[Drag Start - Select Mode] Active sim:\", event.active);\n        if (!event.active) currentSim.alphaTarget(0.3).restart();\n        d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\n        d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\n      }\n    }\n    function dragged(event, d) {\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\n        event.sourceEvent.stopPropagation();\n        if (!svgInstance || !linkingState.current.tempLink) return;\n        const [targetX, targetY] = d3.pointer(event.sourceEvent, svgInstance);\n        linkingState.current.tempLink.attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${targetX},${targetY}`);\n      } else {\n        event.sourceEvent.stopPropagation();\n        d.fx = Math.max(15, Math.min(containerWidth - 15, event.x));\n        d.fy = Math.max(15, Math.min(containerHeight - 15, event.y));\n        d.position = {\n          x: d.fx,\n          y: d.fy\n        };\n      }\n    }\n    async function dragended(event, d) {\n      const currentSim = simulationRef.current; // Use the ref\n      if (!currentSim) return;\n      if (!event.active) currentSim.alphaTarget(0);\n\n      // Check if this was a click (no significant drag movement)\n      const wasClick = Math.abs(event.dx) < 2 && Math.abs(event.dy) < 2;\n      if (interactionMode === 'connect') {\n        // This block handles ending a connection attempt (drag-based)\n        console.log(\"[Drag End - Connect Mode] isLinking:\", linkingState.current.isLinking);\n        if (linkingState.current.isLinking) {\n          var _linkingState$current3;\n          const [pointerX, pointerY] = d3.pointer(event.sourceEvent, svgInstance);\n          const releaseTargetElement = document.elementFromPoint(event.sourceEvent.clientX, event.sourceEvent.clientY);\n          const closestNodeGroup = releaseTargetElement ? releaseTargetElement.closest('.node') : null;\n          if (closestNodeGroup) {\n            const targetNodeData = d3.select(closestNodeGroup).datum();\n            if (targetNodeData && linkingState.current.sourceNode && linkingState.current.sourceNode._id !== targetNodeData._id) {\n              console.log(`[Drag End - Connect Mode] Creating edge from ${linkingState.current.sourceNode._id} to ${targetNodeData._id}`);\n              if (onCreateEdge) {\n                onCreateEdge(linkingState.current.sourceNode._id, targetNodeData._id);\n              }\n            } else {\n              console.log(\"[Drag End - Connect Mode] Drag ended on source node or invalid target. Cancelling link.\");\n            }\n          } else {\n            console.log(\"[Drag End - Connect Mode] Drag ended NOT on a node. Cancelling link.\");\n          }\n          (_linkingState$current3 = linkingState.current.tempLink) === null || _linkingState$current3 === void 0 ? void 0 : _linkingState$current3.remove();\n          linkingState.current.isLinking = false;\n          linkingState.current.sourceNode = null;\n          linkingState.current.tempLink = null;\n          setInteractionMode('select');\n        } else if (wasClick) {\n          // A \"click\" (drag with no movement) on a node while in connect mode.\n          // Currently, click-linking is disabled. So, this action effectively does nothing for linking.\n          // We might want to select the node or provide feedback, but handleNodeClick will also fire.\n          console.log(`[Drag End - Connect Mode] Click detected on node ${d._id}. No drag-linking action.`);\n        }\n      } else {\n        // interactionMode === 'select' (or other modes)\n        // TEMPORARILY REMOVE CLICK HANDLING FROM DRAGEND TO ISOLATE\n        /*\r\n        if (wasClick && !event.defaultPrevented) { \r\n          console.log(`[Drag End - Select Mode] Click detected on node ${d._id}. Calling onNodeClick.`);\r\n          if (clickTimeout.current) {\r\n            clearTimeout(clickTimeout.current);\r\n            clickTimeout.current = null;\r\n          }\r\n          setSelectedEdge(null); \r\n          if (onNodeClick) {\r\n            onNodeClick(d);\r\n          }\r\n        } else if (!wasClick) { // It was a drag\r\n        */\n        // Ensure only actual drags are handled here for now\n        if (!wasClick) {\n          // It was a drag\n          console.log(`[Drag End - Select Mode] Drag finished for node ${d._id}. Updating position.`);\n          d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\n          d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\n          d.position = {\n            x: d.fx,\n            y: d.fy\n          };\n          if (api && typeof api.updateNode === 'function') {\n            api.updateNode(d._id, {\n              position: {\n                x: d.fx,\n                y: d.fy\n              }\n            }).catch(err => console.error(\"Failed to update node position:\", err));\n          }\n        } else {\n          console.log(\"[Drag End - Select Mode] Click was detected (dx/dy small), but not processing as click here. Letting handleNodeClick manage it.\");\n        }\n      }\n    }\n    return d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended);\n  }\n  const handleNodeClick = (event, d) => {\n    console.log(`[Node Click Handler] Node: ${d._id}, Mode: ${interactionMode}, DefaultPrevented: ${event.defaultPrevented}`);\n    if (event.defaultPrevented) {\n      console.log('[Node Click Handler] DefaultPrevented, returning early (likely drag related).');\n      return;\n    }\n    if (clickTimeout.current) {\n      // Double-click\n      clearTimeout(clickTimeout.current);\n      clickTimeout.current = null;\n      console.log(`[Node Click Handler] Double-click on node ${d._id}.`);\n      if (onNodeDoubleClick) {\n        onNodeDoubleClick(d);\n      }\n      return;\n    }\n\n    // For single-click, set a timeout. \n    clickTimeout.current = setTimeout(() => {\n      clickTimeout.current = null;\n      console.log(`[Node Click Handler] Timeout for single click on ${d._id}. Mode: ${interactionMode}.`);\n      if (interactionMode === 'connect') {\n        console.log(`[Node Click Handler - Connect Mode] Single click on node ${d._id}. No action for click-linking.`);\n      } else {\n        // interactionMode === 'select'\n        console.log(`[Node Click Handler - Select Mode] Processing single click for node ${d._id}.`);\n        setSelectedEdge(null);\n        if (onNodeClick) {\n          onNodeClick(d);\n        }\n      }\n    }, 250);\n  };\n\n  // Handle edge deletion\n  const handleDeleteEdge = () => {\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n      onDeleteEdge(selectedEdge._id);\n      setSelectedEdge(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-wrapper\",\n    onClick: e => {\n      console.log('[Graph Wrapper Click] Target:', e.target, 'CurrentTarget:', e.currentTarget);\n      if (e.target === e.currentTarget) {\n        console.log('[Graph Wrapper Click] Click was directly on wrapper.');\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    },\n    children: [nodes && nodes.length > 0 ? /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      className: \"graph-svg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-svg empty-graph-placeholder\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-graph-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This canvas is empty. Start by creating a new node!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-controls\",\n      children: [selectedEdge && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteEdge,\n        className: \"button danger\",\n        children: [/*#__PURE__*/_jsxDEV(TrashIcon, {\n          style: {\n            width: '1rem',\n            height: '1rem',\n            marginRight: '0.5rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 13\n        }, this), \"Remove Edge\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            // Pass current dimensions when calling onCreateNew\n            if (onCreateNew) {\n              onCreateNew({\n                graphWidth: graphDimensionsRef.current.width,\n                graphHeight: graphDimensionsRef.current.height\n              });\n            }\n          },\n          className: \"button primary\",\n          children: [/*#__PURE__*/_jsxDEV(PlusIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 13\n          }, this), \"Create New Node\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setInteractionMode(prevMode => prevMode === 'connect' ? 'select' : 'connect'),\n          className: `button accent ${interactionMode === 'connect' ? 'active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(LinkIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 13\n          }, this), interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 539,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"twe8CnAQMxmfTcFQkI9RDmcv0es=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","d3","api","PlusIcon","LinkIcon","TrashIcon","jsxDEV","_jsxDEV","Graph","nodes","edges","onNodeClick","onNodeDoubleClick","onCreateNew","onCreateEdge","onDeleteEdge","interactionMode","setInteractionMode","onBackgroundClick","isAnyPanelVisible","_s","svgRef","simulationRef","linkingState","sourceNode","tempLink","isLinking","selectedEdge","setSelectedEdge","clickTimeout","graphDimensionsRef","width","height","console","log","nodeCount","length","edgeCount","mode","JSON","stringify","currentSvg","current","initialWidth","initialHeight","forceSimulation","force","forceLink","id","d","_id","distance","alpha","alphaDecay","alphaTarget","_simulationRef$curren","stop","handleMouseMoveLinking","event","x","y","pointer","tempLinkNode","node","tagName","toLowerCase","attr","handleMouseUpLinking","target","clickedDomElement","closestNodeGroup","closest","isNode","_linkingState$current","remove","svgInstance","select","onMouseMoveLinking","onMouseUpLinking","on","_linkingState$current2","svg","simulation","backgroundRect","empty","append","classList","contains","selectAll","classed","linkGroup","nodeGroup","defs","localContainerWidth","clientWidth","localContainerHeight","clientHeight","containerWidth","containerHeight","forEach","position","fx","fy","Math","random","nodeMap","processedEdges","map","edge","source","type","ticked","links","linkElements","data","join","handleEdgeClick","nodeElements","enter","g","call","dragBehavior","style","text","_d$_id","title","substring","update","exit","circles","handleNodeClick","stopPropagation","currentTarget","sourceX","max","min","sourceY","targetX","targetY","restart","clearTimeout","handleKeyDown","key","window","addEventListener","removeEventListener","sim","dragstarted","currentSim","sourceEvent","raise","active","dragged","dragended","wasClick","abs","dx","dy","_linkingState$current3","pointerX","pointerY","releaseTargetElement","document","elementFromPoint","clientX","clientY","targetNodeData","datum","updateNode","catch","err","error","drag","defaultPrevented","setTimeout","handleDeleteEdge","className","onClick","e","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","marginRight","graphWidth","graphHeight","prevMode","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Mind Mosaic/client/src/components/graph.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\r\nimport * as d3 from 'd3';\r\nimport './Graph.css';\r\nimport api from '../services/api.js';\r\nimport PlusIcon from './icons/PlusIcon';\r\nimport LinkIcon from './icons/LinkIcon';\r\nimport TrashIcon from './icons/TrashIcon';\r\n\r\nconst Graph = ({ nodes = [], edges = [], onNodeClick, onNodeDoubleClick, onCreateNew, onCreateEdge, onDeleteEdge, interactionMode = 'select', setInteractionMode, onBackgroundClick, isAnyPanelVisible /*, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete */ }) => {\r\n  const svgRef = useRef();\r\n  const simulationRef = useRef(); // Ref to store the D3 simulation instance\r\n  const linkingState = useRef({ sourceNode: null, tempLink: null, isLinking: false });\r\n  const [selectedEdge, setSelectedEdge] = useState(null);\r\n  const clickTimeout = useRef(null);\r\n  const graphDimensionsRef = useRef({ width: 800, height: 600 }); // Store graph dimensions\r\n\r\n  console.log('Graph received:', {\r\n    nodeCount: nodes.length,\r\n    edgeCount: edges.length,\r\n    mode: interactionMode\r\n  });\r\n\r\n  // Debug: Log the actual nodes and edges data\r\n  console.log('Nodes data:', JSON.stringify(nodes, null, 2));\r\n  console.log('Edges data:', JSON.stringify(edges, null, 2));\r\n\r\n  // Initialize simulation only once\r\n  useEffect(() => {\r\n    const currentSvg = svgRef.current;\r\n    if (!currentSvg) return;\r\n    // Use stored dimensions for initial simulation setup if available, otherwise calculate\r\n    const initialWidth = graphDimensionsRef.current.width;\r\n    const initialHeight = graphDimensionsRef.current.height;\r\n\r\n    simulationRef.current = d3.forceSimulation()\r\n      .force('link', d3.forceLink([]).id(d => d._id).distance(150))\r\n      // Add other forces if needed (e.g., charge, center)\r\n      // .force('charge', d3.forceManyBody().strength(-100))\r\n      // .force('center', d3.forceCenter(initialWidth / 2, initialHeight / 2))\r\n      .alpha(0) // Keep it initially cool\r\n      .alphaDecay(1)\r\n      .alphaTarget(0);\r\n    \r\n    // Cleanup simulation on unmount\r\n    return () => {\r\n      simulationRef.current?.stop();\r\n    };\r\n  }, []); // Empty dependency array means this runs once on mount\r\n\r\n  const handleMouseMoveLinking = useCallback((event) => { \r\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\r\n        return;\r\n    }\r\n    if (!svgRef.current) return; \r\n    const [x, y] = d3.pointer(event, svgRef.current);\r\n    \r\n    const tempLinkNode = linkingState.current.tempLink.node();\r\n    if (!tempLinkNode) return;\r\n\r\n    const tagName = tempLinkNode.tagName.toLowerCase();\r\n\r\n    if (tagName === 'line') {\r\n        linkingState.current.tempLink.attr('x2', x).attr('y2', y);\r\n    } else if (tagName === 'path') {\r\n        linkingState.current.tempLink\r\n          .attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\r\n    }\r\n  }, [svgRef, linkingState]);\r\n\r\n  const handleMouseUpLinking = useCallback((event) => {\r\n    console.log('SVG mouseup.linking triggered. Target:', event.target, 'isLinking:', linkingState.current.isLinking);\r\n    if (linkingState.current.isLinking) { \r\n      if (!svgRef.current) return; \r\n      \r\n      const clickedDomElement = event.target;\r\n      const closestNodeGroup = clickedDomElement.closest('.node');\r\n      const isNode = !!closestNodeGroup; \r\n      \r\n      console.log('SVG mouseup.linking: Is target related to a node?', isNode, 'Clicked DOM Element:', clickedDomElement, 'Closest Node Group:', closestNodeGroup);\r\n\r\n      if (!isNode) { \r\n        console.log('SVG mouseup.linking: Target is NOT a node. Cancelling link.');\r\n        linkingState.current.tempLink?.remove();\r\n        linkingState.current.isLinking = false;\r\n        linkingState.current.sourceNode = null;\r\n        linkingState.current.tempLink = null;\r\n        setInteractionMode('select'); \r\n      } else {\r\n        console.log('SVG mouseup.linking: Target IS a node. Deferring to node\\'s click handler for completion.');\r\n        // If the mouseup is on a node, the `handleNodeClick` for that target node will handle the link completion (if applicable based on drag state).\r\n        // Or, if it was a drag operation ending on a node, that node's click event (which might be this one)\r\n        // needs to correctly interpret the state. The dragended + this mouseup should correctly lead to link creation if conditions are met.\r\n      }\r\n    }\r\n  }, [svgRef, linkingState, setInteractionMode, onCreateEdge]); // onCreateEdge might be relevant if we decide to complete link here\r\n\r\n  useEffect(() => {\r\n    const svgInstance = d3.select(svgRef.current);\r\n\r\n    if (interactionMode === 'connect') {\r\n      const onMouseMoveLinking = handleMouseMoveLinking;\r\n      const onMouseUpLinking = handleMouseUpLinking;\r\n\r\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\r\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\r\n      console.log('Global linking listeners ADDED to SVG for connect mode.');\r\n\r\n      return () => {\r\n        svgInstance.on('mousemove.linking', null);\r\n        svgInstance.on('mouseup.linking', null);\r\n        console.log('Global linking listeners REMOVED from SVG.');\r\n      };\r\n    } else {\r\n      svgInstance.on('mousemove.linking', null);\r\n      svgInstance.on('mouseup.linking', null);\r\n      \r\n      if (linkingState.current.isLinking) {\r\n        console.log('Exited connect mode with active link: Forcibly cleaning up.');\r\n        linkingState.current.tempLink?.remove();\r\n        linkingState.current.isLinking = false;\r\n        linkingState.current.sourceNode = null;\r\n        linkingState.current.tempLink = null;\r\n      }\r\n      return () => {};\r\n    }\r\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]); \r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    const simulation = simulationRef.current;\r\n\r\n    if (!simulation) return; // Simulation might not be ready on first pass\r\n\r\n    svg.on('click.diagnostic', (event) => {\r\n      console.log('[SVG DIAGNOSTIC CLICK] SVG itself was clicked. Target:', event.target);\r\n    });\r\n\r\n    const currentSvg = svgRef.current;\r\n    if (!currentSvg) return;\r\n\r\n    // 1. Manage the background rectangle: append if not exists, ensure attributes.\r\n    let backgroundRect = svg.select('rect.background');\r\n    if (backgroundRect.empty()) {\r\n      backgroundRect = svg.append('rect')\r\n        .attr('class', 'background');\r\n    }\r\n    backgroundRect // Ensure attributes are set on every run if they could change (e.g. dimensions)\r\n      .attr('width', '100%')\r\n      .attr('height', '100%')\r\n      .attr('fill', 'transparent')\r\n      .on('click', (event) => {\r\n        console.log('[Background Rect Clicked Directly] Target:', event.target);\r\n        if (event.target.classList.contains('background')) {\r\n          d3.selectAll('.link').classed('selected', false);\r\n          setSelectedEdge(null);\r\n          if (onBackgroundClick) {\r\n            onBackgroundClick();\r\n          }\r\n        }\r\n      });\r\n\r\n    // 2. Ensure dedicated groups for links and nodes exist (append if not).\r\n    let linkGroup = svg.select('g.links-group');\r\n    if (linkGroup.empty()) {\r\n      linkGroup = svg.append('g').attr('class', 'links-group');\r\n    }\r\n    let nodeGroup = svg.select('g.nodes-group');\r\n    if (nodeGroup.empty()) {\r\n      nodeGroup = svg.append('g').attr('class', 'nodes-group');\r\n    }\r\n\r\n    // 3. Manage defs for markers: append if not exists.\r\n    let defs = svg.select('defs');\r\n    if (defs.empty()) {\r\n      defs = svg.append('defs');\r\n    }\r\n    // Check if marker already exists before appending\r\n    if (defs.select('#arrow').empty()) { \r\n      defs.append(\"marker\")\r\n        .attr(\"id\", \"arrow\")\r\n        .attr(\"viewBox\", \"0 -5 10 10\")\r\n        .attr(\"refX\", 20)\r\n        .attr(\"refY\", 0)\r\n        .attr(\"markerWidth\", 6)\r\n        .attr(\"markerHeight\", 6)\r\n        .attr(\"orient\", \"auto\")\r\n        .append(\"path\")\r\n        .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n        .attr(\"fill\", \"#A8C3A4\");\r\n    }\r\n\r\n    let localContainerWidth = currentSvg.clientWidth;\r\n    let localContainerHeight = currentSvg.clientHeight;\r\n\r\n    console.log(`[Graph Dimensions] useEffect: clientWidth=${localContainerWidth}, clientHeight=${localContainerHeight}, isAnyPanelVisible=${isAnyPanelVisible}`); // Log dimensions\r\n\r\n    if (localContainerWidth < 50) localContainerWidth = 50;\r\n    if (localContainerHeight < 50) localContainerHeight = 50;\r\n\r\n    // Update the ref with the actual dimensions\r\n    graphDimensionsRef.current = { width: localContainerWidth, height: localContainerHeight };\r\n\r\n    const containerWidth = localContainerWidth;\r\n    const containerHeight = localContainerHeight;\r\n\r\n    svg\r\n      .attr('viewBox', [0, 0, containerWidth, containerHeight])\r\n      .attr('preserveAspectRatio', 'xMidYMid meet');\r\n\r\n    // Update node positions (fx, fy) before passing to simulation\r\n    nodes.forEach(node => {\r\n      if (node.position && node.position.x != null && node.position.y != null) {\r\n        node.x = node.position.x;\r\n        node.y = node.position.y;\r\n        node.fx = node.position.x;\r\n        node.fy = node.position.y;\r\n      } else {\r\n        node.x = node.x || (Math.random() * (containerWidth - 100) + 50);\r\n        node.y = node.y || (Math.random() * (containerHeight - 100) + 50);\r\n        if (!node.position || node.position.x == null || node.position.y == null) {\r\n            node.position = { x: node.x, y: node.y }; \r\n        }\r\n        // If it's a new node or should not be fixed, fx/fy might be null\r\n        // node.fx = node.fx; // Keep existing fx if any\r\n        // node.fy = node.fy; // Keep existing fy if any\r\n      }\r\n    });\r\n\r\n    const nodeMap = {};\r\n    nodes.forEach(node => { nodeMap[node._id] = node; });\r\n    const processedEdges = edges.map(edge => ({\r\n      id: edge._id,\r\n      source: nodeMap[edge.source] || edge.source,\r\n      target: nodeMap[edge.target] || edge.target,\r\n      type: edge.type,\r\n      _id: edge._id\r\n    }));\r\n\r\n    // Update simulation with new nodes and links\r\n    simulation\r\n      .nodes(nodes)\r\n      .on('tick', ticked);\r\n    \r\n    simulation.force('link').links(processedEdges);\r\n\r\n    // If nodes/edges changed, reheat simulation briefly if it's meant to be dynamic\r\n    // For a mostly static graph (fx, fy set), this might not be needed or alpha can be very low.\r\n    // simulation.alpha(0.1).restart(); // Optional: give it a small kick if layout needs to adjust\r\n    // simulation.alphaTarget(0); // And cool it down immediately\r\n\r\n    const linkElements = linkGroup.selectAll('path.link')\r\n      .data(processedEdges, d => d.id)\r\n      .join('path')\r\n        // ... link attributes and click handler ...\r\n        .attr('class', 'link')\r\n        .attr('data-id', d => d.id)\r\n        .attr('stroke', '#A8C3A4')\r\n        .attr('stroke-width', 2)\r\n        .attr('fill', 'none')\r\n        .attr('marker-end', 'url(#arrow)');\r\n    linkElements.on('click', handleEdgeClick);\r\n\r\n    const nodeElements = nodeGroup.selectAll('g.node')\r\n      .data(nodes, d => d._id)\r\n      .join(\r\n        enter => {\r\n          const g = enter.append('g')\r\n            .attr('class', 'node')\r\n            .attr('data-id', d => d._id)\r\n            // Initial position set by simulation tick or fx/fy\r\n            .call(dragBehavior(simulation, svg, containerWidth, containerHeight));\r\n\r\n          g.append('circle')\r\n            // ... circle attributes ...\r\n            .attr('r', 12)\r\n            .attr('fill', '#2E7D32')\r\n            .attr('stroke', '#1B5E20')\r\n            .attr('stroke-width', 1.5)\r\n            .style('pointer-events', 'all');\r\n\r\n          g.append('text')\r\n            // ... text attributes ...\r\n            .text(d => d.title || d._id?.substring(0, 6))\r\n            .attr('x', 16)\r\n            .attr('y', 5)\r\n            .attr('fill', '#FAF3E0')\r\n            .attr('text-anchor', 'start');\r\n          return g;\r\n        },\r\n        update => update, // Position updates handled by ticked function\r\n        exit => exit.remove()\r\n      );\r\n    \r\n    const circles = nodeElements.select('circle');\r\n    circles.on('click', handleNodeClick).style('pointer-events', 'all');\r\n\r\n    function handleEdgeClick(event, d) {\r\n      console.log('[Edge Click] Attempted on edge:', d.id, 'Mode:', interactionMode);\r\n      event.stopPropagation();\r\n      if (interactionMode === 'select') {\r\n        d3.selectAll('.link').classed('selected', false);\r\n        d3.select(event.currentTarget).classed('selected', true);\r\n        setSelectedEdge(d);\r\n        if (onNodeClick) { // This onNodeClick(null) is to deselect any selected node\r\n            console.log(\"handleEdgeClick: Calling onNodeClick(null) to deselect node.\");\r\n            onNodeClick(null); // Deselects any selected node in App.js\r\n        } else {\r\n            console.log(\"handleEdgeClick: onNodeClick prop is undefined (cannot deselect node).\");\r\n        }\r\n      } else {\r\n        console.log(\"handleEdgeClick: Not in 'select' mode. Current mode:\", interactionMode, \"No action taken.\");\r\n      }\r\n    }\r\n\r\n    function ticked() {\r\n      console.log('[Ticked] Simulation tick occurred.'); // Log when ticked is called\r\n      linkElements.attr('d', d => {\r\n        const sourceX = Math.max(15, Math.min(containerWidth - 15, d.source.x));\r\n        const sourceY = Math.max(15, Math.min(containerHeight - 15, d.source.y));\r\n        const targetX = Math.max(15, Math.min(containerWidth - 15, d.target.x));\r\n        const targetY = Math.max(15, Math.min(containerHeight - 15, d.target.y));\r\n        \r\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\r\n      });\r\n\r\n      nodeElements.attr('transform', d => {\r\n        const x = Math.max(15, Math.min(containerWidth - 15, d.x));\r\n        const y = Math.max(15, Math.min(containerHeight - 15, d.y));\r\n        return `translate(${x},${y})`;\r\n      });\r\n    }\r\n\r\n    // Unconditionally give the simulation a small kick to apply initial/updated positions\r\n    // and then tell it to cool down. This ensures the ticked function runs.\r\n    simulation.alpha(0.3).restart(); \r\n    simulation.alphaTarget(0);\r\n\r\n    // Cleanup for the main useEffect\r\n    return () => {\r\n      svg.on('click.diagnostic', null);\r\n      // simulation.stop(); // Simulation is managed by simulationRef lifecycle now\r\n      if (linkingState.current.tempLink) {\r\n        linkingState.current.tempLink.remove();\r\n      }\r\n      linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n      if (clickTimeout.current) {\r\n        clearTimeout(clickTimeout.current);\r\n      }\r\n    };\r\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, onDeleteEdge, interactionMode, setInteractionMode, onBackgroundClick, isAnyPanelVisible, handleMouseMoveLinking, handleMouseUpLinking /*, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete */]); // Added new node animation props\r\n\r\n  // Handle keyboard delete for selected edges\r\n  useEffect(() => {\r\n    const handleKeyDown = (event) => {\r\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\r\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\r\n          onDeleteEdge(selectedEdge._id);\r\n          setSelectedEdge(null); \r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [selectedEdge, onDeleteEdge]);\r\n\r\n  function dragBehavior(sim, svgInstance, containerWidth, containerHeight) {\r\n    function dragstarted(event, d) {\r\n        const currentSim = simulationRef.current; // Use the ref\r\n        if (!currentSim) return;\r\n      console.log(\"[Drag Start] Mode:\", interactionMode, \"Node:\", d._id);\r\n      if (interactionMode === 'connect') {\r\n        if (linkingState.current.tempLink) {\r\n            linkingState.current.tempLink.remove();\r\n            linkingState.current.tempLink = null;\r\n        }\r\n\r\n        linkingState.current.isLinking = true;\r\n        linkingState.current.sourceNode = d;\r\n        event.sourceEvent.stopPropagation(); // KEEP for connect mode\r\n        if (svgInstance) {\r\n            linkingState.current.tempLink = d3.select(svgInstance).append('path')\r\n              .attr('class', 'temp-link')\r\n              .attr('d', `M${d.x},${d.y}L${d.x},${d.y}`)\r\n              .attr('stroke-dasharray', '5,5')\r\n              .attr('stroke', '#B87333') \r\n              .attr('stroke-width', 2)\r\n              .attr('fill', 'none')\r\n              .attr('marker-end', 'url(#arrow)')\r\n              .raise();\r\n        }\r\n      } else { // 'select' mode (regular node dragging)\r\n        // event.sourceEvent.stopPropagation(); // CRITICAL: Ensure this is commented out or removed for select mode clicks to work\r\n        console.log(\"[Drag Start - Select Mode] Active sim:\", event.active);\r\n        if (!event.active) currentSim.alphaTarget(0.3).restart();\r\n        d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\r\n        d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\r\n      }\r\n    }\r\n\r\n    function dragged(event, d) {\r\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\r\n        event.sourceEvent.stopPropagation();\r\n        if (!svgInstance || !linkingState.current.tempLink) return; \r\n        const [targetX, targetY] = d3.pointer(event.sourceEvent, svgInstance); \r\n        linkingState.current.tempLink\r\n          .attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${targetX},${targetY}`);\r\n      } else {\r\n        event.sourceEvent.stopPropagation();\r\n        d.fx = Math.max(15, Math.min(containerWidth - 15, event.x));\r\n        d.fy = Math.max(15, Math.min(containerHeight - 15, event.y));\r\n        d.position = { x: d.fx, y: d.fy };\r\n      }\r\n    }\r\n\r\n    async function dragended(event, d) {\r\n        const currentSim = simulationRef.current; // Use the ref\r\n        if (!currentSim) return;\r\n        if (!event.active) currentSim.alphaTarget(0);\r\n\r\n        // Check if this was a click (no significant drag movement)\r\n        const wasClick = Math.abs(event.dx) < 2 && Math.abs(event.dy) < 2;\r\n\r\n        if (interactionMode === 'connect') {\r\n          // This block handles ending a connection attempt (drag-based)\r\n          console.log(\"[Drag End - Connect Mode] isLinking:\", linkingState.current.isLinking);\r\n          if (linkingState.current.isLinking) {\r\n            const [pointerX, pointerY] = d3.pointer(event.sourceEvent, svgInstance);\r\n            const releaseTargetElement = document.elementFromPoint(event.sourceEvent.clientX, event.sourceEvent.clientY);\r\n            const closestNodeGroup = releaseTargetElement ? releaseTargetElement.closest('.node') : null;\r\n\r\n            if (closestNodeGroup) {\r\n              const targetNodeData = d3.select(closestNodeGroup).datum();\r\n              if (targetNodeData && linkingState.current.sourceNode && linkingState.current.sourceNode._id !== targetNodeData._id) {\r\n                console.log(`[Drag End - Connect Mode] Creating edge from ${linkingState.current.sourceNode._id} to ${targetNodeData._id}`);\r\n                if (onCreateEdge) {\r\n                  onCreateEdge(linkingState.current.sourceNode._id, targetNodeData._id);\r\n                }\r\n              } else {\r\n                console.log(\"[Drag End - Connect Mode] Drag ended on source node or invalid target. Cancelling link.\");\r\n              }\r\n            } else {\r\n              console.log(\"[Drag End - Connect Mode] Drag ended NOT on a node. Cancelling link.\");\r\n            }\r\n            linkingState.current.tempLink?.remove();\r\n            linkingState.current.isLinking = false;\r\n            linkingState.current.sourceNode = null;\r\n            linkingState.current.tempLink = null;\r\n            setInteractionMode('select');\r\n          } else if (wasClick) {\r\n            // A \"click\" (drag with no movement) on a node while in connect mode.\r\n            // Currently, click-linking is disabled. So, this action effectively does nothing for linking.\r\n            // We might want to select the node or provide feedback, but handleNodeClick will also fire.\r\n            console.log(`[Drag End - Connect Mode] Click detected on node ${d._id}. No drag-linking action.`);\r\n          }\r\n        } else { // interactionMode === 'select' (or other modes)\r\n          // TEMPORARILY REMOVE CLICK HANDLING FROM DRAGEND TO ISOLATE\r\n          /*\r\n          if (wasClick && !event.defaultPrevented) { \r\n            console.log(`[Drag End - Select Mode] Click detected on node ${d._id}. Calling onNodeClick.`);\r\n            if (clickTimeout.current) {\r\n              clearTimeout(clickTimeout.current);\r\n              clickTimeout.current = null;\r\n            }\r\n            setSelectedEdge(null); \r\n            if (onNodeClick) {\r\n              onNodeClick(d);\r\n            }\r\n          } else if (!wasClick) { // It was a drag\r\n          */\r\n          // Ensure only actual drags are handled here for now\r\n          if (!wasClick) { // It was a drag\r\n            console.log(`[Drag End - Select Mode] Drag finished for node ${d._id}. Updating position.`);\r\n            d.fx = Math.max(15, Math.min(containerWidth - 15, d.x)); \r\n            d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\r\n            d.position = { x: d.fx, y: d.fy };\r\n            if (api && typeof api.updateNode === 'function') {\r\n              api.updateNode(d._id, { position: { x: d.fx, y: d.fy } })\r\n                .catch(err => console.error(\"Failed to update node position:\", err));\r\n            }\r\n          } else {\r\n              console.log(\"[Drag End - Select Mode] Click was detected (dx/dy small), but not processing as click here. Letting handleNodeClick manage it.\");\r\n          }\r\n        }\r\n    }\r\n\r\n    return d3.drag()\r\n      .on('start', dragstarted)\r\n      .on('drag', dragged)\r\n      .on('end', dragended);\r\n  }\r\n\r\n  const handleNodeClick = (event, d) => {\r\n    console.log(`[Node Click Handler] Node: ${d._id}, Mode: ${interactionMode}, DefaultPrevented: ${event.defaultPrevented}`);\r\n\r\n    if (event.defaultPrevented ) { \r\n      console.log('[Node Click Handler] DefaultPrevented, returning early (likely drag related).');\r\n      return;\r\n    }\r\n\r\n    if (clickTimeout.current) { // Double-click\r\n      clearTimeout(clickTimeout.current);\r\n      clickTimeout.current = null;\r\n      console.log(`[Node Click Handler] Double-click on node ${d._id}.`);\r\n      if (onNodeDoubleClick) {\r\n        onNodeDoubleClick(d);\r\n      }\r\n      return;\r\n    }\r\n\r\n    // For single-click, set a timeout. \r\n    clickTimeout.current = setTimeout(() => {\r\n      clickTimeout.current = null;\r\n      console.log(`[Node Click Handler] Timeout for single click on ${d._id}. Mode: ${interactionMode}.`);\r\n      \r\n      if (interactionMode === 'connect') {\r\n        console.log(`[Node Click Handler - Connect Mode] Single click on node ${d._id}. No action for click-linking.`);\r\n      } else { // interactionMode === 'select'\r\n        console.log(`[Node Click Handler - Select Mode] Processing single click for node ${d._id}.`);\r\n        setSelectedEdge(null); \r\n        if (onNodeClick) { \r\n          onNodeClick(d);\r\n        }\r\n      }\r\n    }, 250); \r\n  };\r\n\r\n  // Handle edge deletion\r\n  const handleDeleteEdge = () => {\r\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\r\n      onDeleteEdge(selectedEdge._id);\r\n      setSelectedEdge(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-wrapper\" onClick={(e) => {\r\n      console.log('[Graph Wrapper Click] Target:', e.target, 'CurrentTarget:', e.currentTarget);\r\n      if (e.target === e.currentTarget) {\r\n        console.log('[Graph Wrapper Click] Click was directly on wrapper.');\r\n        if (onBackgroundClick) {\r\n          onBackgroundClick();\r\n        }\r\n      }\r\n    }}>\r\n      {nodes && nodes.length > 0 ? (\r\n        <svg ref={svgRef} className=\"graph-svg\" />\r\n      ) : (\r\n        <div className=\"graph-svg empty-graph-placeholder\">\r\n          <div className=\"empty-graph-message\">\r\n            <p>This canvas is empty. Start by creating a new node!</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className=\"graph-controls\">\r\n        {selectedEdge && (\r\n          <button\r\n            onClick={handleDeleteEdge}\r\n            className=\"button danger\"\r\n          >\r\n            <TrashIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            Remove Edge\r\n          </button>\r\n        )}\r\n        <div className=\"button-row\">\r\n          <button \r\n            onClick={() => {\r\n              // Pass current dimensions when calling onCreateNew\r\n              if (onCreateNew) {\r\n                onCreateNew({ \r\n                  graphWidth: graphDimensionsRef.current.width, \r\n                  graphHeight: graphDimensionsRef.current.height \r\n                });\r\n              }\r\n            }}\r\n            className=\"button primary\"\r\n          >\r\n            <PlusIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            Create New Node\r\n          </button>\r\n          <button\r\n            onClick={() => setInteractionMode(prevMode => prevMode === 'connect' ? 'select' : 'connect')}\r\n            className={`button accent ${interactionMode === 'connect' ? 'active' : ''}`}\r\n          >\r\n            <LinkIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            {interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}