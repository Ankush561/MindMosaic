{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Mind Mosaic\\\\client\\\\src\\\\components\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport api from '../services/api.js';\nimport PlusIcon from './icons/PlusIcon';\nimport LinkIcon from './icons/LinkIcon';\nimport TrashIcon from './icons/TrashIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  nodes = [],\n  edges = [],\n  onNodeClick,\n  onNodeDoubleClick,\n  onCreateNew,\n  onCreateEdge,\n  onDeleteEdge,\n  interactionMode = 'select',\n  setInteractionMode,\n  onBackgroundClick,\n  isAnyPanelVisible /*, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete */\n}) => {\n  _s();\n  // Early return if no nodes or edges are provided\n  if (!nodes || !Array.isArray(nodes) || nodes.length === 0) {\n    return null;\n  }\n\n  // Validate edges and ensure they have required properties\n  const validEdges = edges.filter(edge => edge && edge.source && edge.target && nodes.some(n => n._id === edge.source) && nodes.some(n => n._id === edge.target));\n\n  // Create a node map for quick lookup\n  const nodeMap = new Map(nodes.map(node => [node._id, node]));\n  console.log(\"CURRENT INTERACTION MODE:\", interactionMode);\n  const svgRef = useRef(null);\n  const [isSvgMounted, setIsSvgMounted] = useState(false);\n  const simulationRef = useRef(); // Ref to store the D3 simulation instance\n  const linkingState = useRef({\n    sourceNode: null,\n    tempLink: null,\n    isLinking: false\n  });\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const clickTimeout = useRef(null);\n  const graphDimensionsRef = useRef({\n    width: 800,\n    height: 600\n  }); // For App.js, needs live dimensions\n  const stableViewBoxDimensionsRef = useRef({\n    width: 0,\n    height: 0\n  }); // For D3 viewBox, needs initial stable dimensions\n\n  // console.log('Graph received:', {\n  //   nodeCount: nodes.length,\n  //   edgeCount: edges.length,\n  //   mode: interactionMode\n  // });\n\n  // Debug: Log the actual nodes and edges data\n  // console.log('Nodes data:', JSON.stringify(nodes, null, 2));\n  // console.log('Edges data:', JSON.stringify(edges, null, 2));\n\n  console.log(\"Current onCreateEdge function:\", onCreateEdge);\n  const handleMouseMoveLinking = useCallback(event => {\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\n      return;\n    }\n    if (!svgRef.current) return;\n    const [x, y] = d3.pointer(event, svgRef.current);\n\n    // Update the temp link to follow the mouse\n    linkingState.current.tempLink.attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\n  }, [svgRef, linkingState]);\n  const handleMouseUpLinking = useCallback(event => {\n    if (linkingState.current.isLinking) {\n      var _linkingState$current5;\n      if (!svgRef.current) return;\n      const clickedDomElement = event.target;\n      const closestNodeGroup = clickedDomElement.closest('.node');\n      const isNode = !!closestNodeGroup;\n      if (!isNode) {\n        var _linkingState$current;\n        console.log('Clicked on empty space - cancelling connection');\n\n        // Clean up\n        (_linkingState$current = linkingState.current.tempLink) === null || _linkingState$current === void 0 ? void 0 : _linkingState$current.remove();\n\n        // Reset visual feedback\n        d3.selectAll('.node circle').attr('stroke', '#1B5E20').attr('stroke-width', 1.5);\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Get the target node ID\n      const targetNodeElement = d3.select(closestNodeGroup);\n      if (!targetNodeElement || !targetNodeElement.node()) {\n        var _linkingState$current2;\n        console.log('Failed to find target node element');\n        (_linkingState$current2 = linkingState.current.tempLink) === null || _linkingState$current2 === void 0 ? void 0 : _linkingState$current2.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n      const targetNode = targetNodeElement.datum();\n      if (!targetNode || !targetNode._id) {\n        var _linkingState$current3;\n        console.log('Failed to get valid target node data');\n        (_linkingState$current3 = linkingState.current.tempLink) === null || _linkingState$current3 === void 0 ? void 0 : _linkingState$current3.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Complete the connection\n      const sourceNode = linkingState.current.sourceNode;\n      if (sourceNode._id === targetNode._id) {\n        var _linkingState$current4;\n        console.log('Cannot connect node to itself');\n        (_linkingState$current4 = linkingState.current.tempLink) === null || _linkingState$current4 === void 0 ? void 0 : _linkingState$current4.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Create the edge\n      const edgeData = {\n        source: sourceNode._id,\n        target: targetNode._id,\n        type: 'related',\n        weight: 1\n      };\n\n      // Call the onCreateEdge callback\n      if (onCreateEdge) {\n        onCreateEdge(edgeData);\n      }\n\n      // Clean up\n      (_linkingState$current5 = linkingState.current.tempLink) === null || _linkingState$current5 === void 0 ? void 0 : _linkingState$current5.remove();\n      linkingState.current.isLinking = false;\n      linkingState.current.sourceNode = null;\n      linkingState.current.tempLink = null;\n\n      // Reset visual feedback\n      d3.selectAll('.node circle').attr('stroke', '#1B5E20').attr('stroke-width', 1.5);\n    }\n  }, [svgRef, linkingState, onCreateEdge]);\n  useEffect(() => {\n    const svgInstance = d3.select(svgRef.current);\n    if (interactionMode === 'connect') {\n      const onMouseMoveLinking = handleMouseMoveLinking;\n      const onMouseUpLinking = handleMouseUpLinking;\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\n      // console.log('Global linking listeners ADDED to SVG for connect mode.');\n\n      return () => {\n        svgInstance.on('mousemove.linking', null);\n        svgInstance.on('mouseup.linking', null);\n        // console.log('Global linking listeners REMOVED from SVG.');\n      };\n    } else {\n      svgInstance.on('mousemove.linking', null);\n      svgInstance.on('mouseup.linking', null);\n      if (linkingState.current.isLinking) {\n        var _linkingState$current6;\n        // console.log('Exited connect mode with active link: Forcibly cleaning up.');\n        (_linkingState$current6 = linkingState.current.tempLink) === null || _linkingState$current6 === void 0 ? void 0 : _linkingState$current6.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return () => {};\n    }\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]);\n\n  // Main effect for D3 rendering and updates\n  useEffect(() => {\n    // console.log('[Graph Effect - Main D3] Running. Nodes count:', nodes.length, 'Edges count:', edges.length);\n    // console.log('[Graph Effect - Main D3] Nodes prop:', JSON.parse(JSON.stringify(nodes)));\n    // console.log('[Graph Effect - Main D3] Edges prop:', JSON.parse(JSON.stringify(edges)));\n\n    const currentSvg = svgRef.current;\n    if (!currentSvg) {\n      // console.log('[Graph Effect - Main D3] SVG ref not available yet. Aborting D3 setup.');\n      return; // SVG element isn't rendered yet (e.g. nodes are empty)\n    }\n\n    // Initialize simulation IF it doesn't exist yet AND currentSvg is available\n    if (!simulationRef.current) {\n      // console.log('[Graph Effect - Main D3] Initializing simulation.');\n      const initialWidth = graphDimensionsRef.current.width;\n      const initialHeight = graphDimensionsRef.current.height;\n      simulationRef.current = d3.forceSimulation().force('link', d3.forceLink([]).id(d => d._id).distance(150)).alpha(0).alphaDecay(1).alphaTarget(0);\n      // console.log('[Graph Effect - Main D3] Simulation initialized:', simulationRef.current);\n    }\n    const svg = d3.select(currentSvg); // Use currentSvg directly as it's confirmed not null\n    const simulation = simulationRef.current;\n\n    // This check should ideally not be hit if the above init logic works, but keep as safeguard\n    if (!simulation) {\n      // console.error('[Graph Effect - Main D3] Simulation ref is STILL not set! This is unexpected. Aborting.');\n      return;\n    }\n    // console.log('[Graph Effect - Main D3] Simulation instance retrieved:', simulation);\n\n    svg.on('click.diagnostic', event => {\n      // console.log('[SVG DIAGNOSTIC CLICK] SVG itself was clicked. Target:', event.target);\n    });\n\n    // 1. Manage the background rectangle: append if not exists, ensure attributes.\n    let backgroundRect = svg.select('rect.background');\n    if (backgroundRect.empty()) {\n      backgroundRect = svg.append('rect').attr('class', 'background');\n    }\n    backgroundRect // Ensure attributes are set on every run if they could change (e.g. dimensions)\n    .attr('width', '100%').attr('height', '100%').attr('fill', 'transparent').on('click', event => {\n      // console.log('[Background Rect Clicked Directly] Target:', event.target);\n      if (event.target.classList.contains('background')) {\n        d3.selectAll('.link').classed('selected', false);\n        setSelectedEdge(null);\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    });\n\n    // 2. Ensure dedicated groups for links and nodes exist (append if not).\n    let linkGroup = svg.select('g.links-group');\n    if (linkGroup.empty()) {\n      linkGroup = svg.append('g').attr('class', 'links-group');\n    }\n    let nodeGroup = svg.select('g.nodes-group');\n    if (nodeGroup.empty()) {\n      nodeGroup = svg.append('g').attr('class', 'nodes-group');\n    }\n\n    // 3. Manage defs for markers: append if not exists.\n    let defs = svg.select('defs');\n    if (defs.empty()) {\n      defs = svg.append('defs');\n    }\n    // Check if marker already exists before appending\n    if (defs.select('#arrow').empty()) {\n      defs.append(\"marker\").attr(\"id\", \"arrow\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 20).attr(\"refY\", 0).attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#A8C3A4\");\n    }\n\n    // Determine live dimensions for clamping and for App.js new node positioning\n    const liveContainerWidth = currentSvg.clientWidth;\n    const liveContainerHeight = currentSvg.clientHeight;\n    graphDimensionsRef.current = {\n      width: liveContainerWidth,\n      height: liveContainerHeight\n    }; // Update for App.js\n\n    // Set stable viewBox dimensions only once when valid live dimensions are first available\n    if (stableViewBoxDimensionsRef.current.width === 0 && liveContainerWidth > 0) {\n      stableViewBoxDimensionsRef.current.width = liveContainerWidth;\n      // console.log(`[Graph Dimensions] Stable viewBoxWidth SET to: ${liveContainerWidth}`);\n    }\n    if (stableViewBoxDimensionsRef.current.height === 0 && liveContainerHeight > 0) {\n      stableViewBoxDimensionsRef.current.height = liveContainerHeight;\n      // console.log(`[Graph Dimensions] Stable viewBoxHeight SET to: ${liveContainerHeight}`);\n    }\n\n    // Use stable dimensions for the viewBox if available, otherwise fallback to live (should only be for very first paint)\n    const viewBoxWidth = stableViewBoxDimensionsRef.current.width > 0 ? stableViewBoxDimensionsRef.current.width : liveContainerWidth;\n    const viewBoxHeight = stableViewBoxDimensionsRef.current.height > 0 ? stableViewBoxDimensionsRef.current.height : liveContainerHeight;\n\n    // console.log(`[Graph Dimensions] Using for viewBox: ${viewBoxWidth}x${viewBoxHeight}. Live: ${liveContainerWidth}x${liveContainerHeight}`);\n\n    svg.attr('viewBox', [0, 0, viewBoxWidth, viewBoxHeight]).attr('preserveAspectRatio', 'xMidYMid meet');\n\n    // Update node positions (fx, fy) before passing to simulation\n    nodes.forEach(node => {\n      const hasValidPositionProp = node.position && typeof node.position.x === 'number' && typeof node.position.y === 'number';\n      if (hasValidPositionProp) {\n        node.x = node.position.x;\n        node.y = node.position.y;\n        node.fx = node.position.x;\n        node.fy = node.position.y;\n      } else {\n        // Position from prop is invalid or missing. Node should be allowed to be placed by simulation.\n        // Or, if it's a new node without prior x/y, give it a random start.\n        node.x = typeof node.x === 'number' ? node.x : Math.random() * (liveContainerWidth - 100) + 50;\n        node.y = typeof node.y === 'number' ? node.y : Math.random() * (liveContainerHeight - 100) + 50;\n        node.fx = null; // Explicitly nullify fx/fy if position from prop is not definitive.\n        node.fy = null;\n\n        // For consistency or if other parts of the code expect node.position to exist:\n        // Update node.position to reflect the initial x,y that will be used by the simulation (if fx/fy are null).\n        // This ensures that if this node object is reused, its .position reflects its current state.\n        node.position = {\n          x: node.x,\n          y: node.y\n        };\n      }\n    });\n    // console.log('[D3 Data] Nodes after position init:', JSON.parse(JSON.stringify(nodes))); // Deep copy for logging\n\n    // Validate and process nodes and edges\n    const nodeMap = {};\n    nodes.forEach(node => {\n      if (node && node._id) {\n        nodeMap[node._id] = node;\n      }\n    });\n\n    // Filter out invalid edges\n    const validEdges = edges.filter(edge => edge && edge.source && edge.target && nodeMap[edge.source] && nodeMap[edge.target]);\n    const processedEdges = validEdges.map(edge => ({\n      id: edge._id,\n      source: nodeMap[edge.source],\n      target: nodeMap[edge.target],\n      type: edge.type || 'related',\n      _id: edge._id\n    }));\n\n    // Log edge processing for debugging\n    console.log('Processed edges count:', processedEdges.length);\n    console.log('Invalid edges count:', edges.length - validEdges.length);\n    // console.log('[D3 Data] Processed Edges:', JSON.parse(JSON.stringify(processedEdges)));\n\n    simulation.nodes(nodes).on('tick', ticked);\n    simulation.force('link').links(processedEdges);\n\n    // Handle link rendering with null checks\n    const linkElements = linkGroup.selectAll('path.link').data(processedEdges, d => d.id).join('path').attr('class', 'link').attr('data-id', d => (d === null || d === void 0 ? void 0 : d.id) || '').attr('stroke', '#A8C3A4').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)');\n\n    // Add error handling for click events\n    linkElements.on('click', (event, d) => {\n      try {\n        handleEdgeClick(event, d);\n      } catch (err) {\n        console.error('Error handling edge click:', err);\n      }\n    });\n    linkElements.on('click', handleEdgeClick);\n    // console.log('[D3 Elements] linkElements count:', linkElements.size());\n\n    // Handle node rendering with null checks\n    const nodeElements = nodeGroup.selectAll('g.node').data(nodes, d => (d === null || d === void 0 ? void 0 : d._id) || '').join(enter => {\n      const g = enter.append('g').attr('class', 'node').attr('data-id', d => (d === null || d === void 0 ? void 0 : d._id) || '');\n\n      // Only apply drag behavior in select mode\n      if (interactionMode === 'select' && g.node()) {\n        g.call(dragBehavior(simulation, svg.node(), liveContainerWidth, liveContainerHeight));\n      }\n\n      // Create circle with null checks\n      const circle = g.append('circle').attr('r', 12).attr('fill', '#2E7D32').attr('stroke', '#1B5E20').attr('stroke-width', 1.5).style('pointer-events', 'all');\n\n      // Create text with null checks\n      g.append('text').text(d => {\n        var _d$_id;\n        return (d === null || d === void 0 ? void 0 : d.title) || (d === null || d === void 0 ? void 0 : (_d$_id = d._id) === null || _d$_id === void 0 ? void 0 : _d$_id.substring(0, 6)) || 'Node';\n      }).attr('x', 16).attr('y', 5).attr('fill', '#FAF3E0').attr('text-anchor', 'start');\n\n      // Attach click handler with null check\n      if (g.node() && handleNodeClick) {\n        g.on('click', handleNodeClick);\n      }\n      return g;\n    }, update => {\n      // Re-apply or remove drag behavior based on current mode\n      if (interactionMode === 'select' && update.node()) {\n        update.call(dragBehavior(simulation, svg.node(), liveContainerWidth, liveContainerHeight));\n      } else {\n        // Remove drag behavior\n        update.on('.drag', null);\n      }\n\n      // Make sure click events are still attached\n      if (update.node() && handleNodeClick) {\n        update.on('click', handleNodeClick);\n      }\n      return update;\n    }, exit => {\n      // Remove nodes with null check\n      if (exit.node()) {\n        exit.remove();\n      }\n    });\n\n    // console.log('[D3 Elements] nodeElements count:', nodeElements.size());\n\n    const circles = nodeElements.select('circle');\n    circles.on('click', handleNodeClick).style('pointer-events', 'all');\n    function handleEdgeClick(event, d) {\n      console.log('[Edge Click] Attempted on edge:', d.id, 'Mode:', interactionMode);\n      event.stopPropagation();\n      if (interactionMode === 'select') {\n        d3.selectAll('.link').classed('selected', false);\n        d3.select(event.currentTarget).classed('selected', true);\n        setSelectedEdge(d);\n        if (onNodeClick) {\n          // This onNodeClick(null) is to deselect any selected node\n          console.log(\"handleEdgeClick: Calling onNodeClick(null) to deselect node.\");\n          onNodeClick(null); // Deselects any selected node in App.js\n        } else {\n          console.log(\"handleEdgeClick: onNodeClick prop is undefined (cannot deselect node).\");\n        }\n      } else {\n        console.log(\"handleEdgeClick: Not in 'select' mode. Current mode:\", interactionMode, \"No action taken.\");\n      }\n    }\n    function ticked() {\n      // console.log('[Ticked] Simulation tick occurred.');\n      // if (nodes.length > 0 && nodes[0]) {\n      //     console.log(`[Ticked] Sample node 0: x=${nodes[0].x}, y=${nodes[0].y}, fx=${nodes[0].fx}, fy=${nodes[0].fy}`);\n      // }\n      // if (linkElements.size() > 0 && processedEdges.length > 0 && processedEdges[0]) {\n      //   const firstEdge = processedEdges[0];\n      //   if (firstEdge && firstEdge.source && typeof firstEdge.source.x === 'number' && firstEdge.target && typeof firstEdge.target.x === 'number') {\n      //        console.log(`[Ticked] Sample link 0 source: x=${firstEdge.source.x}, y=${firstEdge.source.y}. Target: x=${firstEdge.target.x}, y=${firstEdge.target.y}`);\n      //   }\n      // }\n\n      linkElements.attr('d', d => {\n        const sourceXPos = d.source.fx != null ? d.source.fx : d.source.x;\n        const sourceYPos = d.source.fy != null ? d.source.fy : d.source.y;\n        const targetXPos = d.target.fx != null ? d.target.fx : d.target.x;\n        const targetYPos = d.target.fy != null ? d.target.fy : d.target.y;\n        const sourceX = typeof sourceXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, sourceXPos)) : 0;\n        const sourceY = typeof sourceYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, sourceYPos)) : 0;\n        const targetX = typeof targetXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, targetXPos)) : 0;\n        const targetY = typeof targetYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, targetYPos)) : 0;\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\n      });\n      nodeElements.attr('transform', d => {\n        const xPos = d.fx != null ? d.fx : d.x;\n        const yPos = d.fy != null ? d.fy : d.y;\n        const x = typeof xPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, xPos)) : 0;\n        const y = typeof yPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, yPos)) : 0;\n        return `translate(${x},${y})`;\n      });\n    }\n\n    // TEMPORARILY COMMENT OUT THE SIMULATION KICK TO TEST ZOOM ISSUE\n    // simulation.alpha(0.3).restart(); // Previous state\n    simulation.alpha(0.1).restart(); // Re-enable with a gentle kick\n    simulation.alphaTarget(0); // Ensure this runs to keep the simulation cool\n    console.log('[Graph Effect - Main D3] Gentle simulation kick (alpha 0.1) re-enabled. Alpha target set to 0.');\n\n    // Cleanup for the main useEffect\n    return () => {\n      svg.on('click.diagnostic', null);\n      // Do not stop simulation here as it's persistent. Stop on unmount.\n      if (linkingState.current.tempLink) {\n        linkingState.current.tempLink.remove();\n      }\n      linkingState.current = {\n        sourceNode: null,\n        tempLink: null,\n        isLinking: false\n      };\n      if (clickTimeout.current) {\n        clearTimeout(clickTimeout.current);\n      }\n    };\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, onDeleteEdge, interactionMode, setInteractionMode, onBackgroundClick, isAnyPanelVisible, handleMouseMoveLinking, handleMouseUpLinking]);\n\n  // Add a separate useEffect for stopping the simulation on component unmount\n  useEffect(() => {\n    return () => {\n      if (simulationRef.current) {\n        console.log('[Graph Unmount] Stopping simulation.');\n        simulationRef.current.stop();\n      }\n    };\n  }, []); // Empty dependency array means this runs once on mount for the return (cleanup) function\n\n  // Handle keyboard delete for selected edges\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n          onDeleteEdge(selectedEdge._id);\n          setSelectedEdge(null);\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedEdge, onDeleteEdge]);\n  useEffect(() => {\n    if (svgRef.current) {\n      setIsSvgMounted(true);\n    }\n    return () => setIsSvgMounted(false);\n  }, []);\n  function dragBehavior(sim, svgInstance, containerWidth, containerHeight) {\n    // Only return drag behavior if we're in select mode\n    if (interactionMode !== 'select') {\n      return d3.drag(); // Return empty drag behavior\n    }\n    return d3.drag().on('start', function (event, d) {\n      event.sourceEvent.stopPropagation();\n      if (!event.active) sim.alphaTarget(0.3).restart();\n      d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\n      d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\n    }).on('drag', function (event, d) {\n      event.sourceEvent.stopPropagation();\n      d.fx = Math.max(15, Math.min(containerWidth - 15, event.x));\n      d.fy = Math.max(15, Math.min(containerHeight - 15, event.y));\n      d.position = {\n        x: d.fx,\n        y: d.fy\n      };\n    }).on('end', async function (event, d) {\n      const wasClick = Math.abs(event.dx) < 2 && Math.abs(event.dy) < 2;\n      if (!wasClick && api !== null && api !== void 0 && api.updateNode) {\n        await api.updateNode(d._id, {\n          position: {\n            x: d.fx,\n            y: d.fy\n          }\n        }).catch(err => console.error(\"Failed to update node position:\", err));\n      }\n    });\n  }\n  const handleNodeClick = (event, d) => {\n    console.log(`[Node Click Handler] Node: ${d._id}, Mode: ${interactionMode}`);\n    console.log(`[Node Click Handler] Current linking state:`, linkingState.current);\n    console.log(`[Node Click Handler] onCreateEdge function:`, onCreateEdge);\n    if (event.defaultPrevented) {\n      console.log('[Node Click Handler] DefaultPrevented, returning early');\n      return;\n    }\n    if (interactionMode === 'connect') {\n      console.log('[Node Click Handler] In connect mode');\n      if (!linkingState.current.isLinking) {\n        // Start a new connection\n        console.log(' STARTING connection from node:', d._id);\n        linkingState.current = {\n          isLinking: true,\n          sourceNode: d,\n          tempLink: d3.select(svgRef.current).append('path').attr('class', 'temp-link').attr('d', `M${d.x},${d.y}L${d.x},${d.y}`).attr('stroke-dasharray', '5,5').attr('stroke', '#B87333').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)').raise()\n        };\n        console.log(' Linking state after start:', linkingState.current);\n\n        // Add visual feedback to the source node\n        d3.select(event.currentTarget).select('circle').attr('stroke', '#B87333').attr('stroke-width', 3);\n      } else {\n        var _linkingState$current7, _linkingState$current8, _linkingState$current9;\n        // Complete the connection\n        console.log(' COMPLETING connection');\n        console.log(' Source node:', (_linkingState$current7 = linkingState.current.sourceNode) === null || _linkingState$current7 === void 0 ? void 0 : _linkingState$current7._id);\n        console.log(' Target node:', d._id);\n        if (linkingState.current.sourceNode && linkingState.current.sourceNode._id !== d._id) {\n          console.log(' Creating edge from', linkingState.current.sourceNode._id, 'to', d._id);\n          console.log(' onCreateEdge function exists:', !!onCreateEdge);\n          if (onCreateEdge) {\n            try {\n              console.log(' Calling onCreateEdge...');\n              const result = onCreateEdge(linkingState.current.sourceNode._id, d._id);\n              console.log(' onCreateEdge result:', result);\n            } catch (error) {\n              console.error(' Error calling onCreateEdge:', error);\n            }\n          } else {\n            console.error(' onCreateEdge is not defined!');\n          }\n        } else if (((_linkingState$current8 = linkingState.current.sourceNode) === null || _linkingState$current8 === void 0 ? void 0 : _linkingState$current8._id) === d._id) {\n          console.log(' Cannot connect node to itself');\n        } else {\n          console.log(' No source node found');\n        }\n\n        // Clean up\n        console.log(' Cleaning up linking state');\n        (_linkingState$current9 = linkingState.current.tempLink) === null || _linkingState$current9 === void 0 ? void 0 : _linkingState$current9.remove();\n\n        // Reset visual feedback\n        d3.selectAll('.node circle').attr('stroke', '#1B5E20').attr('stroke-width', 1.5);\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return;\n    }\n\n    // Rest of your existing select mode logic...\n  };\n  const handleDeleteEdge = () => {\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n      onDeleteEdge(selectedEdge._id);\n      setSelectedEdge(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      className: \"graph\",\n      viewBox: `0 0 ${stableViewBoxDimensionsRef.current.width} ${stableViewBoxDimensionsRef.current.height}`,\n      children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n        children: /*#__PURE__*/_jsxDEV(\"marker\", {\n          id: \"arrow\",\n          viewBox: \"0 -5 10 10\",\n          refX: \"20\",\n          refY: \"0\",\n          markerWidth: \"6\",\n          markerHeight: \"6\",\n          orient: \"auto\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M0,-5L10,0L0,5\",\n            fill: \"#A8C3A4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 679,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"links-group\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"nodes-group\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-controls\",\n      children: [selectedEdge && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteEdge,\n        className: \"button danger\",\n        children: [/*#__PURE__*/_jsxDEV(TrashIcon, {\n          style: {\n            width: '1rem',\n            height: '1rem',\n            marginRight: '0.5rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 13\n        }, this), \"Remove Edge\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (onCreateNew) {\n              onCreateNew({\n                graphWidth: graphDimensionsRef.current.width,\n                graphHeight: graphDimensionsRef.current.height\n              });\n            }\n          },\n          className: \"button primary\",\n          children: [/*#__PURE__*/_jsxDEV(PlusIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 708,\n            columnNumber: 13\n          }, this), \"Create New Node\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ConnectButton, {\n          interactionMode: interactionMode,\n          setInteractionMode: setInteractionMode,\n          linkingState: linkingState,\n          svgRef: svgRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 686,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 663,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"iP/yIuDoXxtRaNRpN0l1DhbZ/go=\");\n_c = Graph;\nconst ConnectButton = ({\n  interactionMode,\n  setInteractionMode,\n  linkingState,\n  svgRef\n}) => {\n  const handleClick = () => {\n    const newMode = interactionMode === 'connect' ? 'select' : 'connect';\n    setInteractionMode(newMode);\n    if (newMode === 'select') {\n      d3.select(svgRef.current).selectAll('.temp-link').remove();\n      linkingState.current = {\n        sourceNode: null,\n        tempLink: null,\n        isLinking: false\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleClick,\n    className: `button accent ${interactionMode === 'connect' ? 'active' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(LinkIcon, {\n      style: {\n        width: '1rem',\n        height: '1rem',\n        marginRight: '0.5rem'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 738,\n      columnNumber: 7\n    }, this), interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 734,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ConnectButton;\nexport default Graph;\nvar _c, _c2;\n$RefreshReg$(_c, \"Graph\");\n$RefreshReg$(_c2, \"ConnectButton\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","d3","api","PlusIcon","LinkIcon","TrashIcon","jsxDEV","_jsxDEV","Graph","nodes","edges","onNodeClick","onNodeDoubleClick","onCreateNew","onCreateEdge","onDeleteEdge","interactionMode","setInteractionMode","onBackgroundClick","isAnyPanelVisible","_s","Array","isArray","length","validEdges","filter","edge","source","target","some","n","_id","nodeMap","Map","map","node","console","log","svgRef","isSvgMounted","setIsSvgMounted","simulationRef","linkingState","sourceNode","tempLink","isLinking","selectedEdge","setSelectedEdge","clickTimeout","graphDimensionsRef","width","height","stableViewBoxDimensionsRef","handleMouseMoveLinking","event","current","x","y","pointer","attr","handleMouseUpLinking","_linkingState$current5","clickedDomElement","closestNodeGroup","closest","isNode","_linkingState$current","remove","selectAll","targetNodeElement","select","_linkingState$current2","targetNode","datum","_linkingState$current3","_linkingState$current4","edgeData","type","weight","svgInstance","onMouseMoveLinking","onMouseUpLinking","on","_linkingState$current6","currentSvg","initialWidth","initialHeight","forceSimulation","force","forceLink","id","d","distance","alpha","alphaDecay","alphaTarget","svg","simulation","backgroundRect","empty","append","classList","contains","classed","linkGroup","nodeGroup","defs","liveContainerWidth","clientWidth","liveContainerHeight","clientHeight","viewBoxWidth","viewBoxHeight","forEach","hasValidPositionProp","position","fx","fy","Math","random","processedEdges","ticked","links","linkElements","data","join","handleEdgeClick","err","error","nodeElements","enter","g","call","dragBehavior","circle","style","text","_d$_id","title","substring","handleNodeClick","update","exit","circles","stopPropagation","currentTarget","sourceXPos","sourceYPos","targetXPos","targetYPos","sourceX","max","min","sourceY","targetX","targetY","xPos","yPos","restart","clearTimeout","stop","handleKeyDown","key","window","addEventListener","removeEventListener","sim","containerWidth","containerHeight","drag","sourceEvent","active","wasClick","abs","dx","dy","updateNode","catch","defaultPrevented","raise","_linkingState$current7","_linkingState$current8","_linkingState$current9","result","handleDeleteEdge","className","children","ref","viewBox","refX","refY","markerWidth","markerHeight","orient","fill","fileName","_jsxFileName","lineNumber","columnNumber","onClick","marginRight","graphWidth","graphHeight","ConnectButton","_c","handleClick","newMode","_c2","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Mind Mosaic/client/src/components/graph.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport api from '../services/api.js';\nimport PlusIcon from './icons/PlusIcon';\nimport LinkIcon from './icons/LinkIcon';\nimport TrashIcon from './icons/TrashIcon';\n\nconst Graph = ({ nodes = [], edges = [], onNodeClick, onNodeDoubleClick, onCreateNew, onCreateEdge, onDeleteEdge, interactionMode = 'select', setInteractionMode, onBackgroundClick, isAnyPanelVisible /*, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete */ }) => {\n  // Early return if no nodes or edges are provided\n  if (!nodes || !Array.isArray(nodes) || nodes.length === 0) {\n    return null;\n  }\n\n  // Validate edges and ensure they have required properties\n  const validEdges = edges.filter(edge => \n    edge && edge.source && edge.target && \n    nodes.some(n => n._id === edge.source) && \n    nodes.some(n => n._id === edge.target)\n  );\n\n  // Create a node map for quick lookup\n  const nodeMap = new Map(nodes.map(node => [node._id, node]));\n\n  console.log(\"CURRENT INTERACTION MODE:\", interactionMode);\n  const svgRef = useRef(null);\n  const [isSvgMounted, setIsSvgMounted] = useState(false);\n  const simulationRef = useRef(); // Ref to store the D3 simulation instance\n  const linkingState = useRef({ sourceNode: null, tempLink: null, isLinking: false });\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const clickTimeout = useRef(null);\n  const graphDimensionsRef = useRef({ width: 800, height: 600 }); // For App.js, needs live dimensions\n  const stableViewBoxDimensionsRef = useRef({ width: 0, height: 0 }); // For D3 viewBox, needs initial stable dimensions\n\n  // console.log('Graph received:', {\n  //   nodeCount: nodes.length,\n  //   edgeCount: edges.length,\n  //   mode: interactionMode\n  // });\n\n  // Debug: Log the actual nodes and edges data\n  // console.log('Nodes data:', JSON.stringify(nodes, null, 2));\n  // console.log('Edges data:', JSON.stringify(edges, null, 2));\n\n  console.log(\"Current onCreateEdge function:\", onCreateEdge);\n\n  const handleMouseMoveLinking = useCallback((event) => {\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\n      return;\n    }\n\n    if (!svgRef.current) return;\n    \n    const [x, y] = d3.pointer(event, svgRef.current);\n    \n    // Update the temp link to follow the mouse\n    linkingState.current.tempLink\n      .attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\n  }, [svgRef, linkingState]);\n\n  const handleMouseUpLinking = useCallback((event) => {\n    if (linkingState.current.isLinking) {\n      if (!svgRef.current) return;\n      \n      const clickedDomElement = event.target;\n      const closestNodeGroup = clickedDomElement.closest('.node');\n      const isNode = !!closestNodeGroup;\n\n      if (!isNode) {\n        console.log('Clicked on empty space - cancelling connection');\n        \n        // Clean up\n        linkingState.current.tempLink?.remove();\n        \n        // Reset visual feedback\n        d3.selectAll('.node circle')\n          .attr('stroke', '#1B5E20')\n          .attr('stroke-width', 1.5);\n        \n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Get the target node ID\n      const targetNodeElement = d3.select(closestNodeGroup);\n      if (!targetNodeElement || !targetNodeElement.node()) {\n        console.log('Failed to find target node element');\n        linkingState.current.tempLink?.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      const targetNode = targetNodeElement.datum();\n      if (!targetNode || !targetNode._id) {\n        console.log('Failed to get valid target node data');\n        linkingState.current.tempLink?.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Complete the connection\n      const sourceNode = linkingState.current.sourceNode;\n      if (sourceNode._id === targetNode._id) {\n        console.log('Cannot connect node to itself');\n        linkingState.current.tempLink?.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        return;\n      }\n\n      // Create the edge\n      const edgeData = {\n        source: sourceNode._id,\n        target: targetNode._id,\n        type: 'related',\n        weight: 1\n      };\n\n      // Call the onCreateEdge callback\n      if (onCreateEdge) {\n        onCreateEdge(edgeData);\n      }\n\n      // Clean up\n      linkingState.current.tempLink?.remove();\n      linkingState.current.isLinking = false;\n      linkingState.current.sourceNode = null;\n      linkingState.current.tempLink = null;\n\n      // Reset visual feedback\n      d3.selectAll('.node circle')\n        .attr('stroke', '#1B5E20')\n        .attr('stroke-width', 1.5);\n    }\n  }, [svgRef, linkingState, onCreateEdge]);\n\n  useEffect(() => {\n    const svgInstance = d3.select(svgRef.current);\n\n    if (interactionMode === 'connect') {\n      const onMouseMoveLinking = handleMouseMoveLinking;\n      const onMouseUpLinking = handleMouseUpLinking;\n\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\n      // console.log('Global linking listeners ADDED to SVG for connect mode.');\n\n      return () => {\n        svgInstance.on('mousemove.linking', null);\n        svgInstance.on('mouseup.linking', null);\n        // console.log('Global linking listeners REMOVED from SVG.');\n      };\n    } else {\n      svgInstance.on('mousemove.linking', null);\n      svgInstance.on('mouseup.linking', null);\n\n      if (linkingState.current.isLinking) {\n        // console.log('Exited connect mode with active link: Forcibly cleaning up.');\n        linkingState.current.tempLink?.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return () => { };\n    }\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]);\n\n  // Main effect for D3 rendering and updates\n  useEffect(() => {\n    // console.log('[Graph Effect - Main D3] Running. Nodes count:', nodes.length, 'Edges count:', edges.length);\n    // console.log('[Graph Effect - Main D3] Nodes prop:', JSON.parse(JSON.stringify(nodes)));\n    // console.log('[Graph Effect - Main D3] Edges prop:', JSON.parse(JSON.stringify(edges)));\n\n    const currentSvg = svgRef.current;\n    if (!currentSvg) {\n      // console.log('[Graph Effect - Main D3] SVG ref not available yet. Aborting D3 setup.');\n      return; // SVG element isn't rendered yet (e.g. nodes are empty)\n    }\n\n    // Initialize simulation IF it doesn't exist yet AND currentSvg is available\n    if (!simulationRef.current) {\n      // console.log('[Graph Effect - Main D3] Initializing simulation.');\n      const initialWidth = graphDimensionsRef.current.width;\n      const initialHeight = graphDimensionsRef.current.height;\n      simulationRef.current = d3.forceSimulation()\n        .force('link', d3.forceLink([]).id(d => d._id).distance(150))\n        .alpha(0).alphaDecay(1).alphaTarget(0);\n      // console.log('[Graph Effect - Main D3] Simulation initialized:', simulationRef.current);\n    }\n\n    const svg = d3.select(currentSvg); // Use currentSvg directly as it's confirmed not null\n    const simulation = simulationRef.current;\n\n    // This check should ideally not be hit if the above init logic works, but keep as safeguard\n    if (!simulation) {\n      // console.error('[Graph Effect - Main D3] Simulation ref is STILL not set! This is unexpected. Aborting.');\n      return;\n    }\n    // console.log('[Graph Effect - Main D3] Simulation instance retrieved:', simulation);\n\n    svg.on('click.diagnostic', (event) => {\n      // console.log('[SVG DIAGNOSTIC CLICK] SVG itself was clicked. Target:', event.target);\n    });\n\n    // 1. Manage the background rectangle: append if not exists, ensure attributes.\n    let backgroundRect = svg.select('rect.background');\n    if (backgroundRect.empty()) {\n      backgroundRect = svg.append('rect')\n        .attr('class', 'background');\n    }\n    backgroundRect // Ensure attributes are set on every run if they could change (e.g. dimensions)\n      .attr('width', '100%')\n      .attr('height', '100%')\n      .attr('fill', 'transparent')\n      .on('click', (event) => {\n        // console.log('[Background Rect Clicked Directly] Target:', event.target);\n        if (event.target.classList.contains('background')) {\n          d3.selectAll('.link').classed('selected', false);\n          setSelectedEdge(null);\n          if (onBackgroundClick) {\n            onBackgroundClick();\n          }\n        }\n      });\n\n    // 2. Ensure dedicated groups for links and nodes exist (append if not).\n    let linkGroup = svg.select('g.links-group');\n    if (linkGroup.empty()) {\n      linkGroup = svg.append('g').attr('class', 'links-group');\n    }\n    let nodeGroup = svg.select('g.nodes-group');\n    if (nodeGroup.empty()) {\n      nodeGroup = svg.append('g').attr('class', 'nodes-group');\n    }\n\n    // 3. Manage defs for markers: append if not exists.\n    let defs = svg.select('defs');\n    if (defs.empty()) {\n      defs = svg.append('defs');\n    }\n    // Check if marker already exists before appending\n    if (defs.select('#arrow').empty()) {\n      defs.append(\"marker\")\n        .attr(\"id\", \"arrow\")\n        .attr(\"viewBox\", \"0 -5 10 10\")\n        .attr(\"refX\", 20)\n        .attr(\"refY\", 0)\n        .attr(\"markerWidth\", 6)\n        .attr(\"markerHeight\", 6)\n        .attr(\"orient\", \"auto\")\n        .append(\"path\")\n        .attr(\"d\", \"M0,-5L10,0L0,5\")\n        .attr(\"fill\", \"#A8C3A4\");\n    }\n\n    // Determine live dimensions for clamping and for App.js new node positioning\n    const liveContainerWidth = currentSvg.clientWidth;\n    const liveContainerHeight = currentSvg.clientHeight;\n    graphDimensionsRef.current = { width: liveContainerWidth, height: liveContainerHeight }; // Update for App.js\n\n    // Set stable viewBox dimensions only once when valid live dimensions are first available\n    if (stableViewBoxDimensionsRef.current.width === 0 && liveContainerWidth > 0) {\n      stableViewBoxDimensionsRef.current.width = liveContainerWidth;\n      // console.log(`[Graph Dimensions] Stable viewBoxWidth SET to: ${liveContainerWidth}`);\n    }\n    if (stableViewBoxDimensionsRef.current.height === 0 && liveContainerHeight > 0) {\n      stableViewBoxDimensionsRef.current.height = liveContainerHeight;\n      // console.log(`[Graph Dimensions] Stable viewBoxHeight SET to: ${liveContainerHeight}`);\n    }\n\n    // Use stable dimensions for the viewBox if available, otherwise fallback to live (should only be for very first paint)\n    const viewBoxWidth = stableViewBoxDimensionsRef.current.width > 0 ? stableViewBoxDimensionsRef.current.width : liveContainerWidth;\n    const viewBoxHeight = stableViewBoxDimensionsRef.current.height > 0 ? stableViewBoxDimensionsRef.current.height : liveContainerHeight;\n\n    // console.log(`[Graph Dimensions] Using for viewBox: ${viewBoxWidth}x${viewBoxHeight}. Live: ${liveContainerWidth}x${liveContainerHeight}`);\n\n    svg\n      .attr('viewBox', [0, 0, viewBoxWidth, viewBoxHeight])\n      .attr('preserveAspectRatio', 'xMidYMid meet');\n\n    // Update node positions (fx, fy) before passing to simulation\n    nodes.forEach(node => {\n      const hasValidPositionProp = node.position && typeof node.position.x === 'number' && typeof node.position.y === 'number';\n\n      if (hasValidPositionProp) {\n        node.x = node.position.x;\n        node.y = node.position.y;\n        node.fx = node.position.x;\n        node.fy = node.position.y;\n      } else {\n        // Position from prop is invalid or missing. Node should be allowed to be placed by simulation.\n        // Or, if it's a new node without prior x/y, give it a random start.\n        node.x = typeof node.x === 'number' ? node.x : (Math.random() * (liveContainerWidth - 100) + 50);\n        node.y = typeof node.y === 'number' ? node.y : (Math.random() * (liveContainerHeight - 100) + 50);\n        node.fx = null; // Explicitly nullify fx/fy if position from prop is not definitive.\n        node.fy = null;\n\n        // For consistency or if other parts of the code expect node.position to exist:\n        // Update node.position to reflect the initial x,y that will be used by the simulation (if fx/fy are null).\n        // This ensures that if this node object is reused, its .position reflects its current state.\n        node.position = { x: node.x, y: node.y };\n      }\n    });\n    // console.log('[D3 Data] Nodes after position init:', JSON.parse(JSON.stringify(nodes))); // Deep copy for logging\n\n    // Validate and process nodes and edges\n    const nodeMap = {};\n    nodes.forEach(node => {\n      if (node && node._id) {\n        nodeMap[node._id] = node;\n      }\n    });\n\n    // Filter out invalid edges\n    const validEdges = edges.filter(edge => \n      edge && \n      edge.source && \n      edge.target && \n      nodeMap[edge.source] && \n      nodeMap[edge.target]\n    );\n\n    const processedEdges = validEdges.map(edge => ({\n      id: edge._id,\n      source: nodeMap[edge.source],\n      target: nodeMap[edge.target],\n      type: edge.type || 'related',\n      _id: edge._id\n    }));\n\n    // Log edge processing for debugging\n    console.log('Processed edges count:', processedEdges.length);\n    console.log('Invalid edges count:', edges.length - validEdges.length);\n    // console.log('[D3 Data] Processed Edges:', JSON.parse(JSON.stringify(processedEdges)));\n\n    simulation\n      .nodes(nodes)\n      .on('tick', ticked);\n    simulation.force('link').links(processedEdges);\n\n    // Handle link rendering with null checks\n    const linkElements = linkGroup.selectAll('path.link')\n      .data(processedEdges, d => d.id)\n      .join('path')\n      .attr('class', 'link')\n      .attr('data-id', d => d?.id || '')\n      .attr('stroke', '#A8C3A4')\n      .attr('stroke-width', 2)\n      .attr('fill', 'none')\n      .attr('marker-end', 'url(#arrow)');\n\n    // Add error handling for click events\n    linkElements.on('click', (event, d) => {\n      try {\n        handleEdgeClick(event, d);\n      } catch (err) {\n        console.error('Error handling edge click:', err);\n      }\n    });\n    linkElements.on('click', handleEdgeClick);\n    // console.log('[D3 Elements] linkElements count:', linkElements.size());\n\n    // Handle node rendering with null checks\n    const nodeElements = nodeGroup.selectAll('g.node')\n      .data(nodes, d => d?._id || '')\n      .join(\n        enter => {\n          const g = enter.append('g')\n            .attr('class', 'node')\n            .attr('data-id', d => d?._id || '');\n          \n          // Only apply drag behavior in select mode\n          if (interactionMode === 'select' && g.node()) {\n            g.call(dragBehavior(simulation, svg.node(), liveContainerWidth, liveContainerHeight));\n          }\n\n          // Create circle with null checks\n          const circle = g.append('circle')\n            .attr('r', 12)\n            .attr('fill', '#2E7D32')\n            .attr('stroke', '#1B5E20')\n            .attr('stroke-width', 1.5)\n            .style('pointer-events', 'all');\n\n          // Create text with null checks\n          g.append('text')\n            .text(d => d?.title || d?._id?.substring(0, 6) || 'Node')\n            .attr('x', 16)\n            .attr('y', 5)\n            .attr('fill', '#FAF3E0')\n            .attr('text-anchor', 'start');\n\n          // Attach click handler with null check\n          if (g.node() && handleNodeClick) {\n            g.on('click', handleNodeClick);\n          }\n\n          return g;\n        },\n        update => {\n          // Re-apply or remove drag behavior based on current mode\n          if (interactionMode === 'select' && update.node()) {\n            update.call(dragBehavior(simulation, svg.node(), liveContainerWidth, liveContainerHeight));\n          } else {\n            // Remove drag behavior\n            update.on('.drag', null);\n          }\n          \n          // Make sure click events are still attached\n          if (update.node() && handleNodeClick) {\n            update.on('click', handleNodeClick);\n          }\n          \n          return update;\n        },\n        exit => {\n          // Remove nodes with null check\n          if (exit.node()) {\n            exit.remove();\n          }\n        }\n      );\n\n    // console.log('[D3 Elements] nodeElements count:', nodeElements.size());\n\n    const circles = nodeElements.select('circle');\n    circles.on('click', handleNodeClick).style('pointer-events', 'all');\n\n    function handleEdgeClick(event, d) {\n      console.log('[Edge Click] Attempted on edge:', d.id, 'Mode:', interactionMode);\n      event.stopPropagation();\n      if (interactionMode === 'select') {\n        d3.selectAll('.link').classed('selected', false);\n        d3.select(event.currentTarget).classed('selected', true);\n        setSelectedEdge(d);\n        if (onNodeClick) { // This onNodeClick(null) is to deselect any selected node\n          console.log(\"handleEdgeClick: Calling onNodeClick(null) to deselect node.\");\n          onNodeClick(null); // Deselects any selected node in App.js\n        } else {\n          console.log(\"handleEdgeClick: onNodeClick prop is undefined (cannot deselect node).\");\n        }\n      } else {\n        console.log(\"handleEdgeClick: Not in 'select' mode. Current mode:\", interactionMode, \"No action taken.\");\n      }\n    }\n\n    function ticked() {\n      // console.log('[Ticked] Simulation tick occurred.');\n      // if (nodes.length > 0 && nodes[0]) {\n      //     console.log(`[Ticked] Sample node 0: x=${nodes[0].x}, y=${nodes[0].y}, fx=${nodes[0].fx}, fy=${nodes[0].fy}`);\n      // }\n      // if (linkElements.size() > 0 && processedEdges.length > 0 && processedEdges[0]) {\n      //   const firstEdge = processedEdges[0];\n      //   if (firstEdge && firstEdge.source && typeof firstEdge.source.x === 'number' && firstEdge.target && typeof firstEdge.target.x === 'number') {\n      //        console.log(`[Ticked] Sample link 0 source: x=${firstEdge.source.x}, y=${firstEdge.source.y}. Target: x=${firstEdge.target.x}, y=${firstEdge.target.y}`);\n      //   }\n      // }\n\n      linkElements.attr('d', d => {\n        const sourceXPos = d.source.fx != null ? d.source.fx : d.source.x;\n        const sourceYPos = d.source.fy != null ? d.source.fy : d.source.y;\n        const targetXPos = d.target.fx != null ? d.target.fx : d.target.x;\n        const targetYPos = d.target.fy != null ? d.target.fy : d.target.y;\n\n        const sourceX = typeof sourceXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, sourceXPos)) : 0;\n        const sourceY = typeof sourceYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, sourceYPos)) : 0;\n        const targetX = typeof targetXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, targetXPos)) : 0;\n        const targetY = typeof targetYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, targetYPos)) : 0;\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\n      });\n\n      nodeElements.attr('transform', d => {\n        const xPos = d.fx != null ? d.fx : d.x;\n        const yPos = d.fy != null ? d.fy : d.y;\n\n        const x = typeof xPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, xPos)) : 0;\n        const y = typeof yPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, yPos)) : 0;\n        return `translate(${x},${y})`;\n      });\n    }\n\n    // TEMPORARILY COMMENT OUT THE SIMULATION KICK TO TEST ZOOM ISSUE\n    // simulation.alpha(0.3).restart(); // Previous state\n    simulation.alpha(0.1).restart(); // Re-enable with a gentle kick\n    simulation.alphaTarget(0); // Ensure this runs to keep the simulation cool\n    console.log('[Graph Effect - Main D3] Gentle simulation kick (alpha 0.1) re-enabled. Alpha target set to 0.');\n\n    // Cleanup for the main useEffect\n    return () => {\n      svg.on('click.diagnostic', null);\n      // Do not stop simulation here as it's persistent. Stop on unmount.\n      if (linkingState.current.tempLink) {\n        linkingState.current.tempLink.remove();\n      }\n      linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\n      if (clickTimeout.current) {\n        clearTimeout(clickTimeout.current);\n      }\n    };\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, onDeleteEdge, interactionMode, setInteractionMode, onBackgroundClick, isAnyPanelVisible, handleMouseMoveLinking, handleMouseUpLinking]);\n\n  // Add a separate useEffect for stopping the simulation on component unmount\n  useEffect(() => {\n    return () => {\n      if (simulationRef.current) {\n        console.log('[Graph Unmount] Stopping simulation.');\n        simulationRef.current.stop();\n      }\n    };\n  }, []); // Empty dependency array means this runs once on mount for the return (cleanup) function\n\n  // Handle keyboard delete for selected edges\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n          onDeleteEdge(selectedEdge._id);\n          setSelectedEdge(null);\n        }\n      }\n    };\n\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedEdge, onDeleteEdge]);\n\n  useEffect(() => {\n    if (svgRef.current) {\n      setIsSvgMounted(true);\n    }\n    return () => setIsSvgMounted(false);\n  }, []);\n\n  function dragBehavior(sim, svgInstance, containerWidth, containerHeight) {\n    // Only return drag behavior if we're in select mode\n    if (interactionMode !== 'select') {\n      return d3.drag(); // Return empty drag behavior\n    }\n    \n    return d3.drag()\n      .on('start', function(event, d) {\n        event.sourceEvent.stopPropagation();\n        if (!event.active) sim.alphaTarget(0.3).restart();\n        d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\n        d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\n      })\n      .on('drag', function(event, d) {\n        event.sourceEvent.stopPropagation();\n        d.fx = Math.max(15, Math.min(containerWidth - 15, event.x));\n        d.fy = Math.max(15, Math.min(containerHeight - 15, event.y));\n        d.position = { x: d.fx, y: d.fy };\n      })\n      .on('end', async function(event, d) {\n        const wasClick = Math.abs(event.dx) < 2 && Math.abs(event.dy) < 2;\n        if (!wasClick && api?.updateNode) {\n          await api.updateNode(d._id, { position: { x: d.fx, y: d.fy } })\n            .catch(err => console.error(\"Failed to update node position:\", err));\n        }\n      });\n  }\n\n  const handleNodeClick = (event, d) => {\n    console.log(`[Node Click Handler] Node: ${d._id}, Mode: ${interactionMode}`);\n    console.log(`[Node Click Handler] Current linking state:`, linkingState.current);\n    console.log(`[Node Click Handler] onCreateEdge function:`, onCreateEdge);\n    \n    if (event.defaultPrevented) {\n      console.log('[Node Click Handler] DefaultPrevented, returning early');\n      return;\n    }\n\n    if (interactionMode === 'connect') {\n      console.log('[Node Click Handler] In connect mode');\n      \n      if (!linkingState.current.isLinking) {\n        // Start a new connection\n        console.log(' STARTING connection from node:', d._id);\n        linkingState.current = {\n          isLinking: true,\n          sourceNode: d,\n          tempLink: d3.select(svgRef.current).append('path')\n            .attr('class', 'temp-link')\n            .attr('d', `M${d.x},${d.y}L${d.x},${d.y}`)\n            .attr('stroke-dasharray', '5,5')\n            .attr('stroke', '#B87333')\n            .attr('stroke-width', 2)\n            .attr('fill', 'none')\n            .attr('marker-end', 'url(#arrow)')\n            .raise()\n        };\n        \n        console.log(' Linking state after start:', linkingState.current);\n        \n        // Add visual feedback to the source node\n        d3.select(event.currentTarget).select('circle')\n          .attr('stroke', '#B87333')\n          .attr('stroke-width', 3);\n          \n      } else {\n        // Complete the connection\n        console.log(' COMPLETING connection');\n        console.log(' Source node:', linkingState.current.sourceNode?._id);\n        console.log(' Target node:', d._id);\n        \n        if (linkingState.current.sourceNode && linkingState.current.sourceNode._id !== d._id) {\n          console.log(' Creating edge from', linkingState.current.sourceNode._id, 'to', d._id);\n          console.log(' onCreateEdge function exists:', !!onCreateEdge);\n          \n          if (onCreateEdge) {\n            try {\n              console.log(' Calling onCreateEdge...');\n              const result = onCreateEdge(linkingState.current.sourceNode._id, d._id);\n              console.log(' onCreateEdge result:', result);\n            } catch (error) {\n              console.error(' Error calling onCreateEdge:', error);\n            }\n          } else {\n            console.error(' onCreateEdge is not defined!');\n          }\n        } else if (linkingState.current.sourceNode?._id === d._id) {\n          console.log(' Cannot connect node to itself');\n        } else {\n          console.log(' No source node found');\n        }\n        \n        // Clean up\n        console.log(' Cleaning up linking state');\n        linkingState.current.tempLink?.remove();\n        \n        // Reset visual feedback\n        d3.selectAll('.node circle')\n          .attr('stroke', '#1B5E20')\n          .attr('stroke-width', 1.5);\n        \n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return;\n    }\n\n    // Rest of your existing select mode logic...\n  };\n\n  const handleDeleteEdge = () => {\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n      onDeleteEdge(selectedEdge._id);\n      setSelectedEdge(null);\n    }\n  };\n\n  return (\n    <div className=\"graph-wrapper\">\n      <svg \n        ref={svgRef} \n        className=\"graph\" \n        viewBox={`0 0 ${stableViewBoxDimensionsRef.current.width} ${stableViewBoxDimensionsRef.current.height}`}\n      >\n        <defs>\n          <marker\n            id=\"arrow\"\n            viewBox=\"0 -5 10 10\"\n            refX=\"20\"\n            refY=\"0\"\n            markerWidth=\"6\"\n            markerHeight=\"6\"\n            orient=\"auto\"\n          >\n            <path d=\"M0,-5L10,0L0,5\" fill=\"#A8C3A4\" />\n          </marker>\n        </defs>\n        <g className=\"links-group\"></g>\n        <g className=\"nodes-group\"></g>\n      </svg>\n      \n      <div className=\"graph-controls\">\n        {selectedEdge && (\n          <button\n            onClick={handleDeleteEdge}\n            className=\"button danger\"\n          >\n            <TrashIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\n            Remove Edge\n          </button>\n        )}\n        <div className=\"button-row\">\n          <button\n            onClick={() => {\n              if (onCreateNew) {\n                onCreateNew({\n                  graphWidth: graphDimensionsRef.current.width,\n                  graphHeight: graphDimensionsRef.current.height\n                });\n              }\n            }}\n            className=\"button primary\"\n          >\n            <PlusIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\n            Create New Node\n          </button>\n          <ConnectButton \n            interactionMode={interactionMode}\n            setInteractionMode={setInteractionMode}\n            linkingState={linkingState}\n            svgRef={svgRef}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ConnectButton = ({ interactionMode, setInteractionMode, linkingState, svgRef }) => {\n  const handleClick = () => {\n    const newMode = interactionMode === 'connect' ? 'select' : 'connect';\n    setInteractionMode(newMode);\n    if (newMode === 'select') {\n      d3.select(svgRef.current).selectAll('.temp-link').remove();\n      linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\n    }\n  };\n\n  return (\n    <button\n      onClick={handleClick}\n      className={`button accent ${interactionMode === 'connect' ? 'active' : ''}`}\n    >\n      <LinkIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\n      {interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes'}\n    </button>\n  );\n};\n\nexport default Graph;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}