{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Project\\\\client\\\\src\\\\components\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  nodes = [],\n  edges = [],\n  onNodeClick,\n  onCreateNew,\n  onCreateEdge,\n  interactionMode = 'select'\n}) => {\n  _s();\n  const svgRef = useRef();\n  const linkingState = useRef({\n    sourceNode: null,\n    tempLink: null,\n    isLinking: false\n  });\n  console.log('Graph received:', {\n    nodeCount: nodes.length,\n    edgeCount: edges.length,\n    mode: interactionMode\n  });\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n    if (!nodes || nodes.length === 0) {\n      return;\n    }\n    const width = svgRef.current.clientWidth;\n    const height = svgRef.current.clientHeight;\n    const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(edges).id(d => d.id).distance(100)).force('charge', d3.forceManyBody().strength(-200)).force('center', d3.forceCenter(width / 2, height / 2)).on('tick', ticked);\n    const linkElements = svg.append('g').attr('class', 'links').selectAll('line').data(edges).enter().append('line').attr('class', 'link');\n    const nodeElements = svg.append('g').attr('class', 'nodes').selectAll('g').data(nodes).enter().append('g').attr('class', 'node').call(dragBehavior(simulation, interactionMode, svg, linkingState, onCreateEdge));\n    nodeElements.append('circle').attr('r', 10).on('click', handleNodeClick);\n    nodeElements.append('text').text(d => d.title || d.id.substring(0, 6)).attr('x', 15).attr('y', 5);\n    function handleNodeClick(event, d) {\n      event.stopPropagation();\n      if (interactionMode === 'select' || interactionMode === 'reposition') {\n        if (onNodeClick) onNodeClick(d);\n      }\n      // In 'connect' mode, clicks are handled by drag start/end or ignored\n    }\n    function ticked() {\n      linkElements.attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n      nodeElements.attr('transform', d => `translate(${d.x},${d.y})`);\n    }\n    return () => {\n      simulation.stop();\n      if (linkingState.current.tempLink) linkingState.current.tempLink.remove();\n      linkingState.current = {\n        sourceNode: null,\n        tempLink: null,\n        isLinking: false\n      };\n    };\n  }, [nodes, edges, onNodeClick, onCreateEdge, interactionMode]);\n\n  // Drag handler factory - defined within Graph component scope, before return\n  function dragBehavior(simulation, currentMode, svg, linkingStateRef, onCreateEdgeCallback) {\n    function dragstarted(event, d) {\n      if (currentMode === 'connect') {\n        linkingStateRef.current.isLinking = true;\n        linkingStateRef.current.sourceNode = d;\n        linkingStateRef.current.tempLink = svg.append('line').attr('class', 'temp-link link').attr('x1', d.x).attr('y1', d.y).attr('x2', d.x).attr('y2', d.y).attr('stroke-dasharray', '5,5');\n        event.sourceEvent.stopPropagation();\n      } else if (currentMode === 'reposition') {\n        if (!event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n    }\n    function dragged(event, d) {\n      if (currentMode === 'connect' && linkingStateRef.current.isLinking) {\n        linkingStateRef.current.tempLink.attr('x2', event.x).attr('y2', event.y);\n      } else if (currentMode === 'reposition') {\n        d.fx = event.x;\n        d.fy = event.y;\n      }\n    }\n    function dragended(event, d) {\n      if (currentMode === 'connect' && linkingStateRef.current.isLinking) {\n        if (linkingStateRef.current.tempLink) linkingStateRef.current.tempLink.remove();\n        const targetElement = event.sourceEvent.target;\n        let targetNodeElement = targetElement;\n        while (targetNodeElement && !d3.select(targetNodeElement).classed('node')) {\n          targetNodeElement = targetNodeElement.parentNode;\n        }\n        const targetDatum = d3.select(targetNodeElement).datum();\n        if (targetDatum && targetDatum.id && linkingStateRef.current.sourceNode && targetDatum.id !== linkingStateRef.current.sourceNode.id) {\n          if (onCreateEdgeCallback) {\n            onCreateEdgeCallback(linkingStateRef.current.sourceNode.id, targetDatum.id);\n          }\n        }\n        linkingStateRef.current = {\n          sourceNode: null,\n          tempLink: null,\n          isLinking: false\n        };\n      } else if (currentMode === 'reposition') {\n        if (!event.active) simulation.alphaTarget(0);\n      }\n    }\n    return d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended).filter(() => currentMode === 'connect' || currentMode === 'reposition'); // Filter based on currentMode\n  }\n  return (\n    /*#__PURE__*/\n    // This is the single, main return for the Graph component's JSX\n    _jsxDEV(\"div\", {\n      className: \"graph-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: \"600\",\n        height: \"600\",\n        className: \"graph-svg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"create-btn\",\n        onClick: onCreateNew,\n        children: \"+ New Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(Graph, \"2G83SEjOKNyGzDb0X1IfSIAX97Y=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useEffect","d3","jsxDEV","_jsxDEV","Graph","nodes","edges","onNodeClick","onCreateNew","onCreateEdge","interactionMode","_s","svgRef","linkingState","sourceNode","tempLink","isLinking","console","log","nodeCount","length","edgeCount","mode","svg","select","current","selectAll","remove","width","clientWidth","height","clientHeight","simulation","forceSimulation","force","forceLink","id","d","distance","forceManyBody","strength","forceCenter","on","ticked","linkElements","append","attr","data","enter","nodeElements","call","dragBehavior","handleNodeClick","text","title","substring","event","stopPropagation","source","x","y","target","stop","currentMode","linkingStateRef","onCreateEdgeCallback","dragstarted","sourceEvent","active","alphaTarget","restart","fx","fy","dragged","dragended","targetElement","targetNodeElement","classed","parentNode","targetDatum","datum","drag","filter","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Project/client/src/components/graph.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\nimport './Graph.css';\r\n\r\nconst Graph = ({ nodes = [], edges = [], onNodeClick, onCreateNew, onCreateEdge, interactionMode = 'select' }) => {\r\n  const svgRef = useRef();\r\n  const linkingState = useRef({ sourceNode: null, tempLink: null, isLinking: false });\r\n\r\n  console.log('Graph received:', {\r\n    nodeCount: nodes.length,\r\n    edgeCount: edges.length,\r\n    mode: interactionMode\r\n  });\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll('*').remove();\r\n\r\n    if (!nodes || nodes.length === 0) {\r\n      return;\r\n    }\r\n    \r\n    const width = svgRef.current.clientWidth;\r\n    const height = svgRef.current.clientHeight;\r\n\r\n    const simulation = d3.forceSimulation(nodes)\r\n      .force('link', d3.forceLink(edges).id(d => d.id).distance(100))\r\n      .force('charge', d3.forceManyBody().strength(-200))\r\n      .force('center', d3.forceCenter(width / 2, height / 2))\r\n      .on('tick', ticked);\r\n\r\n    const linkElements = svg.append('g')\r\n      .attr('class', 'links')\r\n      .selectAll('line')\r\n      .data(edges)\r\n      .enter().append('line')\r\n      .attr('class', 'link');\r\n\r\n    const nodeElements = svg.append('g')\r\n      .attr('class', 'nodes')\r\n      .selectAll('g')\r\n      .data(nodes)\r\n      .enter().append('g')\r\n      .attr('class', 'node')\r\n      .call(dragBehavior(simulation, interactionMode, svg, linkingState, onCreateEdge));\r\n\r\n    nodeElements.append('circle')\r\n      .attr('r', 10)\r\n      .on('click', handleNodeClick);\r\n    \r\n    nodeElements.append('text')\r\n      .text(d => d.title || d.id.substring(0, 6))\r\n      .attr('x', 15)\r\n      .attr('y', 5);\r\n\r\n    function handleNodeClick(event, d) {\r\n      event.stopPropagation();\r\n      if (interactionMode === 'select' || interactionMode === 'reposition') {\r\n        if (onNodeClick) onNodeClick(d);\r\n      }\r\n      // In 'connect' mode, clicks are handled by drag start/end or ignored\r\n    }\r\n\r\n    function ticked() {\r\n      linkElements\r\n        .attr('x1', d => d.source.x)\r\n        .attr('y1', d => d.source.y)\r\n        .attr('x2', d => d.target.x)\r\n        .attr('y2', d => d.target.y);\r\n\r\n      nodeElements\r\n        .attr('transform', d => `translate(${d.x},${d.y})`);\r\n    }\r\n\r\n    return () => {\r\n      simulation.stop();\r\n      if (linkingState.current.tempLink) linkingState.current.tempLink.remove();\r\n      linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n    };\r\n  }, [nodes, edges, onNodeClick, onCreateEdge, interactionMode]);\r\n\r\n  // Drag handler factory - defined within Graph component scope, before return\r\n  function dragBehavior(simulation, currentMode, svg, linkingStateRef, onCreateEdgeCallback) {\r\n    function dragstarted(event, d) {\r\n      if (currentMode === 'connect') {\r\n        linkingStateRef.current.isLinking = true;\r\n        linkingStateRef.current.sourceNode = d;\r\n        linkingStateRef.current.tempLink = svg.append('line')\r\n          .attr('class', 'temp-link link')\r\n          .attr('x1', d.x)\r\n          .attr('y1', d.y)\r\n          .attr('x2', d.x)\r\n          .attr('y2', d.y)\r\n          .attr('stroke-dasharray', '5,5');\r\n        event.sourceEvent.stopPropagation();\r\n      } else if (currentMode === 'reposition') {\r\n        if (!event.active) simulation.alphaTarget(0.3).restart();\r\n        d.fx = d.x;\r\n        d.fy = d.y;\r\n      }\r\n    }\r\n    \r\n    function dragged(event, d) {\r\n      if (currentMode === 'connect' && linkingStateRef.current.isLinking) {\r\n        linkingStateRef.current.tempLink\r\n          .attr('x2', event.x)\r\n          .attr('y2', event.y);\r\n      } else if (currentMode === 'reposition') {\r\n        d.fx = event.x;\r\n        d.fy = event.y;\r\n      }\r\n    }\r\n    \r\n    function dragended(event, d) {\r\n      if (currentMode === 'connect' && linkingStateRef.current.isLinking) {\r\n        if (linkingStateRef.current.tempLink) linkingStateRef.current.tempLink.remove();\r\n        \r\n        const targetElement = event.sourceEvent.target;\r\n        let targetNodeElement = targetElement;\r\n        while(targetNodeElement && !d3.select(targetNodeElement).classed('node')) {\r\n          targetNodeElement = targetNodeElement.parentNode;\r\n        }\r\n        const targetDatum = d3.select(targetNodeElement).datum();\r\n\r\n        if (targetDatum && targetDatum.id && linkingStateRef.current.sourceNode && targetDatum.id !== linkingStateRef.current.sourceNode.id) {\r\n          if (onCreateEdgeCallback) {\r\n            onCreateEdgeCallback(linkingStateRef.current.sourceNode.id, targetDatum.id);\r\n          }\r\n        }\r\n        linkingStateRef.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n      } else if (currentMode === 'reposition') {\r\n        if (!event.active) simulation.alphaTarget(0);\r\n      }\r\n    }\r\n    \r\n    return d3.drag()\r\n        .on('start', dragstarted)\r\n        .on('drag', dragged)\r\n        .on('end', dragended)\r\n        .filter(() => currentMode === 'connect' || currentMode === 'reposition'); // Filter based on currentMode\r\n  }\r\n\r\n  return ( // This is the single, main return for the Graph component's JSX\r\n    <div className=\"graph-wrapper\">\r\n      <svg ref={svgRef} width=\"600\" height=\"600\" className=\"graph-svg\" />\r\n      <button className=\"create-btn\" onClick={onCreateNew}>\r\n        + New Node\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}