{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Project\\\\client\\\\src\\\\components\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport api from '../services/api.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  nodes = [],\n  edges = [],\n  onNodeClick,\n  onCreateNew,\n  onCreateEdge,\n  interactionMode = 'select'\n}) => {\n  _s();\n  const svgRef = useRef();\n  const linkingState = useRef({\n    sourceNode: null,\n    tempLink: null,\n    isLinking: false\n  });\n  console.log('Graph received:', {\n    nodeCount: nodes.length,\n    edgeCount: edges.length,\n    mode: interactionMode\n  });\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n    if (!nodes || nodes.length === 0) {\n      return;\n    }\n    const width = svgRef.current.clientWidth;\n    const height = svgRef.current.clientHeight;\n\n    // Initialize node positions from stored values if available\n    nodes.forEach(node => {\n      if (node.position && node.position.x !== null && node.position.y !== null) {\n        node.x = node.position.x;\n        node.y = node.position.y;\n        node.fx = node.position.x; // Fixed position X\n        node.fy = node.position.y; // Fixed position Y\n      }\n    });\n    const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(edges).distance(100)) // Simplified: assumes source/target are node objects\n    .force('charge', d3.forceManyBody().strength(-200)).force('center', d3.forceCenter(width / 2, height / 2)).on('tick', ticked);\n    const linkElements = svg.append('g').attr('class', 'links').selectAll('line').data(edges).enter().append('line').attr('class', 'link');\n    const nodeElements = svg.append('g').attr('class', 'nodes').selectAll('g').data(nodes).enter().append('g').attr('class', 'node').call(dragBehavior(simulation, interactionMode, svg, linkingState, onCreateEdge));\n    nodeElements.append('circle').attr('r', 10).on('click', handleNodeClick);\n    nodeElements.append('text').text(d => d.title || d.id.substring(0, 6)).attr('x', 15).attr('y', 5);\n    function handleNodeClick(event, d) {\n      event.stopPropagation();\n      if (interactionMode === 'select' || interactionMode === 'reposition') {\n        if (onNodeClick) onNodeClick(d);\n      }\n      // In 'connect' mode, clicks are handled by drag start/end or ignored\n    }\n    function ticked() {\n      linkElements.attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n      nodeElements.attr('transform', d => `translate(${d.x},${d.y})`);\n    }\n    return () => {\n      simulation.stop();\n      if (linkingState.current.tempLink) linkingState.current.tempLink.remove();\n      linkingState.current = {\n        sourceNode: null,\n        tempLink: null,\n        isLinking: false\n      };\n    };\n  }, [nodes, edges, onNodeClick, onCreateEdge, interactionMode]);\n\n  // Drag handler factory - defined within Graph component scope, before return\n  function dragBehavior(simulation, currentMode, svg, linkingStateRef, onCreateEdgeCallback) {\n    function dragstarted(event, d) {\n      if (currentMode === 'connect') {\n        linkingStateRef.current.isLinking = true;\n        linkingStateRef.current.sourceNode = d;\n        linkingStateRef.current.tempLink = svg.append('line').attr('class', 'temp-link link').attr('x1', d.x).attr('y1', d.y).attr('x2', d.x).attr('y2', d.y).attr('stroke-dasharray', '5,5');\n        event.sourceEvent.stopPropagation();\n      } else if (currentMode === 'reposition') {\n        if (!event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n    }\n    function dragged(event, d) {\n      if (currentMode === 'connect' && linkingStateRef.current.isLinking) {\n        linkingStateRef.current.tempLink.attr('x2', event.x).attr('y2', event.y);\n      } else if (currentMode === 'reposition') {\n        d.fx = event.x;\n        d.fy = event.y;\n      }\n    }\n    async function dragended(event, d) {\n      if (currentMode === 'connect' && linkingStateRef.current.isLinking) {\n        if (linkingStateRef.current.tempLink) linkingStateRef.current.tempLink.remove();\n        const targetElement = event.sourceEvent.target;\n        let targetNodeElement = targetElement;\n        while (targetNodeElement && !d3.select(targetNodeElement).classed('node')) {\n          targetNodeElement = targetNodeElement.parentNode;\n        }\n        const targetDatum = d3.select(targetNodeElement).datum();\n        if (targetDatum && targetDatum.id && linkingStateRef.current.sourceNode && targetDatum.id !== linkingStateRef.current.sourceNode.id) {\n          if (onCreateEdgeCallback) {\n            onCreateEdgeCallback(linkingStateRef.current.sourceNode.id, targetDatum.id);\n          }\n        }\n        linkingStateRef.current = {\n          sourceNode: null,\n          tempLink: null,\n          isLinking: false\n        };\n      } else if (currentMode === 'reposition') {\n        if (!event.active) simulation.alphaTarget(0);\n\n        // Save the node position to the database\n        try {\n          if (d._id) {\n            await api.updateNodePosition(d._id, {\n              x: d.x,\n              y: d.y\n            });\n            console.log(`Node position saved: ${d._id} at (${d.x}, ${d.y})`);\n          }\n        } catch (err) {\n          console.error('Failed to save node position:', err);\n        }\n      }\n    }\n    return d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended).filter(() => currentMode === 'connect' || currentMode === 'reposition'); // Filter based on currentMode\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: \"600\",\n      height: \"600\",\n      className: \"graph-svg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"2G83SEjOKNyGzDb0X1IfSIAX97Y=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useEffect","d3","api","jsxDEV","_jsxDEV","Graph","nodes","edges","onNodeClick","onCreateNew","onCreateEdge","interactionMode","_s","svgRef","linkingState","sourceNode","tempLink","isLinking","console","log","nodeCount","length","edgeCount","mode","svg","select","current","selectAll","remove","width","clientWidth","height","clientHeight","forEach","node","position","x","y","fx","fy","simulation","forceSimulation","force","forceLink","distance","forceManyBody","strength","forceCenter","on","ticked","linkElements","append","attr","data","enter","nodeElements","call","dragBehavior","handleNodeClick","text","d","title","id","substring","event","stopPropagation","source","target","stop","currentMode","linkingStateRef","onCreateEdgeCallback","dragstarted","sourceEvent","active","alphaTarget","restart","dragged","dragended","targetElement","targetNodeElement","classed","parentNode","targetDatum","datum","_id","updateNodePosition","err","error","drag","filter","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Project/client/src/components/graph.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\nimport './Graph.css';\r\nimport api from '../services/api.js';\r\n\r\nconst Graph = ({ nodes = [], edges = [], onNodeClick, onCreateNew, onCreateEdge, interactionMode = 'select' }) => {\r\n  const svgRef = useRef();\r\n  const linkingState = useRef({ sourceNode: null, tempLink: null, isLinking: false });\r\n\r\n  console.log('Graph received:', {\r\n    nodeCount: nodes.length,\r\n    edgeCount: edges.length,\r\n    mode: interactionMode\r\n  });\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll('*').remove();\r\n\r\n    if (!nodes || nodes.length === 0) {\r\n      return;\r\n    }\r\n    \r\n    const width = svgRef.current.clientWidth;\r\n    const height = svgRef.current.clientHeight;\r\n\r\n    // Initialize node positions from stored values if available\r\n    nodes.forEach(node => {\r\n      if (node.position && node.position.x !== null && node.position.y !== null) {\r\n        node.x = node.position.x;\r\n        node.y = node.position.y;\r\n        node.fx = node.position.x; // Fixed position X\r\n        node.fy = node.position.y; // Fixed position Y\r\n      }\r\n    });\r\n\r\n    const simulation = d3.forceSimulation(nodes)\r\n      .force('link', d3.forceLink(edges).distance(100)) // Simplified: assumes source/target are node objects\r\n      .force('charge', d3.forceManyBody().strength(-200))\r\n      .force('center', d3.forceCenter(width / 2, height / 2))\r\n      .on('tick', ticked);\r\n\r\n    const linkElements = svg.append('g')\r\n      .attr('class', 'links')\r\n      .selectAll('line')\r\n      .data(edges)\r\n      .enter().append('line')\r\n      .attr('class', 'link');\r\n\r\n    const nodeElements = svg.append('g')\r\n      .attr('class', 'nodes')\r\n      .selectAll('g')\r\n      .data(nodes)\r\n      .enter().append('g')\r\n      .attr('class', 'node')\r\n      .call(dragBehavior(simulation, interactionMode, svg, linkingState, onCreateEdge));\r\n\r\n    nodeElements.append('circle')\r\n      .attr('r', 10)\r\n      .on('click', handleNodeClick);\r\n    \r\n    nodeElements.append('text')\r\n      .text(d => d.title || d.id.substring(0, 6))\r\n      .attr('x', 15)\r\n      .attr('y', 5);\r\n\r\n    function handleNodeClick(event, d) {\r\n      event.stopPropagation();\r\n      if (interactionMode === 'select' || interactionMode === 'reposition') {\r\n        if (onNodeClick) onNodeClick(d);\r\n      }\r\n      // In 'connect' mode, clicks are handled by drag start/end or ignored\r\n    }\r\n\r\n    function ticked() {\r\n      linkElements\r\n        .attr('x1', d => d.source.x)\r\n        .attr('y1', d => d.source.y)\r\n        .attr('x2', d => d.target.x)\r\n        .attr('y2', d => d.target.y);\r\n\r\n      nodeElements\r\n        .attr('transform', d => `translate(${d.x},${d.y})`);\r\n    }\r\n\r\n    return () => {\r\n      simulation.stop();\r\n      if (linkingState.current.tempLink) linkingState.current.tempLink.remove();\r\n      linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n    };\r\n  }, [nodes, edges, onNodeClick, onCreateEdge, interactionMode]);\r\n\r\n  // Drag handler factory - defined within Graph component scope, before return\r\n  function dragBehavior(simulation, currentMode, svg, linkingStateRef, onCreateEdgeCallback) {\r\n    function dragstarted(event, d) {\r\n      if (currentMode === 'connect') {\r\n        linkingStateRef.current.isLinking = true;\r\n        linkingStateRef.current.sourceNode = d;\r\n        linkingStateRef.current.tempLink = svg.append('line')\r\n          .attr('class', 'temp-link link')\r\n          .attr('x1', d.x)\r\n          .attr('y1', d.y)\r\n          .attr('x2', d.x)\r\n          .attr('y2', d.y)\r\n          .attr('stroke-dasharray', '5,5');\r\n        event.sourceEvent.stopPropagation();\r\n      } else if (currentMode === 'reposition') {\r\n        if (!event.active) simulation.alphaTarget(0.3).restart();\r\n        d.fx = d.x;\r\n        d.fy = d.y;\r\n      }\r\n    }\r\n    \r\n    function dragged(event, d) {\r\n      if (currentMode === 'connect' && linkingStateRef.current.isLinking) {\r\n        linkingStateRef.current.tempLink\r\n          .attr('x2', event.x)\r\n          .attr('y2', event.y);\r\n      } else if (currentMode === 'reposition') {\r\n        d.fx = event.x;\r\n        d.fy = event.y;\r\n      }\r\n    }\r\n    \r\n    async function dragended(event, d) {\r\n      if (currentMode === 'connect' && linkingStateRef.current.isLinking) {\r\n        if (linkingStateRef.current.tempLink) linkingStateRef.current.tempLink.remove();\r\n        \r\n        const targetElement = event.sourceEvent.target;\r\n        let targetNodeElement = targetElement;\r\n        while(targetNodeElement && !d3.select(targetNodeElement).classed('node')) {\r\n          targetNodeElement = targetNodeElement.parentNode;\r\n        }\r\n        const targetDatum = d3.select(targetNodeElement).datum();\r\n\r\n        if (targetDatum && targetDatum.id && linkingStateRef.current.sourceNode && targetDatum.id !== linkingStateRef.current.sourceNode.id) {\r\n          if (onCreateEdgeCallback) {\r\n            onCreateEdgeCallback(linkingStateRef.current.sourceNode.id, targetDatum.id);\r\n          }\r\n        }\r\n        linkingStateRef.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n      } else if (currentMode === 'reposition') {\r\n        if (!event.active) simulation.alphaTarget(0);\r\n\r\n        // Save the node position to the database\r\n        try {\r\n          if (d._id) {\r\n            await api.updateNodePosition(d._id, { x: d.x, y: d.y });\r\n            console.log(`Node position saved: ${d._id} at (${d.x}, ${d.y})`);\r\n          }\r\n        } catch (err) {\r\n          console.error('Failed to save node position:', err);\r\n        }\r\n      }\r\n    }\r\n    \r\n    return d3.drag()\r\n        .on('start', dragstarted)\r\n        .on('drag', dragged)\r\n        .on('end', dragended)\r\n        .filter(() => currentMode === 'connect' || currentMode === 'reposition'); // Filter based on currentMode\r\n  }\r\n\r\n  return (\r\n    <div className=\"graph-wrapper\">\r\n      <svg ref={svgRef} width=\"600\" height=\"600\" className=\"graph-svg\" />\r\n      {/* Controls including \"+ New Node\" button are removed from here as per feedback and moved to App.js */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}