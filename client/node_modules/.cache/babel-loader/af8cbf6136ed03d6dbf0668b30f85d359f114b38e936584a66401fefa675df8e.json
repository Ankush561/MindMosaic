{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Project\\\\client\\\\src\\\\components\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport api from '../services/api.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  nodes = [],\n  edges = [],\n  onNodeClick,\n  onCreateNew,\n  onCreateEdge,\n  interactionMode = 'select'\n}) => {\n  _s();\n  const svgRef = useRef();\n  const linkingState = useRef({\n    sourceNode: null,\n    tempLink: null,\n    isLinking: false\n  });\n  console.log('Graph received:', {\n    nodeCount: nodes.length,\n    edgeCount: edges.length,\n    mode: interactionMode\n  });\n\n  // Debug: Log the actual nodes and edges data\n  console.log('Nodes data:', JSON.stringify(nodes, null, 2));\n  console.log('Edges data:', JSON.stringify(edges, null, 2));\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n    if (!nodes || nodes.length === 0) {\n      return;\n    }\n    const width = svgRef.current.clientWidth;\n    const height = svgRef.current.clientHeight;\n\n    // Initialize node positions from stored values if available\n    nodes.forEach(node => {\n      if (node.position && node.position.x !== null && node.position.y !== null) {\n        node.x = node.position.x;\n        node.y = node.position.y;\n        node.fx = node.position.x; // Fixed position X\n        node.fy = node.position.y; // Fixed position Y\n      }\n    });\n\n    // Create a map of nodes by ID for easy lookup\n    const nodeMap = {};\n    nodes.forEach(node => {\n      nodeMap[node._id] = node;\n    });\n\n    // Process edges to ensure they reference actual node objects\n    const processedEdges = edges.map(edge => {\n      // Create a new edge object with proper source and target references\n      return {\n        id: edge._id,\n        source: nodeMap[edge.source] || edge.source,\n        target: nodeMap[edge.target] || edge.target,\n        type: edge.type\n      };\n    });\n\n    // Debug: Log the processed edges\n    console.log('Processed edges:', JSON.stringify(processedEdges, null, 2));\n    const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(processedEdges).id(d => d._id).distance(100)).force('charge', d3.forceManyBody().strength(-200)).force('center', d3.forceCenter(width / 2, height / 2)).on('tick', ticked);\n    const linkElements = svg.append('g').attr('class', 'links').selectAll('line').data(processedEdges).enter().append('line').attr('class', 'link').attr('stroke', '#6c757d').attr('stroke-width', 2);\n    const nodeElements = svg.append('g').attr('class', 'nodes').selectAll('g').data(nodes).enter().append('g').attr('class', 'node').call(dragBehavior(simulation, interactionMode, svg, linkingState, onCreateEdge));\n    nodeElements.append('circle').attr('r', 10).on('click', handleNodeClick);\n    nodeElements.append('text').text(d => {\n      var _d$_id;\n      return d.title || ((_d$_id = d._id) === null || _d$_id === void 0 ? void 0 : _d$_id.substring(0, 6));\n    }).attr('x', 15).attr('y', 5);\n    function handleNodeClick(event, d) {\n      event.stopPropagation();\n      if (interactionMode === 'select' || interactionMode === 'reposition') {\n        if (onNodeClick) onNodeClick(d);\n      }\n      // In 'connect' mode, clicks are handled by drag start/end or ignored\n    }\n    function ticked() {\n      linkElements.attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n      nodeElements.attr('transform', d => `translate(${d.x},${d.y})`);\n    }\n    return () => {\n      simulation.stop();\n      if (linkingState.current.tempLink) linkingState.current.tempLink.remove();\n      linkingState.current = {\n        sourceNode: null,\n        tempLink: null,\n        isLinking: false\n      };\n    };\n  }, [nodes, edges, onNodeClick, onCreateEdge, interactionMode]);\n\n  // Drag handler factory - defined within Graph component scope, before return\n  function dragBehavior(simulation, currentMode, svg, linkingStateRef, onCreateEdgeCallback) {\n    function dragstarted(event, d) {\n      if (currentMode === 'connect') {\n        linkingStateRef.current.isLinking = true;\n        linkingStateRef.current.sourceNode = d;\n        linkingStateRef.current.tempLink = svg.append('line').attr('class', 'temp-link link').attr('x1', d.x).attr('y1', d.y).attr('x2', d.x).attr('y2', d.y).attr('stroke-dasharray', '5,5').attr('stroke', '#6c757d').attr('stroke-width', 2);\n        event.sourceEvent.stopPropagation();\n      } else if (currentMode === 'reposition') {\n        if (!event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n    }\n    function dragged(event, d) {\n      if (currentMode === 'connect' && linkingStateRef.current.isLinking) {\n        linkingStateRef.current.tempLink.attr('x2', event.x).attr('y2', event.y);\n      } else if (currentMode === 'reposition') {\n        d.fx = event.x;\n        d.fy = event.y;\n      }\n    }\n    async function dragended(event, d) {\n      if (currentMode === 'connect' && linkingStateRef.current.isLinking) {\n        if (linkingStateRef.current.tempLink) linkingStateRef.current.tempLink.remove();\n        const targetElement = event.sourceEvent.target;\n        let targetNodeElement = targetElement;\n        while (targetNodeElement && !d3.select(targetNodeElement).classed('node')) {\n          targetNodeElement = targetNodeElement.parentNode;\n        }\n        const targetDatum = d3.select(targetNodeElement).datum();\n        if (targetDatum && targetDatum._id && linkingStateRef.current.sourceNode && targetDatum._id !== linkingStateRef.current.sourceNode._id) {\n          if (onCreateEdgeCallback) {\n            onCreateEdgeCallback(linkingStateRef.current.sourceNode._id, targetDatum._id);\n          }\n        }\n        linkingStateRef.current = {\n          sourceNode: null,\n          tempLink: null,\n          isLinking: false\n        };\n      } else if (currentMode === 'reposition') {\n        if (!event.active) simulation.alphaTarget(0);\n\n        // Save the node position to the database\n        try {\n          if (d._id) {\n            await api.updateNodePosition(d._id, {\n              x: d.x,\n              y: d.y\n            });\n            console.log(`Node position saved: ${d._id} at (${d.x}, ${d.y})`);\n          }\n        } catch (err) {\n          console.error('Failed to save node position:', err);\n        }\n      }\n    }\n    return d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended).filter(() => currentMode === 'connect' || currentMode === 'reposition'); // Filter based on currentMode\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: \"600\",\n      height: \"600\",\n      className: \"graph-svg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"2G83SEjOKNyGzDb0X1IfSIAX97Y=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useEffect","d3","api","jsxDEV","_jsxDEV","Graph","nodes","edges","onNodeClick","onCreateNew","onCreateEdge","interactionMode","_s","svgRef","linkingState","sourceNode","tempLink","isLinking","console","log","nodeCount","length","edgeCount","mode","JSON","stringify","svg","select","current","selectAll","remove","width","clientWidth","height","clientHeight","forEach","node","position","x","y","fx","fy","nodeMap","_id","processedEdges","map","edge","id","source","target","type","simulation","forceSimulation","force","forceLink","d","distance","forceManyBody","strength","forceCenter","on","ticked","linkElements","append","attr","data","enter","nodeElements","call","dragBehavior","handleNodeClick","text","_d$_id","title","substring","event","stopPropagation","stop","currentMode","linkingStateRef","onCreateEdgeCallback","dragstarted","sourceEvent","active","alphaTarget","restart","dragged","dragended","targetElement","targetNodeElement","classed","parentNode","targetDatum","datum","updateNodePosition","err","error","drag","filter","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Project/client/src/components/graph.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\nimport './Graph.css';\r\nimport api from '../services/api.js';\r\n\r\nconst Graph = ({ nodes = [], edges = [], onNodeClick, onCreateNew, onCreateEdge, interactionMode = 'select' }) => {\r\n  const svgRef = useRef();\r\n  const linkingState = useRef({ sourceNode: null, tempLink: null, isLinking: false });\r\n\r\n  console.log('Graph received:', {\r\n    nodeCount: nodes.length,\r\n    edgeCount: edges.length,\r\n    mode: interactionMode\r\n  });\r\n\r\n  // Debug: Log the actual nodes and edges data\r\n  console.log('Nodes data:', JSON.stringify(nodes, null, 2));\r\n  console.log('Edges data:', JSON.stringify(edges, null, 2));\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll('*').remove();\r\n\r\n    if (!nodes || nodes.length === 0) {\r\n      return;\r\n    }\r\n    \r\n    const width = svgRef.current.clientWidth;\r\n    const height = svgRef.current.clientHeight;\r\n\r\n    // Initialize node positions from stored values if available\r\n    nodes.forEach(node => {\r\n      if (node.position && node.position.x !== null && node.position.y !== null) {\r\n        node.x = node.position.x;\r\n        node.y = node.position.y;\r\n        node.fx = node.position.x; // Fixed position X\r\n        node.fy = node.position.y; // Fixed position Y\r\n      }\r\n    });\r\n\r\n    // Create a map of nodes by ID for easy lookup\r\n    const nodeMap = {};\r\n    nodes.forEach(node => {\r\n      nodeMap[node._id] = node;\r\n    });\r\n\r\n    // Process edges to ensure they reference actual node objects\r\n    const processedEdges = edges.map(edge => {\r\n      // Create a new edge object with proper source and target references\r\n      return {\r\n        id: edge._id,\r\n        source: nodeMap[edge.source] || edge.source,\r\n        target: nodeMap[edge.target] || edge.target,\r\n        type: edge.type\r\n      };\r\n    });\r\n\r\n    // Debug: Log the processed edges\r\n    console.log('Processed edges:', JSON.stringify(processedEdges, null, 2));\r\n\r\n    const simulation = d3.forceSimulation(nodes)\r\n      .force('link', d3.forceLink(processedEdges).id(d => d._id).distance(100))\r\n      .force('charge', d3.forceManyBody().strength(-200))\r\n      .force('center', d3.forceCenter(width / 2, height / 2))\r\n      .on('tick', ticked);\r\n\r\n    const linkElements = svg.append('g')\r\n      .attr('class', 'links')\r\n      .selectAll('line')\r\n      .data(processedEdges)\r\n      .enter().append('line')\r\n      .attr('class', 'link')\r\n      .attr('stroke', '#6c757d')\r\n      .attr('stroke-width', 2);\r\n\r\n    const nodeElements = svg.append('g')\r\n      .attr('class', 'nodes')\r\n      .selectAll('g')\r\n      .data(nodes)\r\n      .enter().append('g')\r\n      .attr('class', 'node')\r\n      .call(dragBehavior(simulation, interactionMode, svg, linkingState, onCreateEdge));\r\n\r\n    nodeElements.append('circle')\r\n      .attr('r', 10)\r\n      .on('click', handleNodeClick);\r\n\r\n    nodeElements.append('text')\r\n      .text(d => d.title || d._id?.substring(0, 6))\r\n      .attr('x', 15)\r\n      .attr('y', 5);\r\n\r\n    function handleNodeClick(event, d) {\r\n      event.stopPropagation();\r\n      if (interactionMode === 'select' || interactionMode === 'reposition') {\r\n        if (onNodeClick) onNodeClick(d);\r\n      }\r\n      // In 'connect' mode, clicks are handled by drag start/end or ignored\r\n    }\r\n\r\n    function ticked() {\r\n      linkElements\r\n        .attr('x1', d => d.source.x)\r\n        .attr('y1', d => d.source.y)\r\n        .attr('x2', d => d.target.x)\r\n        .attr('y2', d => d.target.y);\r\n\r\n      nodeElements\r\n        .attr('transform', d => `translate(${d.x},${d.y})`);\r\n    }\r\n\r\n    return () => {\r\n      simulation.stop();\r\n      if (linkingState.current.tempLink) linkingState.current.tempLink.remove();\r\n      linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n    };\r\n  }, [nodes, edges, onNodeClick, onCreateEdge, interactionMode]);\r\n\r\n  // Drag handler factory - defined within Graph component scope, before return\r\n  function dragBehavior(simulation, currentMode, svg, linkingStateRef, onCreateEdgeCallback) {\r\n    function dragstarted(event, d) {\r\n      if (currentMode === 'connect') {\r\n        linkingStateRef.current.isLinking = true;\r\n        linkingStateRef.current.sourceNode = d;\r\n        linkingStateRef.current.tempLink = svg.append('line')\r\n          .attr('class', 'temp-link link')\r\n          .attr('x1', d.x)\r\n          .attr('y1', d.y)\r\n          .attr('x2', d.x)\r\n          .attr('y2', d.y)\r\n          .attr('stroke-dasharray', '5,5')\r\n          .attr('stroke', '#6c757d')\r\n          .attr('stroke-width', 2);\r\n        event.sourceEvent.stopPropagation();\r\n      } else if (currentMode === 'reposition') {\r\n        if (!event.active) simulation.alphaTarget(0.3).restart();\r\n        d.fx = d.x;\r\n        d.fy = d.y;\r\n      }\r\n    }\r\n\r\n    function dragged(event, d) {\r\n      if (currentMode === 'connect' && linkingStateRef.current.isLinking) {\r\n        linkingStateRef.current.tempLink\r\n          .attr('x2', event.x)\r\n          .attr('y2', event.y);\r\n      } else if (currentMode === 'reposition') {\r\n        d.fx = event.x;\r\n        d.fy = event.y;\r\n      }\r\n    }\r\n\r\n    async function dragended(event, d) {\r\n      if (currentMode === 'connect' && linkingStateRef.current.isLinking) {\r\n        if (linkingStateRef.current.tempLink) linkingStateRef.current.tempLink.remove();\r\n\r\n        const targetElement = event.sourceEvent.target;\r\n        let targetNodeElement = targetElement;\r\n        while(targetNodeElement && !d3.select(targetNodeElement).classed('node')) {\r\n          targetNodeElement = targetNodeElement.parentNode;\r\n        }\r\n        const targetDatum = d3.select(targetNodeElement).datum();\r\n\r\n        if (targetDatum && targetDatum._id && linkingStateRef.current.sourceNode && targetDatum._id !== linkingStateRef.current.sourceNode._id) {\r\n          if (onCreateEdgeCallback) {\r\n            onCreateEdgeCallback(linkingStateRef.current.sourceNode._id, targetDatum._id);\r\n          }\r\n        }\r\n        linkingStateRef.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n      } else if (currentMode === 'reposition') {\r\n        if (!event.active) simulation.alphaTarget(0);\r\n\r\n        // Save the node position to the database\r\n        try {\r\n          if (d._id) {\r\n            await api.updateNodePosition(d._id, { x: d.x, y: d.y });\r\n            console.log(`Node position saved: ${d._id} at (${d.x}, ${d.y})`);\r\n          }\r\n        } catch (err) {\r\n          console.error('Failed to save node position:', err);\r\n        }\r\n      }\r\n    }\r\n\r\n    return d3.drag()\r\n        .on('start', dragstarted)\r\n        .on('drag', dragged)\r\n        .on('end', dragended)\r\n        .filter(() => currentMode === 'connect' || currentMode === 'reposition'); // Filter based on currentMode\r\n  }\r\n\r\n  return (\r\n    <div className=\"graph-wrapper\">\r\n      <svg ref={svgRef} width=\"600\" height=\"600\" className=\"graph-svg\" />\r\n      {/* Controls including \"+ New Node\" button are removed from here as per feedback and moved to App.js */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}