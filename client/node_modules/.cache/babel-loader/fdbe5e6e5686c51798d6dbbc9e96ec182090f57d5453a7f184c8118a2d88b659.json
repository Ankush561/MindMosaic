{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Mind Mosaic\\\\client\\\\src\\\\components\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport api from '../services/api.js';\nimport PlusIcon from './icons/PlusIcon';\nimport LinkIcon from './icons/LinkIcon';\nimport TrashIcon from './icons/TrashIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  nodes = [],\n  edges = [],\n  onNodeClick,\n  onNodeDoubleClick,\n  onCreateNew,\n  onCreateEdge,\n  onDeleteEdge,\n  interactionMode = 'select',\n  setInteractionMode,\n  onBackgroundClick,\n  isAnyPanelVisible /*, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete */\n}) => {\n  _s();\n  const svgRef = useRef();\n  const linkingState = useRef({\n    sourceNode: null,\n    tempLink: null,\n    isLinking: false\n  });\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const clickTimeout = useRef(null);\n  const graphDimensionsRef = useRef({\n    width: 800,\n    height: 600\n  }); // Store graph dimensions\n\n  console.log('Graph received:', {\n    nodeCount: nodes.length,\n    edgeCount: edges.length,\n    mode: interactionMode\n  });\n\n  // Debug: Log the actual nodes and edges data\n  console.log('Nodes data:', JSON.stringify(nodes, null, 2));\n  console.log('Edges data:', JSON.stringify(edges, null, 2));\n  const handleMouseMoveLinking = useCallback(event => {\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\n      return;\n    }\n    if (!svgRef.current) return;\n    const [x, y] = d3.pointer(event, svgRef.current);\n    const tempLinkNode = linkingState.current.tempLink.node();\n    if (!tempLinkNode) return;\n    const tagName = tempLinkNode.tagName.toLowerCase();\n    if (tagName === 'line') {\n      linkingState.current.tempLink.attr('x2', x).attr('y2', y);\n    } else if (tagName === 'path') {\n      linkingState.current.tempLink.attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\n    }\n  }, [svgRef, linkingState]);\n  const handleMouseUpLinking = useCallback(event => {\n    console.log('SVG mouseup.linking triggered. Target:', event.target, 'isLinking:', linkingState.current.isLinking);\n    if (linkingState.current.isLinking) {\n      if (!svgRef.current) return;\n      const clickedDomElement = event.target;\n      const closestNodeGroup = clickedDomElement.closest('.node');\n      const isNode = !!closestNodeGroup;\n      console.log('SVG mouseup.linking: Is target related to a node?', isNode, 'Clicked DOM Element:', clickedDomElement, 'Closest Node Group:', closestNodeGroup);\n      if (!isNode) {\n        var _linkingState$current;\n        console.log('SVG mouseup.linking: Target is NOT a node. Cancelling link.');\n        (_linkingState$current = linkingState.current.tempLink) === null || _linkingState$current === void 0 ? void 0 : _linkingState$current.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        setInteractionMode('select');\n      } else {\n        console.log('SVG mouseup.linking: Target IS a node. Deferring to node\\'s click handler for completion.');\n        // If the mouseup is on a node, the `handleNodeClick` for that target node will handle the link completion (if applicable based on drag state).\n        // Or, if it was a drag operation ending on a node, that node's click event (which might be this one)\n        // needs to correctly interpret the state. The dragended + this mouseup should correctly lead to link creation if conditions are met.\n      }\n    }\n  }, [svgRef, linkingState, setInteractionMode, onCreateEdge]); // onCreateEdge might be relevant if we decide to complete link here\n\n  useEffect(() => {\n    const svgInstance = d3.select(svgRef.current);\n    if (interactionMode === 'connect') {\n      const onMouseMoveLinking = handleMouseMoveLinking;\n      const onMouseUpLinking = handleMouseUpLinking;\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\n      console.log('Global linking listeners ADDED to SVG for connect mode.');\n      return () => {\n        svgInstance.on('mousemove.linking', null);\n        svgInstance.on('mouseup.linking', null);\n        console.log('Global linking listeners REMOVED from SVG.');\n      };\n    } else {\n      svgInstance.on('mousemove.linking', null);\n      svgInstance.on('mouseup.linking', null);\n      if (linkingState.current.isLinking) {\n        var _linkingState$current2;\n        console.log('Exited connect mode with active link: Forcibly cleaning up.');\n        (_linkingState$current2 = linkingState.current.tempLink) === null || _linkingState$current2 === void 0 ? void 0 : _linkingState$current2.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return () => {};\n    }\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]);\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n\n    // Diagnostic click on SVG itself\n    svg.on('click.diagnostic', event => {\n      console.log('[SVG DIAGNOSTIC CLICK] SVG itself was clicked. Target:', event.target);\n    });\n    svg.selectAll('*').remove();\n    const currentSvg = svgRef.current;\n    if (!currentSvg) return;\n\n    // 1. Ensure dedicated groups for links and nodes exist\n    let linkGroup = svg.select('g.links-group');\n    if (linkGroup.empty()) {\n      linkGroup = svg.append('g').attr('class', 'links-group');\n    }\n    let nodeGroup = svg.select('g.nodes-group');\n    if (nodeGroup.empty()) {\n      nodeGroup = svg.append('g').attr('class', 'nodes-group');\n    }\n    let localContainerWidth = currentSvg.clientWidth;\n    let localContainerHeight = currentSvg.clientHeight;\n    if (localContainerWidth < 50) localContainerWidth = 50;\n    if (localContainerHeight < 50) localContainerHeight = 50;\n\n    // Update the ref with the actual dimensions\n    graphDimensionsRef.current = {\n      width: localContainerWidth,\n      height: localContainerHeight\n    };\n    const setupBackgroundClickHandler = () => {\n      svg.append('rect').attr('class', 'background').attr('width', '100%').attr('height', '100%').attr('fill', 'transparent').on('click', event => {\n        if (event.target.classList.contains('background')) {\n          d3.selectAll('.link').classed('selected', false);\n          setSelectedEdge(null);\n          if (onBackgroundClick) {\n            onBackgroundClick();\n          }\n        }\n      });\n    };\n    if (!nodes || nodes.length === 0) {\n      setupBackgroundClickHandler();\n      return;\n    }\n    const containerWidth = localContainerWidth;\n    const containerHeight = localContainerHeight;\n    svg.attr('viewBox', [0, 0, containerWidth, containerHeight]).attr('preserveAspectRatio', 'xMidYMid meet');\n    svg.append('rect').attr('class', 'background').attr('width', '100%').attr('height', '100%').attr('fill', 'transparent').on('click', event => {\n      if (event.target.classList.contains('background')) {\n        d3.selectAll('.link').classed('selected', false);\n        setSelectedEdge(null);\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    });\n    svg.append(\"defs\").selectAll(\"marker\").data([\"arrow\"]).enter().append(\"marker\").attr(\"id\", d => d).attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 20).attr(\"refY\", 0).attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#A8C3A4\");\n\n    // Re-adding Node Initialization to prevent clustering\n    nodes.forEach(node => {\n      if (node.position && node.position.x != null && node.position.y != null) {\n        // Node has a defined, valid position\n        node.x = node.position.x;\n        node.y = node.position.y;\n        node.fx = node.position.x; // Fix it at this position\n        node.fy = node.position.y; // Fix it at this position\n      } else {\n        // Node has no predefined position or it's invalid.\n        // Initialize x,y for D3 if not already present.\n        node.x = node.x || Math.random() * (containerWidth - 100) + 50;\n        node.y = node.y || Math.random() * (containerHeight - 100) + 50;\n        // Ensure node.position reflects this initial placement if it was missing/invalid.\n        if (!node.position || node.position.x == null || node.position.y == null) {\n          node.position = {\n            x: node.x,\n            y: node.y\n          };\n        }\n        node.fx = null; // Allow simulation to move it if it had a fixed pos before or is new\n        node.fy = null;\n      }\n    });\n\n    // Create a map of nodes by ID for easy lookup\n    const nodeMap = {};\n    nodes.forEach(node => {\n      nodeMap[node._id] = node;\n    });\n    const processedEdges = edges.map(edge => ({\n      id: edge._id,\n      source: nodeMap[edge.source] || edge.source,\n      target: nodeMap[edge.target] || edge.target,\n      type: edge.type,\n      _id: edge._id\n    }));\n    const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(processedEdges).id(d => d._id).distance(150)).alpha(0).alphaDecay(1).alphaTarget(0);\n\n    // Corrected link element creation using the linkGroup\n    const linkElements = linkGroup.selectAll('path.link').data(processedEdges, d => d.id) // Use edge id as key\n    .join('path').attr('class', 'link').attr('data-id', d => d.id).attr('stroke', '#A8C3A4').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)').on('click', handleEdgeClick);\n    console.log('[D3 Setup] linkElements selection (before attaching click):', linkElements);\n    linkElements.on('click', handleEdgeClick);\n\n    // Node elements joined to the nodeGroup\n    const nodeElements = nodeGroup.selectAll('g.node').data(nodes, d => d._id).join(enter => {\n      const g = enter.append('g').attr('class', 'node').attr('data-id', d => d._id).call(dragBehavior(simulation, svg, containerWidth, containerHeight));\n      g.append('circle').attr('r', 12).attr('fill', '#2E7D32').attr('stroke', '#1B5E20').attr('stroke-width', 1.5).style('pointer-events', 'all');\n      g.append('text').text(d => {\n        var _d$_id;\n        return d.title || ((_d$_id = d._id) === null || _d$_id === void 0 ? void 0 : _d$_id.substring(0, 6));\n      }).attr('x', 16).attr('y', 5).attr('fill', '#FAF3E0').attr('text-anchor', 'start');\n      return g;\n    }, update => update, exit => exit.remove());\n    console.log('[D3 Setup] nodeElements selection (before attaching click to circles):', nodeElements);\n    const circles = nodeElements.select('circle');\n    console.log('[D3 Setup] circles selection (before attaching click):', circles);\n    circles.on('click', handleNodeClick).style('pointer-events', 'all');\n\n    // nodeElements.select('text').on('click', handleNodeClick); // Text has pointer-events: none\n\n    function handleEdgeClick(event, d) {\n      console.log('[Edge Click] Attempted on edge:', d.id, 'Mode:', interactionMode);\n      event.stopPropagation();\n      if (interactionMode === 'select') {\n        d3.selectAll('.link').classed('selected', false);\n        d3.select(event.currentTarget).classed('selected', true);\n        setSelectedEdge(d);\n        if (onNodeClick) {\n          // This onNodeClick(null) is to deselect any selected node\n          console.log(\"handleEdgeClick: Calling onNodeClick(null) to deselect node.\");\n          onNodeClick(null); // Deselects any selected node in App.js\n        } else {\n          console.log(\"handleEdgeClick: onNodeClick prop is undefined (cannot deselect node).\");\n        }\n      } else {\n        console.log(\"handleEdgeClick: Not in 'select' mode. Current mode:\", interactionMode, \"No action taken.\");\n      }\n    }\n    function ticked() {\n      linkElements.attr('d', d => {\n        const sourceX = Math.max(15, Math.min(containerWidth - 15, d.source.x));\n        const sourceY = Math.max(15, Math.min(containerHeight - 15, d.source.y));\n        const targetX = Math.max(15, Math.min(containerWidth - 15, d.target.x));\n        const targetY = Math.max(15, Math.min(containerHeight - 15, d.target.y));\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\n      });\n      nodeElements.attr('transform', d => {\n        const x = Math.max(15, Math.min(containerWidth - 15, d.x));\n        const y = Math.max(15, Math.min(containerHeight - 15, d.y));\n        return `translate(${x},${y})`;\n      });\n    }\n    simulation.on('tick', ticked);\n    return () => {\n      svg.on('click.diagnostic', null); // Cleanup diagnostic listener\n      simulation.stop();\n      if (linkingState.current.tempLink) {\n        linkingState.current.tempLink.remove();\n      }\n      linkingState.current = {\n        sourceNode: null,\n        tempLink: null,\n        isLinking: false\n      };\n      if (clickTimeout.current) {\n        clearTimeout(clickTimeout.current);\n      }\n    };\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, interactionMode, onBackgroundClick, isAnyPanelVisible, handleMouseMoveLinking, handleMouseUpLinking /*, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete */]); // Added new node animation props\n\n  // Handle keyboard delete for selected edges\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n          onDeleteEdge(selectedEdge._id);\n          setSelectedEdge(null);\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedEdge, onDeleteEdge]);\n  function dragBehavior(simulation, svg, containerWidth, containerHeight) {\n    function dragstarted(event, d) {\n      console.log(\"[Drag Start] Mode:\", interactionMode, \"Node:\", d._id);\n      if (interactionMode === 'connect') {\n        if (linkingState.current.tempLink) {\n          linkingState.current.tempLink.remove();\n          linkingState.current.tempLink = null;\n        }\n        linkingState.current.isLinking = true;\n        linkingState.current.sourceNode = d;\n        event.sourceEvent.stopPropagation(); // KEEP for connect mode\n        if (svgRef.current) {\n          linkingState.current.tempLink = d3.select(svgRef.current).append('path').attr('class', 'temp-link').attr('d', `M${d.x},${d.y}L${d.x},${d.y}`).attr('stroke-dasharray', '5,5').attr('stroke', '#B87333').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)').raise();\n        }\n      } else {\n        // 'select' mode (regular node dragging)\n        // event.sourceEvent.stopPropagation(); // CRITICAL: Ensure this is commented out or removed for select mode clicks to work\n        console.log(\"[Drag Start - Select Mode] Active sim:\", event.active);\n        if (!event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\n        d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\n      }\n    }\n    function dragged(event, d) {\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\n        event.sourceEvent.stopPropagation();\n        if (!svgRef.current || !linkingState.current.tempLink) return;\n        const [targetX, targetY] = d3.pointer(event.sourceEvent, svgRef.current);\n        linkingState.current.tempLink.attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${targetX},${targetY}`);\n      } else {\n        event.sourceEvent.stopPropagation();\n        d.fx = Math.max(15, Math.min(containerWidth - 15, event.x));\n        d.fy = Math.max(15, Math.min(containerHeight - 15, event.y));\n        d.position = {\n          x: d.fx,\n          y: d.fy\n        };\n      }\n    }\n    async function dragended(event, d) {\n      console.log(`[Drag End] Node: ${d._id}, dx: ${event.dx}, dy: ${event.dy}, Mode: ${interactionMode}, Active: ${event.active}`);\n      if (!event.active) simulation.alphaTarget(0);\n\n      // Check if this was a click (no significant drag movement)\n      const wasClick = Math.abs(event.dx) < 2 && Math.abs(event.dy) < 2;\n      if (interactionMode === 'connect') {\n        // This block handles ending a connection attempt (drag-based)\n        console.log(\"[Drag End - Connect Mode] isLinking:\", linkingState.current.isLinking);\n        if (linkingState.current.isLinking) {\n          var _linkingState$current3;\n          const [pointerX, pointerY] = d3.pointer(event.sourceEvent, svgRef.current);\n          const releaseTargetElement = document.elementFromPoint(event.sourceEvent.clientX, event.sourceEvent.clientY);\n          const closestNodeGroup = releaseTargetElement ? releaseTargetElement.closest('.node') : null;\n          if (closestNodeGroup) {\n            const targetNodeData = d3.select(closestNodeGroup).datum();\n            if (targetNodeData && linkingState.current.sourceNode && linkingState.current.sourceNode._id !== targetNodeData._id) {\n              console.log(`[Drag End - Connect Mode] Creating edge from ${linkingState.current.sourceNode._id} to ${targetNodeData._id}`);\n              if (onCreateEdge) {\n                onCreateEdge(linkingState.current.sourceNode._id, targetNodeData._id);\n              }\n            } else {\n              console.log(\"[Drag End - Connect Mode] Drag ended on source node or invalid target. Cancelling link.\");\n            }\n          } else {\n            console.log(\"[Drag End - Connect Mode] Drag ended NOT on a node. Cancelling link.\");\n          }\n          (_linkingState$current3 = linkingState.current.tempLink) === null || _linkingState$current3 === void 0 ? void 0 : _linkingState$current3.remove();\n          linkingState.current.isLinking = false;\n          linkingState.current.sourceNode = null;\n          linkingState.current.tempLink = null;\n          setInteractionMode('select');\n        } else if (wasClick) {\n          // A \"click\" (drag with no movement) on a node while in connect mode.\n          // Currently, click-linking is disabled. So, this action effectively does nothing for linking.\n          // We might want to select the node or provide feedback, but handleNodeClick will also fire.\n          console.log(`[Drag End - Connect Mode] Click detected on node ${d._id}. No drag-linking action.`);\n        }\n      } else {\n        // interactionMode === 'select' (or other modes)\n        if (wasClick && !event.defaultPrevented) {\n          // It was a click, and drag didn't prevent default (D3 sometimes does for its own click detection)\n          console.log(`[Drag End - Select Mode] Click detected on node ${d._id}. Calling onNodeClick.`);\n          // This is where we handle a single click on a node in select mode\n          // The double-click logic is still in handleNodeClick\n          // Clear any pending single click from handleNodeClick if it was also triggered\n          if (clickTimeout.current) {\n            clearTimeout(clickTimeout.current);\n            clickTimeout.current = null;\n          }\n          setSelectedEdge(null); // Deselect any selected edge\n          if (onNodeClick) {\n            onNodeClick(d);\n          }\n          // d.fx and d.fy are already set by dragstarted/dragged if it was a drag\n          // If it was just a click, we don't want to fix/unfix it here unless that's desired behavior.\n          // For now, we assume node fixing/unfixing is handled by other interactions (e.g. a separate mechanism or by D3 simulation if fx/fy are null)\n        } else if (!wasClick) {\n          // It was a drag\n          console.log(`[Drag End - Select Mode] Drag finished for node ${d._id}. Updating position.`);\n          d.fx = Math.max(15, Math.min(containerWidth - 15, d.x)); // Ensure fx/fy are set after drag\n          d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\n          d.position = {\n            x: d.fx,\n            y: d.fy\n          };\n          if (api && typeof api.updateNode === 'function') {\n            api.updateNode(d._id, {\n              position: {\n                x: d.fx,\n                y: d.fy\n              }\n            }).catch(err => console.error(\"Failed to update node position:\", err));\n          }\n        } else {\n          console.log(\"[Drag End - Select Mode] Click was defaultPrevented by drag, not calling onNodeClick from here.\");\n        }\n      }\n    }\n    return d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended);\n  }\n  const handleNodeClick = (event, d) => {\n    // This handler now primarily manages double-click, as single click in select mode is handled by dragended.\n    // It can also serve as a fallback or for connect mode clicks if specific behavior is added there later.\n    console.log(`[Node Click Handler] Node: ${d._id}, Mode: ${interactionMode}, DefaultPrevented: ${event.defaultPrevented}`);\n    if (event.defaultPrevented && !(Math.abs(event.dx) < 2 && Math.abs(event.dy) < 2)) {\n      // If default was prevented AND it was an actual drag, return.\n      // Allows \"clicks\" (drag with no movement) to potentially proceed to double-click logic.\n      console.log('[Node Click Handler] DefaultPrevented and was a drag, returning.');\n      return;\n    }\n    if (clickTimeout.current) {\n      // Double-click\n      clearTimeout(clickTimeout.current);\n      clickTimeout.current = null;\n      console.log(`[Node Click Handler] Double-click on node ${d._id}.`);\n      if (onNodeDoubleClick) {\n        onNodeDoubleClick(d);\n      }\n      // If a link was being initiated by click (now disabled), cancel it on double click (though unlikely to reach here in that state)\n      if (linkingState.current.isLinking && linkingState.current.sourceNode) {\n        var _linkingState$current4;\n        (_linkingState$current4 = linkingState.current.tempLink) === null || _linkingState$current4 === void 0 ? void 0 : _linkingState$current4.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return;\n    }\n\n    // For single-click, set a timeout.\n    // If not cleared by a double-click, or by dragended handling a single click, it will execute.\n    // This is more of a fallback now.\n    clickTimeout.current = setTimeout(() => {\n      clickTimeout.current = null;\n      console.log(`[Node Click Handler] Timeout for single click on ${d._id}. Mode: ${interactionMode}.`);\n      if (interactionMode === 'connect') {\n        console.log(`[Node Click Handler - Connect Mode] Single click on node ${d._id}. No action for click-linking.`);\n        // Link creation is handled by dragended.\n        // A single click on a node in connect mode (that isn't part of a drag) currently does nothing.\n      } else {\n        // interactionMode === 'select'\n        // This part is mostly superseded by dragended's click handling for select mode.\n        // It acts as a fallback if dragended didn't process it as a click for some reason.\n        console.log(`[Node Click Handler - Select Mode] Fallback single click for node ${d._id}.`);\n        // setSelectedEdge(null); // Already done by dragended if it was a click\n        // if (onNodeClick) { // Already done by dragended if it was a click\n        //   onNodeClick(d);\n        // }\n      }\n    }, 250); // 250ms delay for double click\n  };\n\n  // Handle edge deletion\n  const handleDeleteEdge = () => {\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n      onDeleteEdge(selectedEdge._id);\n      setSelectedEdge(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-wrapper\",\n    onClick: e => {\n      console.log('[Graph Wrapper Click] Target:', e.target, 'CurrentTarget:', e.currentTarget);\n      if (e.target === e.currentTarget) {\n        console.log('[Graph Wrapper Click] Click was directly on wrapper.');\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    },\n    children: [nodes && nodes.length > 0 ? /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      className: \"graph-svg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-svg empty-graph-placeholder\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-graph-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This canvas is empty. Start by creating a new node!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-controls\",\n      children: [selectedEdge && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteEdge,\n        className: \"button danger\",\n        children: [/*#__PURE__*/_jsxDEV(TrashIcon, {\n          style: {\n            width: '1rem',\n            height: '1rem',\n            marginRight: '0.5rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 13\n        }, this), \"Remove Edge\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            // Pass current dimensions when calling onCreateNew\n            if (onCreateNew) {\n              onCreateNew({\n                graphWidth: graphDimensionsRef.current.width,\n                graphHeight: graphDimensionsRef.current.height\n              });\n            }\n          },\n          className: \"button primary\",\n          children: [/*#__PURE__*/_jsxDEV(PlusIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 582,\n            columnNumber: 13\n          }, this), \"Create New Node\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setInteractionMode(prevMode => prevMode === 'connect' ? 'select' : 'connect'),\n          className: `button accent ${interactionMode === 'connect' ? 'active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(LinkIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 13\n          }, this), interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 541,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"bL1b42P1gKacPw+mGj4AOHQIwrI=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","d3","api","PlusIcon","LinkIcon","TrashIcon","jsxDEV","_jsxDEV","Graph","nodes","edges","onNodeClick","onNodeDoubleClick","onCreateNew","onCreateEdge","onDeleteEdge","interactionMode","setInteractionMode","onBackgroundClick","isAnyPanelVisible","_s","svgRef","linkingState","sourceNode","tempLink","isLinking","selectedEdge","setSelectedEdge","clickTimeout","graphDimensionsRef","width","height","console","log","nodeCount","length","edgeCount","mode","JSON","stringify","handleMouseMoveLinking","event","current","x","y","pointer","tempLinkNode","node","tagName","toLowerCase","attr","handleMouseUpLinking","target","clickedDomElement","closestNodeGroup","closest","isNode","_linkingState$current","remove","svgInstance","select","onMouseMoveLinking","onMouseUpLinking","on","_linkingState$current2","svg","selectAll","currentSvg","linkGroup","empty","append","nodeGroup","localContainerWidth","clientWidth","localContainerHeight","clientHeight","setupBackgroundClickHandler","classList","contains","classed","containerWidth","containerHeight","data","enter","d","forEach","position","fx","fy","Math","random","nodeMap","_id","processedEdges","map","edge","id","source","type","simulation","forceSimulation","force","forceLink","distance","alpha","alphaDecay","alphaTarget","linkElements","join","handleEdgeClick","nodeElements","g","call","dragBehavior","style","text","_d$_id","title","substring","update","exit","circles","handleNodeClick","stopPropagation","currentTarget","ticked","sourceX","max","min","sourceY","targetX","targetY","stop","clearTimeout","handleKeyDown","key","window","addEventListener","removeEventListener","dragstarted","sourceEvent","raise","active","restart","dragged","dragended","dx","dy","wasClick","abs","_linkingState$current3","pointerX","pointerY","releaseTargetElement","document","elementFromPoint","clientX","clientY","targetNodeData","datum","defaultPrevented","updateNode","catch","err","error","drag","_linkingState$current4","setTimeout","handleDeleteEdge","className","onClick","e","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","marginRight","graphWidth","graphHeight","prevMode","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Mind Mosaic/client/src/components/graph.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\r\nimport * as d3 from 'd3';\r\nimport './Graph.css';\r\nimport api from '../services/api.js';\r\nimport PlusIcon from './icons/PlusIcon';\r\nimport LinkIcon from './icons/LinkIcon';\r\nimport TrashIcon from './icons/TrashIcon';\r\n\r\nconst Graph = ({ nodes = [], edges = [], onNodeClick, onNodeDoubleClick, onCreateNew, onCreateEdge, onDeleteEdge, interactionMode = 'select', setInteractionMode, onBackgroundClick, isAnyPanelVisible /*, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete */ }) => {\r\n  const svgRef = useRef();\r\n  const linkingState = useRef({ sourceNode: null, tempLink: null, isLinking: false });\r\n  const [selectedEdge, setSelectedEdge] = useState(null);\r\n  const clickTimeout = useRef(null);\r\n  const graphDimensionsRef = useRef({ width: 800, height: 600 }); // Store graph dimensions\r\n\r\n  console.log('Graph received:', {\r\n    nodeCount: nodes.length,\r\n    edgeCount: edges.length,\r\n    mode: interactionMode\r\n  });\r\n\r\n  // Debug: Log the actual nodes and edges data\r\n  console.log('Nodes data:', JSON.stringify(nodes, null, 2));\r\n  console.log('Edges data:', JSON.stringify(edges, null, 2));\r\n\r\n  const handleMouseMoveLinking = useCallback((event) => { \r\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\r\n        return;\r\n    }\r\n    if (!svgRef.current) return; \r\n    const [x, y] = d3.pointer(event, svgRef.current);\r\n    \r\n    const tempLinkNode = linkingState.current.tempLink.node();\r\n    if (!tempLinkNode) return;\r\n\r\n    const tagName = tempLinkNode.tagName.toLowerCase();\r\n\r\n    if (tagName === 'line') {\r\n        linkingState.current.tempLink.attr('x2', x).attr('y2', y);\r\n    } else if (tagName === 'path') {\r\n        linkingState.current.tempLink\r\n          .attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\r\n    }\r\n  }, [svgRef, linkingState]);\r\n\r\n  const handleMouseUpLinking = useCallback((event) => {\r\n    console.log('SVG mouseup.linking triggered. Target:', event.target, 'isLinking:', linkingState.current.isLinking);\r\n    if (linkingState.current.isLinking) { \r\n      if (!svgRef.current) return; \r\n      \r\n      const clickedDomElement = event.target;\r\n      const closestNodeGroup = clickedDomElement.closest('.node');\r\n      const isNode = !!closestNodeGroup; \r\n      \r\n      console.log('SVG mouseup.linking: Is target related to a node?', isNode, 'Clicked DOM Element:', clickedDomElement, 'Closest Node Group:', closestNodeGroup);\r\n\r\n      if (!isNode) { \r\n        console.log('SVG mouseup.linking: Target is NOT a node. Cancelling link.');\r\n        linkingState.current.tempLink?.remove();\r\n        linkingState.current.isLinking = false;\r\n        linkingState.current.sourceNode = null;\r\n        linkingState.current.tempLink = null;\r\n        setInteractionMode('select'); \r\n      } else {\r\n        console.log('SVG mouseup.linking: Target IS a node. Deferring to node\\'s click handler for completion.');\r\n        // If the mouseup is on a node, the `handleNodeClick` for that target node will handle the link completion (if applicable based on drag state).\r\n        // Or, if it was a drag operation ending on a node, that node's click event (which might be this one)\r\n        // needs to correctly interpret the state. The dragended + this mouseup should correctly lead to link creation if conditions are met.\r\n      }\r\n    }\r\n  }, [svgRef, linkingState, setInteractionMode, onCreateEdge]); // onCreateEdge might be relevant if we decide to complete link here\r\n\r\n  useEffect(() => {\r\n    const svgInstance = d3.select(svgRef.current);\r\n\r\n    if (interactionMode === 'connect') {\r\n      const onMouseMoveLinking = handleMouseMoveLinking;\r\n      const onMouseUpLinking = handleMouseUpLinking;\r\n\r\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\r\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\r\n      console.log('Global linking listeners ADDED to SVG for connect mode.');\r\n\r\n      return () => {\r\n        svgInstance.on('mousemove.linking', null);\r\n        svgInstance.on('mouseup.linking', null);\r\n        console.log('Global linking listeners REMOVED from SVG.');\r\n      };\r\n    } else {\r\n      svgInstance.on('mousemove.linking', null);\r\n      svgInstance.on('mouseup.linking', null);\r\n      \r\n      if (linkingState.current.isLinking) {\r\n        console.log('Exited connect mode with active link: Forcibly cleaning up.');\r\n        linkingState.current.tempLink?.remove();\r\n        linkingState.current.isLinking = false;\r\n        linkingState.current.sourceNode = null;\r\n        linkingState.current.tempLink = null;\r\n      }\r\n      return () => {};\r\n    }\r\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]); \r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n\r\n    // Diagnostic click on SVG itself\r\n    svg.on('click.diagnostic', (event) => {\r\n      console.log('[SVG DIAGNOSTIC CLICK] SVG itself was clicked. Target:', event.target);\r\n    });\r\n\r\n    svg.selectAll('*').remove();\r\n\r\n    const currentSvg = svgRef.current;\r\n    if (!currentSvg) return;\r\n\r\n    // 1. Ensure dedicated groups for links and nodes exist\r\n    let linkGroup = svg.select('g.links-group');\r\n    if (linkGroup.empty()) {\r\n      linkGroup = svg.append('g').attr('class', 'links-group');\r\n    }\r\n    let nodeGroup = svg.select('g.nodes-group');\r\n    if (nodeGroup.empty()) {\r\n      nodeGroup = svg.append('g').attr('class', 'nodes-group');\r\n    }\r\n\r\n    let localContainerWidth = currentSvg.clientWidth;\r\n    let localContainerHeight = currentSvg.clientHeight;\r\n\r\n    if (localContainerWidth < 50) localContainerWidth = 50;\r\n    if (localContainerHeight < 50) localContainerHeight = 50;\r\n\r\n    // Update the ref with the actual dimensions\r\n    graphDimensionsRef.current = { width: localContainerWidth, height: localContainerHeight };\r\n\r\n    const setupBackgroundClickHandler = () => {\r\n      svg.append('rect')\r\n        .attr('class', 'background')\r\n        .attr('width', '100%')\r\n        .attr('height', '100%')\r\n        .attr('fill', 'transparent')\r\n        .on('click', (event) => {\r\n          if (event.target.classList.contains('background')) {\r\n            d3.selectAll('.link').classed('selected', false);\r\n            setSelectedEdge(null);\r\n            if (onBackgroundClick) {\r\n              onBackgroundClick();\r\n            }\r\n          }\r\n        });\r\n    };\r\n\r\n    if (!nodes || nodes.length === 0) {\r\n      setupBackgroundClickHandler(); \r\n      return;\r\n    }\r\n\r\n    const containerWidth = localContainerWidth;\r\n    const containerHeight = localContainerHeight;\r\n\r\n    svg\r\n      .attr('viewBox', [0, 0, containerWidth, containerHeight])\r\n      .attr('preserveAspectRatio', 'xMidYMid meet');\r\n\r\n    svg.append('rect')\r\n      .attr('class', 'background')\r\n      .attr('width', '100%')\r\n      .attr('height', '100%')\r\n      .attr('fill', 'transparent')\r\n      .on('click', (event) => {\r\n        if (event.target.classList.contains('background')) {\r\n          d3.selectAll('.link').classed('selected', false);\r\n          setSelectedEdge(null);\r\n          if (onBackgroundClick) {\r\n            onBackgroundClick();\r\n          }\r\n        }\r\n      });\r\n\r\n    svg.append(\"defs\").selectAll(\"marker\")\r\n      .data([\"arrow\"])\r\n      .enter().append(\"marker\")\r\n      .attr(\"id\", d => d)\r\n      .attr(\"viewBox\", \"0 -5 10 10\")\r\n      .attr(\"refX\", 20) \r\n      .attr(\"refY\", 0)\r\n      .attr(\"markerWidth\", 6)\r\n      .attr(\"markerHeight\", 6)\r\n      .attr(\"orient\", \"auto\")\r\n      .append(\"path\")\r\n      .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n      .attr(\"fill\", \"#A8C3A4\"); \r\n\r\n    // Re-adding Node Initialization to prevent clustering\r\n    nodes.forEach(node => {\r\n      if (node.position && node.position.x != null && node.position.y != null) {\r\n        // Node has a defined, valid position\r\n        node.x = node.position.x;\r\n        node.y = node.position.y;\r\n        node.fx = node.position.x; // Fix it at this position\r\n        node.fy = node.position.y; // Fix it at this position\r\n      } else {\r\n        // Node has no predefined position or it's invalid.\r\n        // Initialize x,y for D3 if not already present.\r\n        node.x = node.x || (Math.random() * (containerWidth - 100) + 50);\r\n        node.y = node.y || (Math.random() * (containerHeight - 100) + 50);\r\n        // Ensure node.position reflects this initial placement if it was missing/invalid.\r\n        if (!node.position || node.position.x == null || node.position.y == null) {\r\n            node.position = { x: node.x, y: node.y }; \r\n        }\r\n        node.fx = null; // Allow simulation to move it if it had a fixed pos before or is new\r\n        node.fy = null;\r\n      }\r\n    });\r\n\r\n    // Create a map of nodes by ID for easy lookup\r\n    const nodeMap = {};\r\n    nodes.forEach(node => {\r\n      nodeMap[node._id] = node;\r\n    });\r\n\r\n    const processedEdges = edges.map(edge => ({\r\n      id: edge._id,\r\n      source: nodeMap[edge.source] || edge.source,\r\n      target: nodeMap[edge.target] || edge.target,\r\n      type: edge.type,\r\n      _id: edge._id\r\n    }));\r\n\r\n    const simulation = d3.forceSimulation(nodes)\r\n      .force('link', d3.forceLink(processedEdges).id(d => d._id).distance(150))\r\n      .alpha(0)\r\n      .alphaDecay(1)\r\n      .alphaTarget(0);\r\n\r\n    // Corrected link element creation using the linkGroup\r\n    const linkElements = linkGroup.selectAll('path.link')\r\n        .data(processedEdges, d => d.id) // Use edge id as key\r\n        .join('path')\r\n        .attr('class', 'link')\r\n        .attr('data-id', d => d.id)\r\n        .attr('stroke', '#A8C3A4')\r\n        .attr('stroke-width', 2)\r\n        .attr('fill', 'none')\r\n        .attr('marker-end', 'url(#arrow)')\r\n        .on('click', handleEdgeClick);\r\n\r\n    console.log('[D3 Setup] linkElements selection (before attaching click):', linkElements);\r\n    linkElements.on('click', handleEdgeClick);\r\n\r\n    // Node elements joined to the nodeGroup\r\n    const nodeElements = nodeGroup.selectAll('g.node') \r\n      .data(nodes, d => d._id) \r\n      .join(\r\n        enter => {\r\n          const g = enter.append('g')\r\n            .attr('class', 'node')\r\n            .attr('data-id', d => d._id)\r\n            .call(dragBehavior(simulation, svg, containerWidth, containerHeight));\r\n\r\n          g.append('circle')\r\n            .attr('r', 12)\r\n            .attr('fill', '#2E7D32')\r\n            .attr('stroke', '#1B5E20')\r\n            .attr('stroke-width', 1.5)\r\n            .style('pointer-events', 'all');\r\n\r\n          g.append('text')\r\n            .text(d => d.title || d._id?.substring(0, 6))\r\n            .attr('x', 16)\r\n            .attr('y', 5)\r\n            .attr('fill', '#FAF3E0')\r\n            .attr('text-anchor', 'start');\r\n          \r\n          return g;\r\n        },\r\n        update => update, \r\n        exit => exit.remove()\r\n      );\r\n    \r\n    console.log('[D3 Setup] nodeElements selection (before attaching click to circles):', nodeElements);\r\n    const circles = nodeElements.select('circle');\r\n    console.log('[D3 Setup] circles selection (before attaching click):', circles);\r\n    circles.on('click', handleNodeClick)\r\n           .style('pointer-events', 'all');\r\n\r\n    // nodeElements.select('text').on('click', handleNodeClick); // Text has pointer-events: none\r\n\r\n    function handleEdgeClick(event, d) {\r\n      console.log('[Edge Click] Attempted on edge:', d.id, 'Mode:', interactionMode);\r\n      event.stopPropagation();\r\n      if (interactionMode === 'select') {\r\n        d3.selectAll('.link').classed('selected', false);\r\n        d3.select(event.currentTarget).classed('selected', true);\r\n        setSelectedEdge(d);\r\n        if (onNodeClick) { // This onNodeClick(null) is to deselect any selected node\r\n            console.log(\"handleEdgeClick: Calling onNodeClick(null) to deselect node.\");\r\n            onNodeClick(null); // Deselects any selected node in App.js\r\n        } else {\r\n            console.log(\"handleEdgeClick: onNodeClick prop is undefined (cannot deselect node).\");\r\n        }\r\n      } else {\r\n        console.log(\"handleEdgeClick: Not in 'select' mode. Current mode:\", interactionMode, \"No action taken.\");\r\n      }\r\n    }\r\n\r\n    function ticked() {\r\n      linkElements.attr('d', d => {\r\n        const sourceX = Math.max(15, Math.min(containerWidth - 15, d.source.x));\r\n        const sourceY = Math.max(15, Math.min(containerHeight - 15, d.source.y));\r\n        const targetX = Math.max(15, Math.min(containerWidth - 15, d.target.x));\r\n        const targetY = Math.max(15, Math.min(containerHeight - 15, d.target.y));\r\n        \r\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\r\n      });\r\n\r\n      nodeElements.attr('transform', d => {\r\n        const x = Math.max(15, Math.min(containerWidth - 15, d.x));\r\n        const y = Math.max(15, Math.min(containerHeight - 15, d.y));\r\n        return `translate(${x},${y})`;\r\n      });\r\n    }\r\n\r\n    simulation.on('tick', ticked);\r\n    \r\n    return () => {\r\n      svg.on('click.diagnostic', null); // Cleanup diagnostic listener\r\n      simulation.stop();\r\n      if (linkingState.current.tempLink) {\r\n        linkingState.current.tempLink.remove();\r\n      }\r\n      linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n      if (clickTimeout.current) {\r\n        clearTimeout(clickTimeout.current);\r\n      }\r\n    };\r\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, interactionMode, onBackgroundClick, isAnyPanelVisible, handleMouseMoveLinking, handleMouseUpLinking /*, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete */]); // Added new node animation props\r\n\r\n  // Handle keyboard delete for selected edges\r\n  useEffect(() => {\r\n    const handleKeyDown = (event) => {\r\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\r\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\r\n          onDeleteEdge(selectedEdge._id);\r\n          setSelectedEdge(null); \r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [selectedEdge, onDeleteEdge]);\r\n\r\n  function dragBehavior(simulation, svg, containerWidth, containerHeight) {\r\n    function dragstarted(event, d) {\r\n      console.log(\"[Drag Start] Mode:\", interactionMode, \"Node:\", d._id);\r\n      if (interactionMode === 'connect') {\r\n        if (linkingState.current.tempLink) {\r\n            linkingState.current.tempLink.remove();\r\n            linkingState.current.tempLink = null;\r\n        }\r\n\r\n        linkingState.current.isLinking = true;\r\n        linkingState.current.sourceNode = d;\r\n        event.sourceEvent.stopPropagation(); // KEEP for connect mode\r\n        if (svgRef.current) {\r\n            linkingState.current.tempLink = d3.select(svgRef.current).append('path')\r\n              .attr('class', 'temp-link')\r\n              .attr('d', `M${d.x},${d.y}L${d.x},${d.y}`)\r\n              .attr('stroke-dasharray', '5,5')\r\n              .attr('stroke', '#B87333') \r\n              .attr('stroke-width', 2)\r\n              .attr('fill', 'none')\r\n              .attr('marker-end', 'url(#arrow)')\r\n              .raise();\r\n        }\r\n      } else { // 'select' mode (regular node dragging)\r\n        // event.sourceEvent.stopPropagation(); // CRITICAL: Ensure this is commented out or removed for select mode clicks to work\r\n        console.log(\"[Drag Start - Select Mode] Active sim:\", event.active);\r\n        if (!event.active) simulation.alphaTarget(0.3).restart();\r\n        d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\r\n        d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\r\n      }\r\n    }\r\n\r\n    function dragged(event, d) {\r\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\r\n        event.sourceEvent.stopPropagation();\r\n        if (!svgRef.current || !linkingState.current.tempLink) return; \r\n        const [targetX, targetY] = d3.pointer(event.sourceEvent, svgRef.current); \r\n        linkingState.current.tempLink\r\n          .attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${targetX},${targetY}`);\r\n      } else {\r\n        event.sourceEvent.stopPropagation();\r\n        d.fx = Math.max(15, Math.min(containerWidth - 15, event.x));\r\n        d.fy = Math.max(15, Math.min(containerHeight - 15, event.y));\r\n        d.position = { x: d.fx, y: d.fy };\r\n      }\r\n    }\r\n\r\n    async function dragended(event, d) {\r\n      console.log(`[Drag End] Node: ${d._id}, dx: ${event.dx}, dy: ${event.dy}, Mode: ${interactionMode}, Active: ${event.active}`);\r\n      if (!event.active) simulation.alphaTarget(0);\r\n\r\n      // Check if this was a click (no significant drag movement)\r\n      const wasClick = Math.abs(event.dx) < 2 && Math.abs(event.dy) < 2;\r\n\r\n      if (interactionMode === 'connect') {\r\n        // This block handles ending a connection attempt (drag-based)\r\n        console.log(\"[Drag End - Connect Mode] isLinking:\", linkingState.current.isLinking);\r\n        if (linkingState.current.isLinking) {\r\n          const [pointerX, pointerY] = d3.pointer(event.sourceEvent, svgRef.current);\r\n          const releaseTargetElement = document.elementFromPoint(event.sourceEvent.clientX, event.sourceEvent.clientY);\r\n          const closestNodeGroup = releaseTargetElement ? releaseTargetElement.closest('.node') : null;\r\n\r\n          if (closestNodeGroup) {\r\n            const targetNodeData = d3.select(closestNodeGroup).datum();\r\n            if (targetNodeData && linkingState.current.sourceNode && linkingState.current.sourceNode._id !== targetNodeData._id) {\r\n              console.log(`[Drag End - Connect Mode] Creating edge from ${linkingState.current.sourceNode._id} to ${targetNodeData._id}`);\r\n              if (onCreateEdge) {\r\n                onCreateEdge(linkingState.current.sourceNode._id, targetNodeData._id);\r\n              }\r\n            } else {\r\n              console.log(\"[Drag End - Connect Mode] Drag ended on source node or invalid target. Cancelling link.\");\r\n            }\r\n          } else {\r\n            console.log(\"[Drag End - Connect Mode] Drag ended NOT on a node. Cancelling link.\");\r\n          }\r\n          linkingState.current.tempLink?.remove();\r\n          linkingState.current.isLinking = false;\r\n          linkingState.current.sourceNode = null;\r\n          linkingState.current.tempLink = null;\r\n          setInteractionMode('select');\r\n        } else if (wasClick) {\r\n          // A \"click\" (drag with no movement) on a node while in connect mode.\r\n          // Currently, click-linking is disabled. So, this action effectively does nothing for linking.\r\n          // We might want to select the node or provide feedback, but handleNodeClick will also fire.\r\n          console.log(`[Drag End - Connect Mode] Click detected on node ${d._id}. No drag-linking action.`);\r\n        }\r\n      } else { // interactionMode === 'select' (or other modes)\r\n        if (wasClick && !event.defaultPrevented) { // It was a click, and drag didn't prevent default (D3 sometimes does for its own click detection)\r\n          console.log(`[Drag End - Select Mode] Click detected on node ${d._id}. Calling onNodeClick.`);\r\n          // This is where we handle a single click on a node in select mode\r\n          // The double-click logic is still in handleNodeClick\r\n          // Clear any pending single click from handleNodeClick if it was also triggered\r\n          if (clickTimeout.current) {\r\n            clearTimeout(clickTimeout.current);\r\n            clickTimeout.current = null;\r\n          }\r\n          setSelectedEdge(null); // Deselect any selected edge\r\n          if (onNodeClick) {\r\n            onNodeClick(d);\r\n          }\r\n          // d.fx and d.fy are already set by dragstarted/dragged if it was a drag\r\n          // If it was just a click, we don't want to fix/unfix it here unless that's desired behavior.\r\n          // For now, we assume node fixing/unfixing is handled by other interactions (e.g. a separate mechanism or by D3 simulation if fx/fy are null)\r\n        } else if (!wasClick) { // It was a drag\r\n          console.log(`[Drag End - Select Mode] Drag finished for node ${d._id}. Updating position.`);\r\n          d.fx = Math.max(15, Math.min(containerWidth - 15, d.x)); // Ensure fx/fy are set after drag\r\n          d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\r\n          d.position = { x: d.fx, y: d.fy };\r\n          if (api && typeof api.updateNode === 'function') {\r\n            api.updateNode(d._id, { position: { x: d.fx, y: d.fy } })\r\n              .catch(err => console.error(\"Failed to update node position:\", err));\r\n          }\r\n        } else {\r\n            console.log(\"[Drag End - Select Mode] Click was defaultPrevented by drag, not calling onNodeClick from here.\");\r\n        }\r\n      }\r\n    }\r\n\r\n    return d3.drag()\r\n      .on('start', dragstarted)\r\n      .on('drag', dragged)\r\n      .on('end', dragended);\r\n  }\r\n\r\n  const handleNodeClick = (event, d) => {\r\n    // This handler now primarily manages double-click, as single click in select mode is handled by dragended.\r\n    // It can also serve as a fallback or for connect mode clicks if specific behavior is added there later.\r\n    console.log(`[Node Click Handler] Node: ${d._id}, Mode: ${interactionMode}, DefaultPrevented: ${event.defaultPrevented}`);\r\n\r\n    if (event.defaultPrevented && !(Math.abs(event.dx) < 2 && Math.abs(event.dy) < 2) ) { \r\n      // If default was prevented AND it was an actual drag, return.\r\n      // Allows \"clicks\" (drag with no movement) to potentially proceed to double-click logic.\r\n      console.log('[Node Click Handler] DefaultPrevented and was a drag, returning.');\r\n      return;\r\n    }\r\n\r\n    if (clickTimeout.current) { // Double-click\r\n      clearTimeout(clickTimeout.current);\r\n      clickTimeout.current = null;\r\n      console.log(`[Node Click Handler] Double-click on node ${d._id}.`);\r\n      if (onNodeDoubleClick) {\r\n        onNodeDoubleClick(d);\r\n      }\r\n      // If a link was being initiated by click (now disabled), cancel it on double click (though unlikely to reach here in that state)\r\n      if (linkingState.current.isLinking && linkingState.current.sourceNode) {\r\n        linkingState.current.tempLink?.remove();\r\n        linkingState.current.isLinking = false;\r\n        linkingState.current.sourceNode = null;\r\n        linkingState.current.tempLink = null;\r\n      }\r\n      return;\r\n    }\r\n\r\n    // For single-click, set a timeout.\r\n    // If not cleared by a double-click, or by dragended handling a single click, it will execute.\r\n    // This is more of a fallback now.\r\n    clickTimeout.current = setTimeout(() => {\r\n      clickTimeout.current = null;\r\n      console.log(`[Node Click Handler] Timeout for single click on ${d._id}. Mode: ${interactionMode}.`);\r\n      \r\n      if (interactionMode === 'connect') {\r\n        console.log(`[Node Click Handler - Connect Mode] Single click on node ${d._id}. No action for click-linking.`);\r\n        // Link creation is handled by dragended.\r\n        // A single click on a node in connect mode (that isn't part of a drag) currently does nothing.\r\n      } else { // interactionMode === 'select'\r\n        // This part is mostly superseded by dragended's click handling for select mode.\r\n        // It acts as a fallback if dragended didn't process it as a click for some reason.\r\n        console.log(`[Node Click Handler - Select Mode] Fallback single click for node ${d._id}.`);\r\n        // setSelectedEdge(null); // Already done by dragended if it was a click\r\n        // if (onNodeClick) { // Already done by dragended if it was a click\r\n        //   onNodeClick(d);\r\n        // }\r\n      }\r\n    }, 250); // 250ms delay for double click\r\n  };\r\n\r\n  // Handle edge deletion\r\n  const handleDeleteEdge = () => {\r\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\r\n      onDeleteEdge(selectedEdge._id);\r\n      setSelectedEdge(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-wrapper\" onClick={(e) => {\r\n      console.log('[Graph Wrapper Click] Target:', e.target, 'CurrentTarget:', e.currentTarget);\r\n      if (e.target === e.currentTarget) {\r\n        console.log('[Graph Wrapper Click] Click was directly on wrapper.');\r\n        if (onBackgroundClick) {\r\n          onBackgroundClick();\r\n        }\r\n      }\r\n    }}>\r\n      {nodes && nodes.length > 0 ? (\r\n        <svg ref={svgRef} className=\"graph-svg\" />\r\n      ) : (\r\n        <div className=\"graph-svg empty-graph-placeholder\">\r\n          <div className=\"empty-graph-message\">\r\n            <p>This canvas is empty. Start by creating a new node!</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className=\"graph-controls\">\r\n        {selectedEdge && (\r\n          <button\r\n            onClick={handleDeleteEdge}\r\n            className=\"button danger\"\r\n          >\r\n            <TrashIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            Remove Edge\r\n          </button>\r\n        )}\r\n        <div className=\"button-row\">\r\n          <button \r\n            onClick={() => {\r\n              // Pass current dimensions when calling onCreateNew\r\n              if (onCreateNew) {\r\n                onCreateNew({ \r\n                  graphWidth: graphDimensionsRef.current.width, \r\n                  graphHeight: graphDimensionsRef.current.height \r\n                });\r\n              }\r\n            }}\r\n            className=\"button primary\"\r\n          >\r\n            <PlusIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            Create New Node\r\n          </button>\r\n          <button\r\n            onClick={() => setInteractionMode(prevMode => prevMode === 'connect' ? 'select' : 'connect')}\r\n            className={`button accent ${interactionMode === 'connect' ? 'active' : ''}`}\r\n          >\r\n            <LinkIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            {interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}