{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Project\\\\client\\\\src\\\\components\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  nodes = [],\n  edges = [],\n  onNodeClick,\n  onCreateNew,\n  onCreateEdge,\n  interactionMode = 'select'\n}) => {\n  _s();\n  const svgRef = useRef();\n  const selectedForConnection = useRef(null);\n  console.log('Graph received:', {\n    nodeCount: nodes.length,\n    edgeCount: edges.length,\n    mode: interactionMode\n  });\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove(); // Clear previous elements\n\n    if (!nodes || nodes.length === 0) {\n      return;\n    }\n    const width = svgRef.current.clientWidth;\n    const height = svgRef.current.clientHeight;\n\n    // Create a force simulation\n    const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(edges).id(d => d.id).distance(100)).force('charge', d3.forceManyBody().strength(-200)) // Slightly stronger charge\n    .force('center', d3.forceCenter(width / 2, height / 2)).on('tick', ticked);\n\n    // Draw edges\n    const linkElements = svg.append('g').attr('class', 'links').selectAll('line').data(edges).enter().append('line').attr('class', 'link');\n\n    // Draw nodes\n    const nodeElements = svg.append('g').attr('class', 'nodes').selectAll('g').data(nodes).enter().append('g').attr('class', 'node').call(drag(simulation, interactionMode)); // Apply drag conditionally\n\n    nodeElements.append('circle').attr('r', 10).on('click', handleNodeClick);\n    nodeElements.append('text').text(d => d.title || d.id.substring(0, 6)) // Show part of ID if no title\n    .attr('x', 15).attr('y', 5);\n\n    // SVG click to deselect in connect mode\n    svg.on('click', event => {\n      if (interactionMode === 'connect' && selectedForConnection.current) {\n        if (event.target === svgRef.current) {\n          // Clicked on SVG background\n          clearConnectionSelection();\n        }\n      }\n    });\n    function clearConnectionSelection() {\n      if (selectedForConnection.current) {\n        d3.selectAll('.node.selected-for-connection').classed('selected-for-connection', false);\n        selectedForConnection.current = null;\n      }\n    }\n    function handleNodeClick(event, d) {\n      event.stopPropagation(); // Important to prevent SVG click handler if node is clicked\n\n      if (interactionMode === 'connect') {\n        if (!selectedForConnection.current) {\n          // First node selected for connection\n          selectedForConnection.current = d;\n          d3.select(this).classed('selected-for-connection', true);\n        } else {\n          // Second node selected\n          if (selectedForConnection.current.id !== d.id) {\n            if (onCreateEdge) {\n              onCreateEdge(selectedForConnection.current.id, d.id);\n            }\n          }\n          // Always clear selection after second click (or same node click)\n          clearConnectionSelection();\n        }\n      } else if (interactionMode === 'select' || interactionMode === 'reposition') {\n        // Default behavior: open editor or other actions\n        if (onNodeClick) onNodeClick(d);\n      }\n    }\n    function ticked() {\n      linkElements.attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n      nodeElements.attr('transform', d => `translate(${d.x},${d.y})`);\n    }\n    return () => {\n      simulation.stop();\n      clearConnectionSelection();\n    };\n  }, [nodes, edges, onNodeClick, onCreateEdge, interactionMode]); // Add interactionMode to dependencies\n\n  // Drag handler factory\n  function drag(simulation, currentMode) {\n    function dragstarted(event, d) {\n      if (currentMode !== 'reposition') return; // Only drag in reposition mode\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n    function dragged(event, d) {\n      if (currentMode !== 'reposition') return; // Only drag in reposition mode\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n    function dragended(event, d) {\n      if (currentMode !== 'reposition') return; // Only drag in reposition mode\n      if (!event.active) simulation.alphaTarget(0);\n      // d.fx and d.fy are kept to fix the position.\n      // To unfix after drag, set them to null:\n      // d.fx = null;\n      // d.fy = null;\n    }\n    return d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: \"600\",\n      height: \"600\",\n      className: \"graph-svg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"create-btn\",\n      onClick: onCreateNew,\n      children: \"+ New Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"W3J3lIYAsVB25fCrPzQSkX9ufGg=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useEffect","d3","jsxDEV","_jsxDEV","Graph","nodes","edges","onNodeClick","onCreateNew","onCreateEdge","interactionMode","_s","svgRef","selectedForConnection","console","log","nodeCount","length","edgeCount","mode","svg","select","current","selectAll","remove","width","clientWidth","height","clientHeight","simulation","forceSimulation","force","forceLink","id","d","distance","forceManyBody","strength","forceCenter","on","ticked","linkElements","append","attr","data","enter","nodeElements","call","drag","handleNodeClick","text","title","substring","event","target","clearConnectionSelection","classed","stopPropagation","source","x","y","stop","currentMode","dragstarted","active","alphaTarget","restart","fx","fy","dragged","dragended","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Project/client/src/components/graph.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\nimport './Graph.css';\r\n\r\nconst Graph = ({ nodes = [], edges = [], onNodeClick, onCreateNew, onCreateEdge, interactionMode = 'select' }) => {\r\n  const svgRef = useRef();\r\n  const selectedForConnection = useRef(null);\r\n\r\n  console.log('Graph received:', {\r\n    nodeCount: nodes.length,\r\n    edgeCount: edges.length,\r\n    mode: interactionMode\r\n  });\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll('*').remove(); // Clear previous elements\r\n\r\n    if (!nodes || nodes.length === 0) {\r\n      return;\r\n    }\r\n    \r\n    const width = svgRef.current.clientWidth;\r\n    const height = svgRef.current.clientHeight;\r\n\r\n    // Create a force simulation\r\n    const simulation = d3.forceSimulation(nodes)\r\n      .force('link', d3.forceLink(edges).id(d => d.id).distance(100))\r\n      .force('charge', d3.forceManyBody().strength(-200)) // Slightly stronger charge\r\n      .force('center', d3.forceCenter(width / 2, height / 2))\r\n      .on('tick', ticked);\r\n\r\n    // Draw edges\r\n    const linkElements = svg.append('g')\r\n      .attr('class', 'links')\r\n      .selectAll('line')\r\n      .data(edges)\r\n      .enter().append('line')\r\n      .attr('class', 'link');\r\n\r\n    // Draw nodes\r\n    const nodeElements = svg.append('g')\r\n      .attr('class', 'nodes')\r\n      .selectAll('g')\r\n      .data(nodes)\r\n      .enter().append('g')\r\n      .attr('class', 'node')\r\n      .call(drag(simulation, interactionMode)); // Apply drag conditionally\r\n\r\n    nodeElements.append('circle')\r\n      .attr('r', 10)\r\n      .on('click', handleNodeClick);\r\n    \r\n    nodeElements.append('text')\r\n      .text(d => d.title || d.id.substring(0, 6)) // Show part of ID if no title\r\n      .attr('x', 15)\r\n      .attr('y', 5);\r\n\r\n    // SVG click to deselect in connect mode\r\n    svg.on('click', (event) => {\r\n      if (interactionMode === 'connect' && selectedForConnection.current) {\r\n        if (event.target === svgRef.current) { // Clicked on SVG background\r\n          clearConnectionSelection();\r\n        }\r\n      }\r\n    });\r\n\r\n    function clearConnectionSelection() {\r\n      if (selectedForConnection.current) {\r\n        d3.selectAll('.node.selected-for-connection').classed('selected-for-connection', false);\r\n        selectedForConnection.current = null;\r\n      }\r\n    }\r\n\r\n    function handleNodeClick(event, d) {\r\n      event.stopPropagation(); // Important to prevent SVG click handler if node is clicked\r\n\r\n      if (interactionMode === 'connect') {\r\n        if (!selectedForConnection.current) {\r\n          // First node selected for connection\r\n          selectedForConnection.current = d;\r\n          d3.select(this).classed('selected-for-connection', true);\r\n        } else {\r\n          // Second node selected\r\n          if (selectedForConnection.current.id !== d.id) {\r\n            if (onCreateEdge) {\r\n              onCreateEdge(selectedForConnection.current.id, d.id);\r\n            }\r\n          }\r\n          // Always clear selection after second click (or same node click)\r\n          clearConnectionSelection();\r\n        }\r\n      } else if (interactionMode === 'select' || interactionMode === 'reposition') {\r\n        // Default behavior: open editor or other actions\r\n        if (onNodeClick) onNodeClick(d);\r\n      }\r\n    }\r\n\r\n    function ticked() {\r\n      linkElements\r\n        .attr('x1', d => d.source.x)\r\n        .attr('y1', d => d.source.y)\r\n        .attr('x2', d => d.target.x)\r\n        .attr('y2', d => d.target.y);\r\n\r\n      nodeElements\r\n        .attr('transform', d => `translate(${d.x},${d.y})`);\r\n    }\r\n\r\n    return () => {\r\n      simulation.stop();\r\n      clearConnectionSelection();\r\n    };\r\n  }, [nodes, edges, onNodeClick, onCreateEdge, interactionMode]); // Add interactionMode to dependencies\r\n\r\n  // Drag handler factory\r\n  function drag(simulation, currentMode) {\r\n    function dragstarted(event, d) {\r\n      if (currentMode !== 'reposition') return; // Only drag in reposition mode\r\n      if (!event.active) simulation.alphaTarget(0.3).restart();\r\n      d.fx = d.x;\r\n      d.fy = d.y;\r\n    }\r\n    \r\n    function dragged(event, d) {\r\n      if (currentMode !== 'reposition') return; // Only drag in reposition mode\r\n      d.fx = event.x;\r\n      d.fy = event.y;\r\n    }\r\n    \r\n    function dragended(event, d) {\r\n      if (currentMode !== 'reposition') return; // Only drag in reposition mode\r\n      if (!event.active) simulation.alphaTarget(0);\r\n      // d.fx and d.fy are kept to fix the position.\r\n      // To unfix after drag, set them to null:\r\n      // d.fx = null;\r\n      // d.fy = null;\r\n    }\r\n    \r\n    return d3.drag()\r\n        .on('start', dragstarted)\r\n        .on('drag', dragged)\r\n        .on('end', dragended);\r\n  }\r\n\r\n  return (\r\n    <div className=\"graph-wrapper\">\r\n      <svg ref={svgRef} width=\"600\" height=\"600\" className=\"graph-svg\" />\r\n      <button className=\"create-btn\" onClick={onCreateNew}>\r\n        + New Node\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}