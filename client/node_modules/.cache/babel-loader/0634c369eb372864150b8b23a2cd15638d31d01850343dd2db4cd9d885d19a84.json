{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Mind Mosaic\\\\client\\\\src\\\\components\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport api from '../services/api.js';\nimport PlusIcon from './icons/PlusIcon';\nimport LinkIcon from './icons/LinkIcon';\nimport TrashIcon from './icons/TrashIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  nodes = [],\n  edges = [],\n  onNodeClick,\n  onNodeDoubleClick,\n  onCreateNew,\n  onCreateEdge,\n  onDeleteEdge,\n  interactionMode = 'select',\n  setInteractionMode,\n  onBackgroundClick,\n  isAnyPanelVisible\n}) => {\n  _s();\n  const svgRef = useRef();\n  const linkingState = useRef({\n    sourceNode: null,\n    tempLink: null,\n    isLinking: false\n  });\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const clickTimeout = useRef(null);\n  console.log('Graph received:', {\n    nodeCount: nodes.length,\n    edgeCount: edges.length,\n    mode: interactionMode\n  });\n\n  // Debug: Log the actual nodes and edges data\n  console.log('Nodes data:', JSON.stringify(nodes, null, 2));\n  console.log('Edges data:', JSON.stringify(edges, null, 2));\n  const handleMouseMoveLinking = useCallback(event => {\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\n      return;\n    }\n    if (!svgRef.current) return;\n    const [x, y] = d3.pointer(event, svgRef.current);\n    const tempLinkNode = linkingState.current.tempLink.node();\n    if (!tempLinkNode) return;\n    const tagName = tempLinkNode.tagName.toLowerCase();\n    if (tagName === 'line') {\n      linkingState.current.tempLink.attr('x2', x).attr('y2', y);\n    } else if (tagName === 'path') {\n      linkingState.current.tempLink.attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\n    }\n  }, [svgRef, linkingState]);\n  const handleMouseUpLinking = useCallback(event => {\n    console.log('SVG mouseup.linking triggered. Target:', event.target, 'isLinking:', linkingState.current.isLinking);\n    if (linkingState.current.isLinking) {\n      var _targetElement$select;\n      if (!svgRef.current) return;\n      const targetElement = d3.select(event.target);\n      const nodeElement = targetElement.classed('node') ? targetElement.node() : (_targetElement$select = targetElement.selectClosest('.node')) === null || _targetElement$select === void 0 ? void 0 : _targetElement$select.node();\n      const isNode = !!nodeElement;\n      console.log('SVG mouseup.linking: Is target related to a node?', isNode);\n      if (!isNode) {\n        var _linkingState$current;\n        console.log('SVG mouseup.linking: Target is NOT a node. Cancelling link.');\n        (_linkingState$current = linkingState.current.tempLink) === null || _linkingState$current === void 0 ? void 0 : _linkingState$current.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        setInteractionMode('select');\n      } else {\n        console.log('SVG mouseup.linking: Target IS a node. Deferring to node\\'s click handler for completion.');\n      }\n    }\n  }, [svgRef, linkingState, setInteractionMode, onCreateEdge]);\n  useEffect(() => {\n    const svgInstance = d3.select(svgRef.current);\n    if (interactionMode === 'connect') {\n      const onMouseMoveLinking = handleMouseMoveLinking;\n      const onMouseUpLinking = handleMouseUpLinking;\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\n      console.log('Global linking listeners ADDED to SVG for connect mode.');\n      return () => {\n        svgInstance.on('mousemove.linking', null);\n        svgInstance.on('mouseup.linking', null);\n        console.log('Global linking listeners REMOVED from SVG.');\n      };\n    } else {\n      svgInstance.on('mousemove.linking', null);\n      svgInstance.on('mouseup.linking', null);\n      if (linkingState.current.isLinking) {\n        var _linkingState$current2;\n        console.log('Exited connect mode with active link: Forcibly cleaning up.');\n        (_linkingState$current2 = linkingState.current.tempLink) === null || _linkingState$current2 === void 0 ? void 0 : _linkingState$current2.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return () => {};\n    }\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]);\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n    const currentSvg = svgRef.current;\n    if (!currentSvg) return;\n    let localContainerWidth = currentSvg.clientWidth;\n    let localContainerHeight = currentSvg.clientHeight;\n\n    // Guard against zero or very small dimensions\n    if (localContainerWidth < 50) localContainerWidth = 50;\n    if (localContainerHeight < 50) localContainerHeight = 50;\n    const setupBackgroundClickHandler = () => {\n      svg.append('rect').attr('class', 'background').attr('width', '100%').attr('height', '100%').attr('fill', 'transparent').on('click', event => {\n        if (event.target.classList.contains('background')) {\n          d3.selectAll('.link').classed('selected', false);\n          setSelectedEdge(null);\n          if (onBackgroundClick) {\n            onBackgroundClick();\n          }\n        }\n      });\n    };\n    if (!nodes || nodes.length === 0) {\n      setupBackgroundClickHandler(); // Ensure background click is available for empty graph\n      // Render empty state message (already handled by App.js or Graph.css)\n      return;\n    }\n\n    // Use the guarded dimensions from now on\n    const containerWidth = localContainerWidth;\n    const containerHeight = localContainerHeight;\n    svg.attr('viewBox', [0, 0, containerWidth, containerHeight]).attr('preserveAspectRatio', 'xMidYMid meet');\n    svg.append('rect').attr('class', 'background').attr('width', '100%').attr('height', '100%').attr('fill', 'transparent').on('click', event => {\n      if (event.target.classList.contains('background')) {\n        d3.selectAll('.link').classed('selected', false);\n        setSelectedEdge(null);\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    });\n\n    // Add arrow marker definition for edges\n    svg.append(\"defs\").selectAll(\"marker\").data([\"arrow\"]).enter().append(\"marker\").attr(\"id\", d => d).attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 20) // Increased from 15 to position arrow better\n    .attr(\"refY\", 0).attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#A8C3A4\"); // Sage for arrowheads\n\n    // Initialize node positions if not set\n    nodes.forEach(node => {\n      if (!node.position || node.position.x === null && node.position.y === null) {\n        node.x = Math.random() * (containerWidth - 100) + 50;\n        node.y = Math.random() * (containerHeight - 100) + 50;\n        node.position = {\n          x: node.x,\n          y: node.y\n        };\n      } else {\n        node.x = node.position.x;\n        node.y = node.position.y;\n      }\n      // Don't fix positions by default to allow force layout to work\n      node.fx = null;\n      node.fy = null;\n    });\n\n    // Create a map of nodes by ID for easy lookup\n    const nodeMap = {};\n    nodes.forEach(node => {\n      nodeMap[node._id] = node;\n    });\n\n    // Process edges to ensure they reference actual node objects\n    const processedEdges = edges.map(edge => ({\n      id: edge._id,\n      source: nodeMap[edge.source] || edge.source,\n      target: nodeMap[edge.target] || edge.target,\n      type: edge.type,\n      _id: edge._id\n    }));\n    const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(processedEdges).id(d => d._id).distance(150)).alpha(0).alphaDecay(1).alphaTarget(0);\n\n    // Fix node positions immediately\n    nodes.forEach(node => {\n      if (node.position) {\n        node.fx = node.position.x;\n        node.fy = node.position.y;\n      } else {\n        node.fx = Math.random() * (containerWidth - 100) + 50;\n        node.fy = Math.random() * (containerHeight - 100) + 50;\n        node.position = {\n          x: node.fx,\n          y: node.fy\n        };\n      }\n    });\n\n    // Create edge paths with arrows, appended directly to svg\n    const linkElements = svg.append('g').attr('class', 'links').selectAll('path').data(processedEdges).enter().append('path').attr('class', 'link').attr('stroke', '#A8C3A4') // Sage for links\n    .attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)').on('click', handleEdgeClick);\n\n    // Create node elements, appended directly to svg\n    const nodeElements = svg.append('g').attr('class', 'nodes').selectAll('g').data(nodes).enter().append('g').attr('class', 'node').call(dragBehavior(simulation, svg, containerWidth, containerHeight));\n    nodeElements.append('circle').attr('r', 12).attr('fill', '#2E7D32') // Forest Green for nodes\n    .attr('stroke', '#1B5E20') // Darker Forest Green for node stroke\n    .attr('stroke-width', 1.5).on('click', handleNodeClick);\n    nodeElements.append('text').text(d => {\n      var _d$_id;\n      return d.title || ((_d$_id = d._id) === null || _d$_id === void 0 ? void 0 : _d$_id.substring(0, 6));\n    }).attr('x', 16).attr('y', 5).attr('fill', '#FAF3E0') // Cream text on nodes for contrast with Forest Green\n    .attr('text-anchor', 'start').on('click', handleNodeClick);\n    function handleEdgeClick(event, d) {\n      event.stopPropagation();\n      if (interactionMode === 'select') {\n        d3.selectAll('.link').classed('selected', false);\n        d3.select(event.currentTarget).classed('selected', true);\n        setSelectedEdge(d);\n        if (onNodeClick) onNodeClick(null);\n      }\n    }\n    function ticked() {\n      linkElements.attr('d', d => {\n        const sourceX = Math.max(15, Math.min(containerWidth - 15, d.source.x));\n        const sourceY = Math.max(15, Math.min(containerHeight - 15, d.source.y));\n        const targetX = Math.max(15, Math.min(containerWidth - 15, d.target.x));\n        const targetY = Math.max(15, Math.min(containerHeight - 15, d.target.y));\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\n      });\n      nodeElements.attr('transform', d => {\n        const x = Math.max(15, Math.min(containerWidth - 15, d.x));\n        const y = Math.max(15, Math.min(containerHeight - 15, d.y));\n        return `translate(${x},${y})`;\n      });\n    }\n    simulation.on('tick', ticked);\n    return () => {\n      simulation.stop();\n      if (linkingState.current.tempLink) {\n        linkingState.current.tempLink.remove();\n      }\n      linkingState.current = {\n        sourceNode: null,\n        tempLink: null,\n        isLinking: false\n      };\n      if (clickTimeout.current) {\n        clearTimeout(clickTimeout.current);\n      }\n    };\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, interactionMode, onBackgroundClick, isAnyPanelVisible]);\n\n  // Handle keyboard delete for selected edges\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n          onDeleteEdge(selectedEdge._id);\n          setSelectedEdge(null); // Deselect after deletion\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedEdge, onDeleteEdge]);\n  function dragBehavior(simulation, svg, containerWidth, containerHeight) {\n    function dragstarted(event, d) {\n      if (interactionMode === 'connect') {\n        // Clear any existing temp link from a previous click-based attempt\n        if (linkingState.current.tempLink) {\n          linkingState.current.tempLink.remove();\n          linkingState.current.tempLink = null;\n        }\n        linkingState.current.isLinking = true;\n        linkingState.current.sourceNode = d;\n        event.sourceEvent.stopPropagation();\n        // Create a path for drag-linking, ensure svgRef.current is available\n        if (svgRef.current) {\n          linkingState.current.tempLink = d3.select(svgRef.current).append('path').attr('class', 'temp-link link') // Use same class for styling\n          .attr('d', `M${d.x},${d.y}L${d.x},${d.y}`).attr('stroke-dasharray', '5,5').attr('stroke', '#B87333') // Copper for temp link (consistent with click-link attempt)\n          .attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)');\n        }\n      } else {\n        event.sourceEvent.stopPropagation();\n        if (!event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\n        d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\n      }\n    }\n    function dragged(event, d) {\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\n        event.sourceEvent.stopPropagation();\n        if (!svgRef.current || !linkingState.current.tempLink) return; // Guard\n        const [targetX, targetY] = d3.pointer(event.sourceEvent, svgRef.current);\n        // const targetX = Math.max(0, Math.min(containerWidth, event.x));\n        // const targetY = Math.max(0, Math.min(containerHeight, event.y));\n        linkingState.current.tempLink.attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${targetX},${targetY}`);\n      } else {\n        event.sourceEvent.stopPropagation();\n        d.fx = Math.max(15, Math.min(containerWidth - 15, event.x));\n        d.fy = Math.max(15, Math.min(containerHeight - 15, event.y));\n        d.position = {\n          x: d.fx,\n          y: d.fy\n        };\n      }\n    }\n    async function dragended(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n      // Do not reset d.fx, d.fy here if we want to persist positions\n\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\n        // Mouseup on SVG (handled by handleMouseUpLinking) will determine if link is made or cancelled.\n        // No specific action needed here for link creation/cancellation itself,\n        // as the global SVG mouseup listener (handleMouseUpLinking) will take care of it.\n        // We just ensure the simulation is settled.\n        console.log(\"Drag ended in connect mode. Global mouseup should handle the rest.\");\n      } else if (interactionMode !== 'connect') {\n        // Update node position in backend if not in connect mode\n        if (api && typeof api.updateNode === 'function') {\n          api.updateNode(d._id, {\n            position: {\n              x: d.x,\n              y: d.y\n            }\n          }).catch(err => console.error(\"Failed to update node position:\", err));\n        }\n      }\n    }\n    return d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended);\n  }\n  const handleNodeClick = (event, d) => {\n    if (event.defaultPrevented) return; // Dragged\n\n    if (clickTimeout.current) {\n      clearTimeout(clickTimeout.current);\n      clickTimeout.current = null;\n      if (onNodeDoubleClick) {\n        onNodeDoubleClick(d);\n      }\n      if (linkingState.current.isLinking && linkingState.current.sourceNode) {\n        var _linkingState$current3;\n        (_linkingState$current3 = linkingState.current.tempLink) === null || _linkingState$current3 === void 0 ? void 0 : _linkingState$current3.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n        setInteractionMode('select');\n      }\n      return;\n    }\n    clickTimeout.current = setTimeout(() => {\n      clickTimeout.current = null;\n      if (interactionMode === 'connect') {\n        if (!linkingState.current.isLinking) {\n          var _linkingState$current4;\n          // First click: initiate linking\n          console.log(\"handleNodeClick: First click in connect mode - initiating link from node:\", d._id);\n          (_linkingState$current4 = linkingState.current.tempLink) === null || _linkingState$current4 === void 0 ? void 0 : _linkingState$current4.remove(); // Remove any old temp link\n\n          linkingState.current.sourceNode = d;\n          linkingState.current.isLinking = true;\n          const [pointerX, pointerY] = d3.pointer(event, svgRef.current);\n          if (svgRef.current) {\n            // Ensure svgRef.current is available\n            linkingState.current.tempLink = d3.select(svgRef.current).append('line').attr('class', 'temp-link').attr('x1', d.x).attr('y1', d.y).attr('x2', pointerX).attr('y2', pointerY).attr('stroke-dasharray', '5,5').attr('stroke', '#B87333') // Copper for temp link\n            .attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)'); // Add arrow to temp line\n          }\n\n          // Global mousemove and mouseup listeners on SVG are already set up by useEffect\n          // No need to add/remove them here anymore.\n          // console.log('Attaching mouseup.linking listener. Is handleMouseUpLinking defined?', typeof handleMouseUpLinking);\n          // d3.select(svgRef.current)\n          //   .on('mousemove.linking', handleMouseMoveLinking)\n          //   .on('mouseup.linking', handleMouseUpLinking);\n        } else if (linkingState.current.sourceNode && linkingState.current.sourceNode._id !== d._id) {\n          var _linkingState$current5;\n          // Second click on a DIFFERENT node: complete the link\n          console.log(\"handleNodeClick: Second click in connect mode - completing link to node:\", d._id);\n          if (onCreateEdge) {\n            onCreateEdge(linkingState.current.sourceNode._id, d._id);\n          }\n          (_linkingState$current5 = linkingState.current.tempLink) === null || _linkingState$current5 === void 0 ? void 0 : _linkingState$current5.remove();\n          linkingState.current.isLinking = false;\n          linkingState.current.sourceNode = null;\n          linkingState.current.tempLink = null;\n          setInteractionMode('select');\n          // Global .linking listeners will be removed by useEffect when interactionMode changes\n        } else if (linkingState.current.sourceNode && linkingState.current.sourceNode._id === d._id) {\n          var _linkingState$current6;\n          // Clicked on the source node again: cancel linking\n          console.log(\"handleNodeClick: Clicked on source node again - cancelling link.\");\n          (_linkingState$current6 = linkingState.current.tempLink) === null || _linkingState$current6 === void 0 ? void 0 : _linkingState$current6.remove();\n          linkingState.current.isLinking = false;\n          linkingState.current.sourceNode = null;\n          linkingState.current.tempLink = null;\n          setInteractionMode('select');\n        }\n      } else {\n        setSelectedEdge(null);\n        if (onNodeClick) onNodeClick(d);\n      }\n    }, 250); // 250ms delay for double click\n  };\n\n  // Handle edge deletion\n  const handleDeleteEdge = () => {\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n      onDeleteEdge(selectedEdge._id);\n      setSelectedEdge(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-wrapper\",\n    onClick: e => {\n      if (e.target === e.currentTarget) {\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    },\n    children: [nodes && nodes.length > 0 ? /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      className: \"graph-svg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-svg empty-graph-placeholder\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-graph-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This canvas is empty. Start by creating a new node!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-controls\",\n      children: [selectedEdge && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteEdge,\n        className: \"button danger\",\n        children: [/*#__PURE__*/_jsxDEV(TrashIcon, {\n          style: {\n            width: '1rem',\n            height: '1rem',\n            marginRight: '0.5rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 13\n        }, this), \"Remove Edge\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onCreateNew,\n          className: \"button primary\",\n          children: [/*#__PURE__*/_jsxDEV(PlusIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 13\n          }, this), \"Create New Node\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setInteractionMode(prevMode => prevMode === 'connect' ? 'select' : 'connect'),\n          className: `button accent ${interactionMode === 'connect' ? 'active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(LinkIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 13\n          }, this), interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 478,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"QZ/EZzz+kf0sWYM/F3XvfMFR0bI=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","d3","api","PlusIcon","LinkIcon","TrashIcon","jsxDEV","_jsxDEV","Graph","nodes","edges","onNodeClick","onNodeDoubleClick","onCreateNew","onCreateEdge","onDeleteEdge","interactionMode","setInteractionMode","onBackgroundClick","isAnyPanelVisible","_s","svgRef","linkingState","sourceNode","tempLink","isLinking","selectedEdge","setSelectedEdge","clickTimeout","console","log","nodeCount","length","edgeCount","mode","JSON","stringify","handleMouseMoveLinking","event","current","x","y","pointer","tempLinkNode","node","tagName","toLowerCase","attr","handleMouseUpLinking","target","_targetElement$select","targetElement","select","nodeElement","classed","selectClosest","isNode","_linkingState$current","remove","svgInstance","onMouseMoveLinking","onMouseUpLinking","on","_linkingState$current2","svg","selectAll","currentSvg","localContainerWidth","clientWidth","localContainerHeight","clientHeight","setupBackgroundClickHandler","append","classList","contains","containerWidth","containerHeight","data","enter","d","forEach","position","Math","random","fx","fy","nodeMap","_id","processedEdges","map","edge","id","source","type","simulation","forceSimulation","force","forceLink","distance","alpha","alphaDecay","alphaTarget","linkElements","handleEdgeClick","nodeElements","call","dragBehavior","handleNodeClick","text","_d$_id","title","substring","stopPropagation","currentTarget","ticked","sourceX","max","min","sourceY","targetX","targetY","stop","clearTimeout","handleKeyDown","key","window","addEventListener","removeEventListener","dragstarted","sourceEvent","active","restart","dragged","dragended","updateNode","catch","err","error","drag","defaultPrevented","_linkingState$current3","setTimeout","_linkingState$current4","pointerX","pointerY","_linkingState$current5","_linkingState$current6","handleDeleteEdge","className","onClick","e","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","style","width","height","marginRight","prevMode","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Mind Mosaic/client/src/components/graph.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\r\nimport * as d3 from 'd3';\r\nimport './Graph.css';\r\nimport api from '../services/api.js';\r\nimport PlusIcon from './icons/PlusIcon';\r\nimport LinkIcon from './icons/LinkIcon';\r\nimport TrashIcon from './icons/TrashIcon';\r\n\r\nconst Graph = ({ nodes = [], edges = [], onNodeClick, onNodeDoubleClick, onCreateNew, onCreateEdge, onDeleteEdge, interactionMode = 'select', setInteractionMode, onBackgroundClick, isAnyPanelVisible }) => {\r\n  const svgRef = useRef();\r\n  const linkingState = useRef({ sourceNode: null, tempLink: null, isLinking: false });\r\n  const [selectedEdge, setSelectedEdge] = useState(null);\r\n  const clickTimeout = useRef(null);\r\n\r\n  console.log('Graph received:', {\r\n    nodeCount: nodes.length,\r\n    edgeCount: edges.length,\r\n    mode: interactionMode\r\n  });\r\n\r\n  // Debug: Log the actual nodes and edges data\r\n  console.log('Nodes data:', JSON.stringify(nodes, null, 2));\r\n  console.log('Edges data:', JSON.stringify(edges, null, 2));\r\n\r\n  const handleMouseMoveLinking = useCallback((event) => { \r\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\r\n        return;\r\n    }\r\n    if (!svgRef.current) return; \r\n    const [x, y] = d3.pointer(event, svgRef.current);\r\n    \r\n    const tempLinkNode = linkingState.current.tempLink.node();\r\n    if (!tempLinkNode) return;\r\n\r\n    const tagName = tempLinkNode.tagName.toLowerCase();\r\n\r\n    if (tagName === 'line') {\r\n        linkingState.current.tempLink.attr('x2', x).attr('y2', y);\r\n    } else if (tagName === 'path') {\r\n        linkingState.current.tempLink\r\n          .attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\r\n    }\r\n  }, [svgRef, linkingState]);\r\n\r\n  const handleMouseUpLinking = useCallback((event) => {\r\n    console.log('SVG mouseup.linking triggered. Target:', event.target, 'isLinking:', linkingState.current.isLinking);\r\n    if (linkingState.current.isLinking) { \r\n      if (!svgRef.current) return; \r\n      const targetElement = d3.select(event.target);\r\n      const nodeElement = targetElement.classed('node') ? targetElement.node() : targetElement.selectClosest('.node')?.node();\r\n      const isNode = !!nodeElement; \r\n      \r\n      console.log('SVG mouseup.linking: Is target related to a node?', isNode);\r\n\r\n      if (!isNode) { \r\n        console.log('SVG mouseup.linking: Target is NOT a node. Cancelling link.');\r\n        linkingState.current.tempLink?.remove();\r\n        linkingState.current.isLinking = false;\r\n        linkingState.current.sourceNode = null;\r\n        linkingState.current.tempLink = null;\r\n        setInteractionMode('select'); \r\n      } else {\r\n        console.log('SVG mouseup.linking: Target IS a node. Deferring to node\\'s click handler for completion.');\r\n      }\r\n    }\r\n  }, [svgRef, linkingState, setInteractionMode, onCreateEdge]);\r\n\r\n  useEffect(() => {\r\n    const svgInstance = d3.select(svgRef.current);\r\n\r\n    if (interactionMode === 'connect') {\r\n      const onMouseMoveLinking = handleMouseMoveLinking;\r\n      const onMouseUpLinking = handleMouseUpLinking;\r\n\r\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\r\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\r\n      console.log('Global linking listeners ADDED to SVG for connect mode.');\r\n\r\n      return () => {\r\n        svgInstance.on('mousemove.linking', null);\r\n        svgInstance.on('mouseup.linking', null);\r\n        console.log('Global linking listeners REMOVED from SVG.');\r\n      };\r\n    } else {\r\n      svgInstance.on('mousemove.linking', null);\r\n      svgInstance.on('mouseup.linking', null);\r\n      \r\n      if (linkingState.current.isLinking) {\r\n        console.log('Exited connect mode with active link: Forcibly cleaning up.');\r\n        linkingState.current.tempLink?.remove();\r\n        linkingState.current.isLinking = false;\r\n        linkingState.current.sourceNode = null;\r\n        linkingState.current.tempLink = null;\r\n      }\r\n      return () => {};\r\n    }\r\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]);\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll('*').remove();\r\n\r\n    const currentSvg = svgRef.current;\r\n    if (!currentSvg) return;\r\n\r\n    let localContainerWidth = currentSvg.clientWidth;\r\n    let localContainerHeight = currentSvg.clientHeight;\r\n\r\n    // Guard against zero or very small dimensions\r\n    if (localContainerWidth < 50) localContainerWidth = 50;\r\n    if (localContainerHeight < 50) localContainerHeight = 50;\r\n\r\n    const setupBackgroundClickHandler = () => {\r\n      svg.append('rect')\r\n        .attr('class', 'background')\r\n        .attr('width', '100%')\r\n        .attr('height', '100%')\r\n        .attr('fill', 'transparent')\r\n        .on('click', (event) => {\r\n          if (event.target.classList.contains('background')) {\r\n            d3.selectAll('.link').classed('selected', false);\r\n            setSelectedEdge(null);\r\n            if (onBackgroundClick) {\r\n              onBackgroundClick();\r\n            }\r\n          }\r\n        });\r\n    };\r\n\r\n    if (!nodes || nodes.length === 0) {\r\n      setupBackgroundClickHandler(); // Ensure background click is available for empty graph\r\n      // Render empty state message (already handled by App.js or Graph.css)\r\n      return;\r\n    }\r\n\r\n    // Use the guarded dimensions from now on\r\n    const containerWidth = localContainerWidth;\r\n    const containerHeight = localContainerHeight;\r\n\r\n    svg\r\n      .attr('viewBox', [0, 0, containerWidth, containerHeight])\r\n      .attr('preserveAspectRatio', 'xMidYMid meet');\r\n\r\n    svg.append('rect')\r\n      .attr('class', 'background')\r\n      .attr('width', '100%')\r\n      .attr('height', '100%')\r\n      .attr('fill', 'transparent')\r\n      .on('click', (event) => {\r\n        if (event.target.classList.contains('background')) {\r\n          d3.selectAll('.link').classed('selected', false);\r\n          setSelectedEdge(null);\r\n          if (onBackgroundClick) {\r\n            onBackgroundClick();\r\n          }\r\n        }\r\n      });\r\n\r\n    // Add arrow marker definition for edges\r\n    svg.append(\"defs\").selectAll(\"marker\")\r\n      .data([\"arrow\"])\r\n      .enter().append(\"marker\")\r\n      .attr(\"id\", d => d)\r\n      .attr(\"viewBox\", \"0 -5 10 10\")\r\n      .attr(\"refX\", 20) // Increased from 15 to position arrow better\r\n      .attr(\"refY\", 0)\r\n      .attr(\"markerWidth\", 6)\r\n      .attr(\"markerHeight\", 6)\r\n      .attr(\"orient\", \"auto\")\r\n      .append(\"path\")\r\n      .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n      .attr(\"fill\", \"#A8C3A4\"); // Sage for arrowheads\r\n\r\n    // Initialize node positions if not set\r\n    nodes.forEach(node => {\r\n      if (!node.position || (node.position.x === null && node.position.y === null)) {\r\n        node.x = Math.random() * (containerWidth - 100) + 50;\r\n        node.y = Math.random() * (containerHeight - 100) + 50;\r\n        node.position = { x: node.x, y: node.y };\r\n      } else {\r\n        node.x = node.position.x;\r\n        node.y = node.position.y;\r\n      }\r\n      // Don't fix positions by default to allow force layout to work\r\n      node.fx = null;\r\n      node.fy = null;\r\n    });\r\n\r\n    // Create a map of nodes by ID for easy lookup\r\n    const nodeMap = {};\r\n    nodes.forEach(node => {\r\n      nodeMap[node._id] = node;\r\n    });\r\n\r\n    // Process edges to ensure they reference actual node objects\r\n    const processedEdges = edges.map(edge => ({\r\n      id: edge._id,\r\n      source: nodeMap[edge.source] || edge.source,\r\n      target: nodeMap[edge.target] || edge.target,\r\n      type: edge.type,\r\n      _id: edge._id\r\n    }));\r\n\r\n    const simulation = d3.forceSimulation(nodes)\r\n      .force('link', d3.forceLink(processedEdges).id(d => d._id).distance(150))\r\n      .alpha(0)\r\n      .alphaDecay(1)\r\n      .alphaTarget(0);\r\n\r\n    // Fix node positions immediately\r\n    nodes.forEach(node => {\r\n      if (node.position) {\r\n        node.fx = node.position.x;\r\n        node.fy = node.position.y;\r\n      } else {\r\n        node.fx = Math.random() * (containerWidth - 100) + 50;\r\n        node.fy = Math.random() * (containerHeight - 100) + 50;\r\n        node.position = { x: node.fx, y: node.fy };\r\n      }\r\n    });\r\n\r\n    // Create edge paths with arrows, appended directly to svg\r\n    const linkElements = svg.append('g')\r\n      .attr('class', 'links')\r\n      .selectAll('path')\r\n      .data(processedEdges)\r\n      .enter().append('path')\r\n      .attr('class', 'link')\r\n      .attr('stroke', '#A8C3A4') // Sage for links\r\n      .attr('stroke-width', 2)\r\n      .attr('fill', 'none')\r\n      .attr('marker-end', 'url(#arrow)')\r\n      .on('click', handleEdgeClick);\r\n\r\n    // Create node elements, appended directly to svg\r\n    const nodeElements = svg.append('g')\r\n      .attr('class', 'nodes')\r\n      .selectAll('g')\r\n      .data(nodes)\r\n      .enter().append('g')\r\n      .attr('class', 'node')\r\n      .call(dragBehavior(simulation, svg, containerWidth, containerHeight));\r\n\r\n    nodeElements.append('circle')\r\n      .attr('r', 12)\r\n      .attr('fill', '#2E7D32') // Forest Green for nodes\r\n      .attr('stroke', '#1B5E20') // Darker Forest Green for node stroke\r\n      .attr('stroke-width', 1.5)\r\n      .on('click', handleNodeClick);\r\n\r\n    nodeElements.append('text')\r\n      .text(d => d.title || d._id?.substring(0, 6))\r\n      .attr('x', 16)\r\n      .attr('y', 5)\r\n      .attr('fill', '#FAF3E0') // Cream text on nodes for contrast with Forest Green\r\n      .attr('text-anchor', 'start')\r\n      .on('click', handleNodeClick);\r\n\r\n    function handleEdgeClick(event, d) {\r\n      event.stopPropagation();\r\n      if (interactionMode === 'select') {\r\n        d3.selectAll('.link').classed('selected', false);\r\n        d3.select(event.currentTarget).classed('selected', true);\r\n        setSelectedEdge(d);\r\n        if (onNodeClick) onNodeClick(null);\r\n      }\r\n    }\r\n\r\n    function ticked() {\r\n      linkElements.attr('d', d => {\r\n        const sourceX = Math.max(15, Math.min(containerWidth - 15, d.source.x));\r\n        const sourceY = Math.max(15, Math.min(containerHeight - 15, d.source.y));\r\n        const targetX = Math.max(15, Math.min(containerWidth - 15, d.target.x));\r\n        const targetY = Math.max(15, Math.min(containerHeight - 15, d.target.y));\r\n        \r\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\r\n      });\r\n\r\n      nodeElements.attr('transform', d => {\r\n        const x = Math.max(15, Math.min(containerWidth - 15, d.x));\r\n        const y = Math.max(15, Math.min(containerHeight - 15, d.y));\r\n        return `translate(${x},${y})`;\r\n      });\r\n    }\r\n\r\n    simulation.on('tick', ticked);\r\n    \r\n    return () => {\r\n      simulation.stop();\r\n      if (linkingState.current.tempLink) {\r\n        linkingState.current.tempLink.remove();\r\n      }\r\n      linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n      if (clickTimeout.current) {\r\n        clearTimeout(clickTimeout.current);\r\n      }\r\n    };\r\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, interactionMode, onBackgroundClick, isAnyPanelVisible]);\r\n\r\n  // Handle keyboard delete for selected edges\r\n  useEffect(() => {\r\n    const handleKeyDown = (event) => {\r\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\r\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\r\n          onDeleteEdge(selectedEdge._id);\r\n          setSelectedEdge(null); // Deselect after deletion\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [selectedEdge, onDeleteEdge]);\r\n\r\n  function dragBehavior(simulation, svg, containerWidth, containerHeight) {\r\n    function dragstarted(event, d) {\r\n      if (interactionMode === 'connect') {\r\n        // Clear any existing temp link from a previous click-based attempt\r\n        if (linkingState.current.tempLink) {\r\n            linkingState.current.tempLink.remove();\r\n            linkingState.current.tempLink = null;\r\n        }\r\n\r\n        linkingState.current.isLinking = true;\r\n        linkingState.current.sourceNode = d;\r\n        event.sourceEvent.stopPropagation();\r\n        // Create a path for drag-linking, ensure svgRef.current is available\r\n        if (svgRef.current) {\r\n            linkingState.current.tempLink = d3.select(svgRef.current).append('path')\r\n              .attr('class', 'temp-link link') // Use same class for styling\r\n              .attr('d', `M${d.x},${d.y}L${d.x},${d.y}`)\r\n              .attr('stroke-dasharray', '5,5')\r\n              .attr('stroke', '#B87333') // Copper for temp link (consistent with click-link attempt)\r\n              .attr('stroke-width', 2)\r\n              .attr('fill', 'none')\r\n              .attr('marker-end', 'url(#arrow)');\r\n        }\r\n      } else {\r\n        event.sourceEvent.stopPropagation();\r\n        if (!event.active) simulation.alphaTarget(0.3).restart();\r\n        d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\r\n        d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\r\n      }\r\n    }\r\n\r\n    function dragged(event, d) {\r\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\r\n        event.sourceEvent.stopPropagation();\r\n        if (!svgRef.current || !linkingState.current.tempLink) return; // Guard\r\n        const [targetX, targetY] = d3.pointer(event.sourceEvent, svgRef.current); \r\n        // const targetX = Math.max(0, Math.min(containerWidth, event.x));\r\n        // const targetY = Math.max(0, Math.min(containerHeight, event.y));\r\n        linkingState.current.tempLink\r\n          .attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${targetX},${targetY}`);\r\n      } else {\r\n        event.sourceEvent.stopPropagation();\r\n        d.fx = Math.max(15, Math.min(containerWidth - 15, event.x));\r\n        d.fy = Math.max(15, Math.min(containerHeight - 15, event.y));\r\n        d.position = { x: d.fx, y: d.fy };\r\n      }\r\n    }\r\n\r\n    async function dragended(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0);\r\n      // Do not reset d.fx, d.fy here if we want to persist positions\r\n      \r\n      if (interactionMode === 'connect' && linkingState.current.isLinking) {\r\n        // Mouseup on SVG (handled by handleMouseUpLinking) will determine if link is made or cancelled.\r\n        // No specific action needed here for link creation/cancellation itself,\r\n        // as the global SVG mouseup listener (handleMouseUpLinking) will take care of it.\r\n        // We just ensure the simulation is settled.\r\n        console.log(\"Drag ended in connect mode. Global mouseup should handle the rest.\");\r\n      } else if (interactionMode !== 'connect') {\r\n        // Update node position in backend if not in connect mode\r\n        if (api && typeof api.updateNode === 'function') {\r\n          api.updateNode(d._id, { position: { x: d.x, y: d.y } })\r\n            .catch(err => console.error(\"Failed to update node position:\", err));\r\n        }\r\n      }\r\n    }\r\n\r\n    return d3.drag()\r\n      .on('start', dragstarted)\r\n      .on('drag', dragged)\r\n      .on('end', dragended);\r\n  }\r\n\r\n  const handleNodeClick = (event, d) => {\r\n    if (event.defaultPrevented) return; // Dragged\r\n\r\n    if (clickTimeout.current) {\r\n      clearTimeout(clickTimeout.current);\r\n      clickTimeout.current = null;\r\n      if (onNodeDoubleClick) {\r\n        onNodeDoubleClick(d);\r\n      }\r\n      if (linkingState.current.isLinking && linkingState.current.sourceNode) {\r\n        linkingState.current.tempLink?.remove();\r\n        linkingState.current.isLinking = false;\r\n        linkingState.current.sourceNode = null;\r\n        linkingState.current.tempLink = null;\r\n        setInteractionMode('select');\r\n      }\r\n      return;\r\n    }\r\n\r\n    clickTimeout.current = setTimeout(() => {\r\n      clickTimeout.current = null;\r\n      if (interactionMode === 'connect') {\r\n        if (!linkingState.current.isLinking) {\r\n          // First click: initiate linking\r\n          console.log(\"handleNodeClick: First click in connect mode - initiating link from node:\", d._id);\r\n          linkingState.current.tempLink?.remove(); // Remove any old temp link\r\n\r\n          linkingState.current.sourceNode = d;\r\n          linkingState.current.isLinking = true;\r\n          const [pointerX, pointerY] = d3.pointer(event, svgRef.current);\r\n          if (svgRef.current) { // Ensure svgRef.current is available\r\n            linkingState.current.tempLink = d3.select(svgRef.current).append('line')\r\n              .attr('class', 'temp-link')\r\n              .attr('x1', d.x)\r\n              .attr('y1', d.y)\r\n              .attr('x2', pointerX) \r\n              .attr('y2', pointerY)\r\n              .attr('stroke-dasharray', '5,5')\r\n              .attr('stroke', '#B87333') // Copper for temp link\r\n              .attr('stroke-width', 2)\r\n              .attr('fill', 'none')\r\n              .attr('marker-end', 'url(#arrow)'); // Add arrow to temp line\r\n          }\r\n          \r\n          // Global mousemove and mouseup listeners on SVG are already set up by useEffect\r\n          // No need to add/remove them here anymore.\r\n          // console.log('Attaching mouseup.linking listener. Is handleMouseUpLinking defined?', typeof handleMouseUpLinking);\r\n          // d3.select(svgRef.current)\r\n          //   .on('mousemove.linking', handleMouseMoveLinking)\r\n          //   .on('mouseup.linking', handleMouseUpLinking);\r\n\r\n        } else if (linkingState.current.sourceNode && linkingState.current.sourceNode._id !== d._id) {\r\n          // Second click on a DIFFERENT node: complete the link\r\n          console.log(\"handleNodeClick: Second click in connect mode - completing link to node:\", d._id);\r\n          if (onCreateEdge) {\r\n            onCreateEdge(linkingState.current.sourceNode._id, d._id);\r\n          }\r\n          linkingState.current.tempLink?.remove();\r\n          linkingState.current.isLinking = false;\r\n          linkingState.current.sourceNode = null;\r\n          linkingState.current.tempLink = null;\r\n          setInteractionMode('select'); \r\n          // Global .linking listeners will be removed by useEffect when interactionMode changes\r\n        } else if (linkingState.current.sourceNode && linkingState.current.sourceNode._id === d._id) {\r\n          // Clicked on the source node again: cancel linking\r\n          console.log(\"handleNodeClick: Clicked on source node again - cancelling link.\");\r\n          linkingState.current.tempLink?.remove();\r\n          linkingState.current.isLinking = false;\r\n          linkingState.current.sourceNode = null;\r\n          linkingState.current.tempLink = null;\r\n          setInteractionMode('select');\r\n        }\r\n      } else {\r\n        setSelectedEdge(null);\r\n        if (onNodeClick) onNodeClick(d);\r\n      }\r\n    }, 250); // 250ms delay for double click\r\n  };\r\n\r\n  // Handle edge deletion\r\n  const handleDeleteEdge = () => {\r\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\r\n      onDeleteEdge(selectedEdge._id);\r\n      setSelectedEdge(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-wrapper\" onClick={(e) => {\r\n      if (e.target === e.currentTarget) {\r\n        if (onBackgroundClick) {\r\n          onBackgroundClick();\r\n        }\r\n      }\r\n    }}>\r\n      {nodes && nodes.length > 0 ? (\r\n        <svg ref={svgRef} className=\"graph-svg\" />\r\n      ) : (\r\n        <div className=\"graph-svg empty-graph-placeholder\">\r\n          <div className=\"empty-graph-message\">\r\n            <p>This canvas is empty. Start by creating a new node!</p>\r\n            {/* The main \"Create New Node\" button is in graph-controls below */}\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className=\"graph-controls\">\r\n        {selectedEdge && (\r\n          <button\r\n            onClick={handleDeleteEdge}\r\n            className=\"button danger\"\r\n          >\r\n            <TrashIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            Remove Edge\r\n          </button>\r\n        )}\r\n        <div className=\"button-row\">\r\n          <button onClick={onCreateNew} className=\"button primary\">\r\n            <PlusIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            Create New Node\r\n          </button>\r\n          <button\r\n            onClick={() => setInteractionMode(prevMode => prevMode === 'connect' ? 'select' : 'connect')}\r\n            className={`button accent ${interactionMode === 'connect' ? 'active' : ''}`}\r\n          >\r\n            <LinkIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            {interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}