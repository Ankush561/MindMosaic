{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Mind Mosaic\\\\client\\\\src\\\\components\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport './Graph.css';\nimport api from '../services/api.js';\nimport PlusIcon from './icons/PlusIcon';\nimport LinkIcon from './icons/LinkIcon';\nimport TrashIcon from './icons/TrashIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  nodes = [],\n  edges = [],\n  onNodeClick,\n  onNodeDoubleClick,\n  onCreateNew,\n  onCreateEdge,\n  onDeleteEdge,\n  interactionMode = 'select',\n  setInteractionMode,\n  onBackgroundClick,\n  isAnyPanelVisible /*, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete */\n}) => {\n  _s();\n  console.log(\"CURRENT INTERACTION MODE:\", interactionMode);\n  const svgRef = useRef(null);\n  const [isSvgMounted, setIsSvgMounted] = useState(false);\n  const simulationRef = useRef(); // Ref to store the D3 simulation instance\n  const linkingState = useRef({\n    sourceNode: null,\n    tempLink: null,\n    isLinking: false\n  });\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const clickTimeout = useRef(null);\n  const graphDimensionsRef = useRef({\n    width: 800,\n    height: 600\n  }); // For App.js, needs live dimensions\n  const stableViewBoxDimensionsRef = useRef({\n    width: 0,\n    height: 0\n  }); // For D3 viewBox, needs initial stable dimensions\n\n  // console.log('Graph received:', {\n  //   nodeCount: nodes.length,\n  //   edgeCount: edges.length,\n  //   mode: interactionMode\n  // });\n\n  // Debug: Log the actual nodes and edges data\n  // console.log('Nodes data:', JSON.stringify(nodes, null, 2));\n  // console.log('Edges data:', JSON.stringify(edges, null, 2));\n\n  const handleMouseMoveLinking = useCallback(event => {\n    if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\n      return;\n    }\n    if (!svgRef.current) return;\n    const [x, y] = d3.pointer(event, svgRef.current);\n\n    // Update the temp link to follow the mouse\n    linkingState.current.tempLink.attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\n  }, [svgRef, linkingState]);\n  const handleMouseUpLinking = useCallback(event => {\n    if (linkingState.current.isLinking) {\n      if (!svgRef.current) return;\n      const clickedDomElement = event.target;\n      const closestNodeGroup = clickedDomElement.closest('.node');\n      const isNode = !!closestNodeGroup;\n      if (!isNode) {\n        var _linkingState$current;\n        console.log('Clicked on empty space - cancelling connection');\n\n        // Clean up\n        (_linkingState$current = linkingState.current.tempLink) === null || _linkingState$current === void 0 ? void 0 : _linkingState$current.remove();\n\n        // Reset visual feedback\n        d3.selectAll('.node circle').attr('stroke', '#1B5E20').attr('stroke-width', 1.5);\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n    }\n  }, [svgRef, linkingState]);\n  // onCreateEdge might be relevant if we decide to complete link here\n\n  useEffect(() => {\n    const svgInstance = d3.select(svgRef.current);\n    if (interactionMode === 'connect') {\n      const onMouseMoveLinking = handleMouseMoveLinking;\n      const onMouseUpLinking = handleMouseUpLinking;\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\n      // console.log('Global linking listeners ADDED to SVG for connect mode.');\n\n      return () => {\n        svgInstance.on('mousemove.linking', null);\n        svgInstance.on('mouseup.linking', null);\n        // console.log('Global linking listeners REMOVED from SVG.');\n      };\n    } else {\n      svgInstance.on('mousemove.linking', null);\n      svgInstance.on('mouseup.linking', null);\n      if (linkingState.current.isLinking) {\n        var _linkingState$current2;\n        // console.log('Exited connect mode with active link: Forcibly cleaning up.');\n        (_linkingState$current2 = linkingState.current.tempLink) === null || _linkingState$current2 === void 0 ? void 0 : _linkingState$current2.remove();\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return () => {};\n    }\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]);\n\n  // Main effect for D3 rendering and updates\n  useEffect(() => {\n    // console.log('[Graph Effect - Main D3] Running. Nodes count:', nodes.length, 'Edges count:', edges.length);\n    // console.log('[Graph Effect - Main D3] Nodes prop:', JSON.parse(JSON.stringify(nodes)));\n    // console.log('[Graph Effect - Main D3] Edges prop:', JSON.parse(JSON.stringify(edges)));\n\n    const currentSvg = svgRef.current;\n    if (!currentSvg) {\n      // console.log('[Graph Effect - Main D3] SVG ref not available yet. Aborting D3 setup.');\n      return; // SVG element isn't rendered yet (e.g. nodes are empty)\n    }\n\n    // Initialize simulation IF it doesn't exist yet AND currentSvg is available\n    if (!simulationRef.current) {\n      // console.log('[Graph Effect - Main D3] Initializing simulation.');\n      const initialWidth = graphDimensionsRef.current.width;\n      const initialHeight = graphDimensionsRef.current.height;\n      simulationRef.current = d3.forceSimulation().force('link', d3.forceLink([]).id(d => d._id).distance(150)).alpha(0).alphaDecay(1).alphaTarget(0);\n      // console.log('[Graph Effect - Main D3] Simulation initialized:', simulationRef.current);\n    }\n    const svg = d3.select(currentSvg); // Use currentSvg directly as it's confirmed not null\n    const simulation = simulationRef.current;\n\n    // This check should ideally not be hit if the above init logic works, but keep as safeguard\n    if (!simulation) {\n      // console.error('[Graph Effect - Main D3] Simulation ref is STILL not set! This is unexpected. Aborting.');\n      return;\n    }\n    // console.log('[Graph Effect - Main D3] Simulation instance retrieved:', simulation);\n\n    svg.on('click.diagnostic', event => {\n      // console.log('[SVG DIAGNOSTIC CLICK] SVG itself was clicked. Target:', event.target);\n    });\n\n    // 1. Manage the background rectangle: append if not exists, ensure attributes.\n    let backgroundRect = svg.select('rect.background');\n    if (backgroundRect.empty()) {\n      backgroundRect = svg.append('rect').attr('class', 'background');\n    }\n    backgroundRect // Ensure attributes are set on every run if they could change (e.g. dimensions)\n    .attr('width', '100%').attr('height', '100%').attr('fill', 'transparent').on('click', event => {\n      // console.log('[Background Rect Clicked Directly] Target:', event.target);\n      if (event.target.classList.contains('background')) {\n        d3.selectAll('.link').classed('selected', false);\n        setSelectedEdge(null);\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    });\n\n    // 2. Ensure dedicated groups for links and nodes exist (append if not).\n    let linkGroup = svg.select('g.links-group');\n    if (linkGroup.empty()) {\n      linkGroup = svg.append('g').attr('class', 'links-group');\n    }\n    let nodeGroup = svg.select('g.nodes-group');\n    if (nodeGroup.empty()) {\n      nodeGroup = svg.append('g').attr('class', 'nodes-group');\n    }\n\n    // 3. Manage defs for markers: append if not exists.\n    let defs = svg.select('defs');\n    if (defs.empty()) {\n      defs = svg.append('defs');\n    }\n    // Check if marker already exists before appending\n    if (defs.select('#arrow').empty()) {\n      defs.append(\"marker\").attr(\"id\", \"arrow\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 20).attr(\"refY\", 0).attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#A8C3A4\");\n    }\n\n    // Determine live dimensions for clamping and for App.js new node positioning\n    const liveContainerWidth = currentSvg.clientWidth;\n    const liveContainerHeight = currentSvg.clientHeight;\n    graphDimensionsRef.current = {\n      width: liveContainerWidth,\n      height: liveContainerHeight\n    }; // Update for App.js\n\n    // Set stable viewBox dimensions only once when valid live dimensions are first available\n    if (stableViewBoxDimensionsRef.current.width === 0 && liveContainerWidth > 0) {\n      stableViewBoxDimensionsRef.current.width = liveContainerWidth;\n      // console.log(`[Graph Dimensions] Stable viewBoxWidth SET to: ${liveContainerWidth}`);\n    }\n    if (stableViewBoxDimensionsRef.current.height === 0 && liveContainerHeight > 0) {\n      stableViewBoxDimensionsRef.current.height = liveContainerHeight;\n      // console.log(`[Graph Dimensions] Stable viewBoxHeight SET to: ${liveContainerHeight}`);\n    }\n\n    // Use stable dimensions for the viewBox if available, otherwise fallback to live (should only be for very first paint)\n    const viewBoxWidth = stableViewBoxDimensionsRef.current.width > 0 ? stableViewBoxDimensionsRef.current.width : liveContainerWidth;\n    const viewBoxHeight = stableViewBoxDimensionsRef.current.height > 0 ? stableViewBoxDimensionsRef.current.height : liveContainerHeight;\n\n    // console.log(`[Graph Dimensions] Using for viewBox: ${viewBoxWidth}x${viewBoxHeight}. Live: ${liveContainerWidth}x${liveContainerHeight}`);\n\n    svg.attr('viewBox', [0, 0, viewBoxWidth, viewBoxHeight]).attr('preserveAspectRatio', 'xMidYMid meet');\n\n    // Update node positions (fx, fy) before passing to simulation\n    nodes.forEach(node => {\n      const hasValidPositionProp = node.position && typeof node.position.x === 'number' && typeof node.position.y === 'number';\n      if (hasValidPositionProp) {\n        node.x = node.position.x;\n        node.y = node.position.y;\n        node.fx = node.position.x;\n        node.fy = node.position.y;\n      } else {\n        // Position from prop is invalid or missing. Node should be allowed to be placed by simulation.\n        // Or, if it's a new node without prior x/y, give it a random start.\n        node.x = typeof node.x === 'number' ? node.x : Math.random() * (liveContainerWidth - 100) + 50;\n        node.y = typeof node.y === 'number' ? node.y : Math.random() * (liveContainerHeight - 100) + 50;\n        node.fx = null; // Explicitly nullify fx/fy if position from prop is not definitive.\n        node.fy = null;\n\n        // For consistency or if other parts of the code expect node.position to exist:\n        // Update node.position to reflect the initial x,y that will be used by the simulation (if fx/fy are null).\n        // This ensures that if this node object is reused, its .position reflects its current state.\n        node.position = {\n          x: node.x,\n          y: node.y\n        };\n      }\n    });\n    // console.log('[D3 Data] Nodes after position init:', JSON.parse(JSON.stringify(nodes))); // Deep copy for logging\n\n    const nodeMap = {};\n    nodes.forEach(node => {\n      nodeMap[node._id] = node;\n    });\n    const processedEdges = edges.map(edge => ({\n      id: edge._id,\n      source: nodeMap[edge.source] || edge.source,\n      target: nodeMap[edge.target] || edge.target,\n      type: edge.type,\n      _id: edge._id\n    }));\n    // console.log('[D3 Data] Processed Edges:', JSON.parse(JSON.stringify(processedEdges)));\n\n    simulation.nodes(nodes).on('tick', ticked);\n    simulation.force('link').links(processedEdges);\n    const linkElements = linkGroup.selectAll('path.link').data(processedEdges, d => d.id).join('path').attr('class', 'link').attr('data-id', d => d.id).attr('stroke', '#A8C3A4').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)');\n    linkElements.on('click', handleEdgeClick);\n    // console.log('[D3 Elements] linkElements count:', linkElements.size());\n\n    const nodeElements = nodeGroup.selectAll('g.node').data(nodes, d => d._id).join(enter => {\n      const g = enter.append('g').attr('class', 'node').attr('data-id', d => d._id);\n\n      // Only apply drag behavior in select mode\n      if (interactionMode === 'select') {\n        g.call(dragBehavior(simulation, svg, liveContainerWidth, liveContainerHeight));\n      }\n      g.append('circle').attr('r', 12).attr('fill', '#2E7D32').attr('stroke', '#1B5E20').attr('stroke-width', 1.5).style('pointer-events', 'all');\n      g.append('text').text(d => {\n        var _d$_id;\n        return d.title || ((_d$_id = d._id) === null || _d$_id === void 0 ? void 0 : _d$_id.substring(0, 6));\n      }).attr('x', 16).attr('y', 5).attr('fill', '#FAF3E0').attr('text-anchor', 'start');\n      return g;\n    }, update => {\n      // Re-apply or remove drag behavior based on current mode\n      if (interactionMode === 'select') {\n        update.call(dragBehavior(simulation, svg, liveContainerWidth, liveContainerHeight));\n      } else {\n        // Remove drag behavior\n        update.on('.drag', null);\n      }\n      return update;\n    }, exit => exit.remove());\n\n    // console.log('[D3 Elements] nodeElements count:', nodeElements.size());\n\n    const circles = nodeElements.select('circle');\n    circles.on('click', handleNodeClick).style('pointer-events', 'all');\n    function handleEdgeClick(event, d) {\n      console.log('[Edge Click] Attempted on edge:', d.id, 'Mode:', interactionMode);\n      event.stopPropagation();\n      if (interactionMode === 'select') {\n        d3.selectAll('.link').classed('selected', false);\n        d3.select(event.currentTarget).classed('selected', true);\n        setSelectedEdge(d);\n        if (onNodeClick) {\n          // This onNodeClick(null) is to deselect any selected node\n          console.log(\"handleEdgeClick: Calling onNodeClick(null) to deselect node.\");\n          onNodeClick(null); // Deselects any selected node in App.js\n        } else {\n          console.log(\"handleEdgeClick: onNodeClick prop is undefined (cannot deselect node).\");\n        }\n      } else {\n        console.log(\"handleEdgeClick: Not in 'select' mode. Current mode:\", interactionMode, \"No action taken.\");\n      }\n    }\n    function ticked() {\n      // console.log('[Ticked] Simulation tick occurred.');\n      // if (nodes.length > 0 && nodes[0]) {\n      //     console.log(`[Ticked] Sample node 0: x=${nodes[0].x}, y=${nodes[0].y}, fx=${nodes[0].fx}, fy=${nodes[0].fy}`);\n      // }\n      // if (linkElements.size() > 0 && processedEdges.length > 0 && processedEdges[0]) {\n      //   const firstEdge = processedEdges[0];\n      //   if (firstEdge && firstEdge.source && typeof firstEdge.source.x === 'number' && firstEdge.target && typeof firstEdge.target.x === 'number') {\n      //        console.log(`[Ticked] Sample link 0 source: x=${firstEdge.source.x}, y=${firstEdge.source.y}. Target: x=${firstEdge.target.x}, y=${firstEdge.target.y}`);\n      //   }\n      // }\n\n      linkElements.attr('d', d => {\n        const sourceXPos = d.source.fx != null ? d.source.fx : d.source.x;\n        const sourceYPos = d.source.fy != null ? d.source.fy : d.source.y;\n        const targetXPos = d.target.fx != null ? d.target.fx : d.target.x;\n        const targetYPos = d.target.fy != null ? d.target.fy : d.target.y;\n        const sourceX = typeof sourceXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, sourceXPos)) : 0;\n        const sourceY = typeof sourceYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, sourceYPos)) : 0;\n        const targetX = typeof targetXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, targetXPos)) : 0;\n        const targetY = typeof targetYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, targetYPos)) : 0;\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\n      });\n      nodeElements.attr('transform', d => {\n        const xPos = d.fx != null ? d.fx : d.x;\n        const yPos = d.fy != null ? d.fy : d.y;\n        const x = typeof xPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, xPos)) : 0;\n        const y = typeof yPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, yPos)) : 0;\n        return `translate(${x},${y})`;\n      });\n    }\n\n    // TEMPORARILY COMMENT OUT THE SIMULATION KICK TO TEST ZOOM ISSUE\n    // simulation.alpha(0.3).restart(); // Previous state\n    simulation.alpha(0.1).restart(); // Re-enable with a gentle kick\n    simulation.alphaTarget(0); // Ensure this runs to keep the simulation cool\n    console.log('[Graph Effect - Main D3] Gentle simulation kick (alpha 0.1) re-enabled. Alpha target set to 0.');\n\n    // Cleanup for the main useEffect\n    return () => {\n      svg.on('click.diagnostic', null);\n      // Do not stop simulation here as it's persistent. Stop on unmount.\n      if (linkingState.current.tempLink) {\n        linkingState.current.tempLink.remove();\n      }\n      linkingState.current = {\n        sourceNode: null,\n        tempLink: null,\n        isLinking: false\n      };\n      if (clickTimeout.current) {\n        clearTimeout(clickTimeout.current);\n      }\n    };\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, onDeleteEdge, interactionMode, setInteractionMode, onBackgroundClick, isAnyPanelVisible, handleMouseMoveLinking, handleMouseUpLinking]);\n\n  // Add a separate useEffect for stopping the simulation on component unmount\n  useEffect(() => {\n    return () => {\n      if (simulationRef.current) {\n        console.log('[Graph Unmount] Stopping simulation.');\n        simulationRef.current.stop();\n      }\n    };\n  }, []); // Empty dependency array means this runs once on mount for the return (cleanup) function\n\n  // Handle keyboard delete for selected edges\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n          onDeleteEdge(selectedEdge._id);\n          setSelectedEdge(null);\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedEdge, onDeleteEdge]);\n  useEffect(() => {\n    if (svgRef.current) {\n      setIsSvgMounted(true);\n    }\n    return () => setIsSvgMounted(false);\n  }, []);\n  function dragBehavior(sim, svgInstance, containerWidth, containerHeight) {\n    // Only return drag behavior if we're in select mode\n    if (interactionMode !== 'select') {\n      return d3.drag(); // Return empty drag behavior that does nothing\n    }\n    return d3.drag().on('start', function (event, d) {\n      event.sourceEvent.stopPropagation();\n      // Only handle dragging in select mode\n      if (!event.active) sim.alphaTarget(0.3).restart();\n      d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\n      d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\n    }).on('drag', function (event, d) {\n      event.sourceEvent.stopPropagation();\n      d.fx = Math.max(15, Math.min(containerWidth - 15, event.x));\n      d.fy = Math.max(15, Math.min(containerHeight - 15, event.y));\n      d.position = {\n        x: d.fx,\n        y: d.fy\n      };\n    }).on('end', async function (event, d) {\n      const wasClick = Math.abs(event.dx) < 2 && Math.abs(event.dy) < 2;\n      if (!wasClick && api !== null && api !== void 0 && api.updateNode) {\n        await api.updateNode(d._id, {\n          position: {\n            x: d.fx,\n            y: d.fy\n          }\n        }).catch(err => console.error(\"Failed to update node position:\", err));\n      }\n    });\n  }\n  const handleNodeClick = (event, d) => {\n    console.log(`[Node Click Handler] Node: ${d._id}, Mode: ${interactionMode}, DefaultPrevented: ${event.defaultPrevented}`);\n    if (event.defaultPrevented) {\n      console.log('[Node Click Handler] DefaultPrevented, returning early (likely drag related).');\n      return;\n    }\n    if (interactionMode === 'connect') {\n      // Handle connection logic\n      if (!linkingState.current.isLinking) {\n        // Start a new connection\n        console.log('Starting connection from node:', d._id);\n        linkingState.current = {\n          isLinking: true,\n          sourceNode: d,\n          tempLink: d3.select(svgRef.current).append('path').attr('class', 'temp-link').attr('d', `M${d.x},${d.y}L${d.x},${d.y}`).attr('stroke-dasharray', '5,5').attr('stroke', '#B87333').attr('stroke-width', 2).attr('fill', 'none').attr('marker-end', 'url(#arrow)').raise()\n        };\n\n        // Add visual feedback to the source node\n        d3.select(event.currentTarget).select('circle').attr('stroke', '#B87333').attr('stroke-width', 3);\n      } else {\n        var _linkingState$current3;\n        // Complete the connection\n        if (linkingState.current.sourceNode && linkingState.current.sourceNode._id !== d._id) {\n          console.log('Completing connection from', linkingState.current.sourceNode._id, 'to', d._id);\n          if (onCreateEdge) {\n            onCreateEdge(linkingState.current.sourceNode._id, d._id);\n          }\n        } else if (linkingState.current.sourceNode._id === d._id) {\n          console.log('Cannot connect node to itself');\n        }\n\n        // Clean up and reset visual feedback\n        (_linkingState$current3 = linkingState.current.tempLink) === null || _linkingState$current3 === void 0 ? void 0 : _linkingState$current3.remove();\n\n        // Reset source node visual feedback\n        d3.selectAll('.node circle').attr('stroke', '#1B5E20').attr('stroke-width', 1.5);\n        linkingState.current.isLinking = false;\n        linkingState.current.sourceNode = null;\n        linkingState.current.tempLink = null;\n      }\n      return;\n    }\n\n    // Handle select mode clicks (existing logic)\n    if (clickTimeout.current) {\n      // Double-click\n      clearTimeout(clickTimeout.current);\n      clickTimeout.current = null;\n      console.log(`[Node Click Handler] Double-click on node ${d._id}.`);\n      if (onNodeDoubleClick) {\n        onNodeDoubleClick(d);\n      }\n      return;\n    }\n\n    // Single-click in select mode\n    clickTimeout.current = setTimeout(() => {\n      clickTimeout.current = null;\n      console.log(`[Node Click Handler - Select Mode] Processing single click for node ${d._id}.`);\n      setSelectedEdge(null);\n      if (onNodeClick) {\n        onNodeClick(d);\n      }\n    }, 250);\n  };\n\n  // Handle edge deletion\n  const handleDeleteEdge = () => {\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\n      onDeleteEdge(selectedEdge._id);\n      setSelectedEdge(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-wrapper\",\n    onClick: e => {\n      console.log('[Graph Wrapper Click] Target:', e.target, 'CurrentTarget:', e.currentTarget);\n      if (e.target === e.currentTarget) {\n        console.log('[Graph Wrapper Click] Click was directly on wrapper.');\n        if (onBackgroundClick) {\n          onBackgroundClick();\n        }\n      }\n    },\n    children: [nodes && nodes.length > 0 ? /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      className: \"graph-svg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-svg empty-graph-placeholder\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-graph-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This canvas is empty. Start by creating a new node!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-controls\",\n      children: [selectedEdge && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteEdge,\n        className: \"button danger\",\n        children: [/*#__PURE__*/_jsxDEV(TrashIcon, {\n          style: {\n            width: '1rem',\n            height: '1rem',\n            marginRight: '0.5rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 13\n        }, this), \"Remove Edge\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            // Pass current dimensions when calling onCreateNew\n            if (onCreateNew) {\n              onCreateNew({\n                graphWidth: graphDimensionsRef.current.width,\n                graphHeight: graphDimensionsRef.current.height\n              });\n            }\n          },\n          className: \"button primary\",\n          children: [/*#__PURE__*/_jsxDEV(PlusIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 13\n          }, this), \"Create New Node\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            const newMode = interactionMode === 'connect' ? 'select' : 'connect';\n            setInteractionMode(newMode);\n\n            // Reset any existing connection state\n            if (newMode === 'select') {\n              d3.select(svgRef.current).selectAll('.temp-link').remove();\n              linkingState.current = {\n                sourceNode: null,\n                tempLink: null,\n                isLinking: false\n              };\n            }\n          },\n          className: `button accent ${interactionMode === 'connect' ? 'active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(LinkIcon, {\n            style: {\n              width: '1rem',\n              height: '1rem',\n              marginRight: '0.5rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 3\n          }, this), interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 2\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 552,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"iP/yIuDoXxtRaNRpN0l1DhbZ/go=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","d3","api","PlusIcon","LinkIcon","TrashIcon","jsxDEV","_jsxDEV","Graph","nodes","edges","onNodeClick","onNodeDoubleClick","onCreateNew","onCreateEdge","onDeleteEdge","interactionMode","setInteractionMode","onBackgroundClick","isAnyPanelVisible","_s","console","log","svgRef","isSvgMounted","setIsSvgMounted","simulationRef","linkingState","sourceNode","tempLink","isLinking","selectedEdge","setSelectedEdge","clickTimeout","graphDimensionsRef","width","height","stableViewBoxDimensionsRef","handleMouseMoveLinking","event","current","x","y","pointer","attr","handleMouseUpLinking","clickedDomElement","target","closestNodeGroup","closest","isNode","_linkingState$current","remove","selectAll","svgInstance","select","onMouseMoveLinking","onMouseUpLinking","on","_linkingState$current2","currentSvg","initialWidth","initialHeight","forceSimulation","force","forceLink","id","d","_id","distance","alpha","alphaDecay","alphaTarget","svg","simulation","backgroundRect","empty","append","classList","contains","classed","linkGroup","nodeGroup","defs","liveContainerWidth","clientWidth","liveContainerHeight","clientHeight","viewBoxWidth","viewBoxHeight","forEach","node","hasValidPositionProp","position","fx","fy","Math","random","nodeMap","processedEdges","map","edge","source","type","ticked","links","linkElements","data","join","handleEdgeClick","nodeElements","enter","g","call","dragBehavior","style","text","_d$_id","title","substring","update","exit","circles","handleNodeClick","stopPropagation","currentTarget","sourceXPos","sourceYPos","targetXPos","targetYPos","sourceX","max","min","sourceY","targetX","targetY","xPos","yPos","restart","clearTimeout","stop","handleKeyDown","key","window","addEventListener","removeEventListener","sim","containerWidth","containerHeight","drag","sourceEvent","active","wasClick","abs","dx","dy","updateNode","catch","err","error","defaultPrevented","raise","_linkingState$current3","setTimeout","handleDeleteEdge","className","onClick","e","children","length","ref","fileName","_jsxFileName","lineNumber","columnNumber","marginRight","graphWidth","graphHeight","newMode","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Mind Mosaic/client/src/components/graph.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\r\nimport * as d3 from 'd3';\r\nimport './Graph.css';\r\nimport api from '../services/api.js';\r\nimport PlusIcon from './icons/PlusIcon';\r\nimport LinkIcon from './icons/LinkIcon';\r\nimport TrashIcon from './icons/TrashIcon';\r\n\r\nconst Graph = ({ nodes = [], edges = [], onNodeClick, onNodeDoubleClick, onCreateNew, onCreateEdge, onDeleteEdge, interactionMode = 'select', setInteractionMode, onBackgroundClick, isAnyPanelVisible /*, newlyCreatedEdgeId, onEdgeAnimationComplete, appearingNodeId, onNodeAppearAnimationComplete */ }) => {\r\n  console.log(\"CURRENT INTERACTION MODE:\", interactionMode);\r\n  const svgRef = useRef(null);\r\n  const [isSvgMounted, setIsSvgMounted] = useState(false);\r\n  const simulationRef = useRef(); // Ref to store the D3 simulation instance\r\n  const linkingState = useRef({ sourceNode: null, tempLink: null, isLinking: false });\r\n  const [selectedEdge, setSelectedEdge] = useState(null);\r\n  const clickTimeout = useRef(null);\r\n  const graphDimensionsRef = useRef({ width: 800, height: 600 }); // For App.js, needs live dimensions\r\n  const stableViewBoxDimensionsRef = useRef({ width: 0, height: 0 }); // For D3 viewBox, needs initial stable dimensions\r\n\r\n  // console.log('Graph received:', {\r\n  //   nodeCount: nodes.length,\r\n  //   edgeCount: edges.length,\r\n  //   mode: interactionMode\r\n  // });\r\n\r\n  // Debug: Log the actual nodes and edges data\r\n  // console.log('Nodes data:', JSON.stringify(nodes, null, 2));\r\n  // console.log('Edges data:', JSON.stringify(edges, null, 2));\r\n\r\n  const handleMouseMoveLinking = useCallback((event) => {\r\n  if (!linkingState.current.isLinking || !linkingState.current.sourceNode || !linkingState.current.tempLink) {\r\n    return;\r\n  }\r\n\r\n  if (!svgRef.current) return;\r\n  \r\n  const [x, y] = d3.pointer(event, svgRef.current);\r\n  \r\n  // Update the temp link to follow the mouse\r\n  linkingState.current.tempLink\r\n    .attr('d', `M${linkingState.current.sourceNode.x},${linkingState.current.sourceNode.y}L${x},${y}`);\r\n    \r\n}, [svgRef, linkingState]);\r\n\r\n\r\nconst handleMouseUpLinking = useCallback((event) => {\r\n  if (linkingState.current.isLinking) {\r\n    if (!svgRef.current) return;\r\n    \r\n    const clickedDomElement = event.target;\r\n    const closestNodeGroup = clickedDomElement.closest('.node');\r\n    const isNode = !!closestNodeGroup;\r\n\r\n    if (!isNode) {\r\n      console.log('Clicked on empty space - cancelling connection');\r\n      \r\n      // Clean up\r\n      linkingState.current.tempLink?.remove();\r\n      \r\n      // Reset visual feedback\r\n      d3.selectAll('.node circle')\r\n        .attr('stroke', '#1B5E20')\r\n        .attr('stroke-width', 1.5);\r\n      \r\n      linkingState.current.isLinking = false;\r\n      linkingState.current.sourceNode = null;\r\n      linkingState.current.tempLink = null;\r\n    }\r\n  }\r\n}, [svgRef, linkingState]);\r\n // onCreateEdge might be relevant if we decide to complete link here\r\n\r\n  useEffect(() => {\r\n    const svgInstance = d3.select(svgRef.current);\r\n\r\n    if (interactionMode === 'connect') {\r\n      const onMouseMoveLinking = handleMouseMoveLinking;\r\n      const onMouseUpLinking = handleMouseUpLinking;\r\n\r\n      svgInstance.on('mousemove.linking', onMouseMoveLinking);\r\n      svgInstance.on('mouseup.linking', onMouseUpLinking);\r\n      // console.log('Global linking listeners ADDED to SVG for connect mode.');\r\n\r\n      return () => {\r\n        svgInstance.on('mousemove.linking', null);\r\n        svgInstance.on('mouseup.linking', null);\r\n        // console.log('Global linking listeners REMOVED from SVG.');\r\n      };\r\n    } else {\r\n      svgInstance.on('mousemove.linking', null);\r\n      svgInstance.on('mouseup.linking', null);\r\n\r\n      if (linkingState.current.isLinking) {\r\n        // console.log('Exited connect mode with active link: Forcibly cleaning up.');\r\n        linkingState.current.tempLink?.remove();\r\n        linkingState.current.isLinking = false;\r\n        linkingState.current.sourceNode = null;\r\n        linkingState.current.tempLink = null;\r\n      }\r\n      return () => { };\r\n    }\r\n  }, [interactionMode, svgRef, handleMouseMoveLinking, handleMouseUpLinking]);\r\n\r\n  // Main effect for D3 rendering and updates\r\n  useEffect(() => {\r\n    // console.log('[Graph Effect - Main D3] Running. Nodes count:', nodes.length, 'Edges count:', edges.length);\r\n    // console.log('[Graph Effect - Main D3] Nodes prop:', JSON.parse(JSON.stringify(nodes)));\r\n    // console.log('[Graph Effect - Main D3] Edges prop:', JSON.parse(JSON.stringify(edges)));\r\n\r\n    const currentSvg = svgRef.current;\r\n    if (!currentSvg) {\r\n      // console.log('[Graph Effect - Main D3] SVG ref not available yet. Aborting D3 setup.');\r\n      return; // SVG element isn't rendered yet (e.g. nodes are empty)\r\n    }\r\n\r\n    // Initialize simulation IF it doesn't exist yet AND currentSvg is available\r\n    if (!simulationRef.current) {\r\n      // console.log('[Graph Effect - Main D3] Initializing simulation.');\r\n      const initialWidth = graphDimensionsRef.current.width;\r\n      const initialHeight = graphDimensionsRef.current.height;\r\n      simulationRef.current = d3.forceSimulation()\r\n        .force('link', d3.forceLink([]).id(d => d._id).distance(150))\r\n        .alpha(0).alphaDecay(1).alphaTarget(0);\r\n      // console.log('[Graph Effect - Main D3] Simulation initialized:', simulationRef.current);\r\n    }\r\n\r\n    const svg = d3.select(currentSvg); // Use currentSvg directly as it's confirmed not null\r\n    const simulation = simulationRef.current;\r\n\r\n    // This check should ideally not be hit if the above init logic works, but keep as safeguard\r\n    if (!simulation) {\r\n      // console.error('[Graph Effect - Main D3] Simulation ref is STILL not set! This is unexpected. Aborting.');\r\n      return;\r\n    }\r\n    // console.log('[Graph Effect - Main D3] Simulation instance retrieved:', simulation);\r\n\r\n    svg.on('click.diagnostic', (event) => {\r\n      // console.log('[SVG DIAGNOSTIC CLICK] SVG itself was clicked. Target:', event.target);\r\n    });\r\n\r\n    // 1. Manage the background rectangle: append if not exists, ensure attributes.\r\n    let backgroundRect = svg.select('rect.background');\r\n    if (backgroundRect.empty()) {\r\n      backgroundRect = svg.append('rect')\r\n        .attr('class', 'background');\r\n    }\r\n    backgroundRect // Ensure attributes are set on every run if they could change (e.g. dimensions)\r\n      .attr('width', '100%')\r\n      .attr('height', '100%')\r\n      .attr('fill', 'transparent')\r\n      .on('click', (event) => {\r\n        // console.log('[Background Rect Clicked Directly] Target:', event.target);\r\n        if (event.target.classList.contains('background')) {\r\n          d3.selectAll('.link').classed('selected', false);\r\n          setSelectedEdge(null);\r\n          if (onBackgroundClick) {\r\n            onBackgroundClick();\r\n          }\r\n        }\r\n      });\r\n\r\n    // 2. Ensure dedicated groups for links and nodes exist (append if not).\r\n    let linkGroup = svg.select('g.links-group');\r\n    if (linkGroup.empty()) {\r\n      linkGroup = svg.append('g').attr('class', 'links-group');\r\n    }\r\n    let nodeGroup = svg.select('g.nodes-group');\r\n    if (nodeGroup.empty()) {\r\n      nodeGroup = svg.append('g').attr('class', 'nodes-group');\r\n    }\r\n\r\n    // 3. Manage defs for markers: append if not exists.\r\n    let defs = svg.select('defs');\r\n    if (defs.empty()) {\r\n      defs = svg.append('defs');\r\n    }\r\n    // Check if marker already exists before appending\r\n    if (defs.select('#arrow').empty()) {\r\n      defs.append(\"marker\")\r\n        .attr(\"id\", \"arrow\")\r\n        .attr(\"viewBox\", \"0 -5 10 10\")\r\n        .attr(\"refX\", 20)\r\n        .attr(\"refY\", 0)\r\n        .attr(\"markerWidth\", 6)\r\n        .attr(\"markerHeight\", 6)\r\n        .attr(\"orient\", \"auto\")\r\n        .append(\"path\")\r\n        .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n        .attr(\"fill\", \"#A8C3A4\");\r\n    }\r\n\r\n    // Determine live dimensions for clamping and for App.js new node positioning\r\n    const liveContainerWidth = currentSvg.clientWidth;\r\n    const liveContainerHeight = currentSvg.clientHeight;\r\n    graphDimensionsRef.current = { width: liveContainerWidth, height: liveContainerHeight }; // Update for App.js\r\n\r\n    // Set stable viewBox dimensions only once when valid live dimensions are first available\r\n    if (stableViewBoxDimensionsRef.current.width === 0 && liveContainerWidth > 0) {\r\n      stableViewBoxDimensionsRef.current.width = liveContainerWidth;\r\n      // console.log(`[Graph Dimensions] Stable viewBoxWidth SET to: ${liveContainerWidth}`);\r\n    }\r\n    if (stableViewBoxDimensionsRef.current.height === 0 && liveContainerHeight > 0) {\r\n      stableViewBoxDimensionsRef.current.height = liveContainerHeight;\r\n      // console.log(`[Graph Dimensions] Stable viewBoxHeight SET to: ${liveContainerHeight}`);\r\n    }\r\n\r\n    // Use stable dimensions for the viewBox if available, otherwise fallback to live (should only be for very first paint)\r\n    const viewBoxWidth = stableViewBoxDimensionsRef.current.width > 0 ? stableViewBoxDimensionsRef.current.width : liveContainerWidth;\r\n    const viewBoxHeight = stableViewBoxDimensionsRef.current.height > 0 ? stableViewBoxDimensionsRef.current.height : liveContainerHeight;\r\n\r\n    // console.log(`[Graph Dimensions] Using for viewBox: ${viewBoxWidth}x${viewBoxHeight}. Live: ${liveContainerWidth}x${liveContainerHeight}`);\r\n\r\n    svg\r\n      .attr('viewBox', [0, 0, viewBoxWidth, viewBoxHeight])\r\n      .attr('preserveAspectRatio', 'xMidYMid meet');\r\n\r\n    // Update node positions (fx, fy) before passing to simulation\r\n    nodes.forEach(node => {\r\n      const hasValidPositionProp = node.position && typeof node.position.x === 'number' && typeof node.position.y === 'number';\r\n\r\n      if (hasValidPositionProp) {\r\n        node.x = node.position.x;\r\n        node.y = node.position.y;\r\n        node.fx = node.position.x;\r\n        node.fy = node.position.y;\r\n      } else {\r\n        // Position from prop is invalid or missing. Node should be allowed to be placed by simulation.\r\n        // Or, if it's a new node without prior x/y, give it a random start.\r\n        node.x = typeof node.x === 'number' ? node.x : (Math.random() * (liveContainerWidth - 100) + 50);\r\n        node.y = typeof node.y === 'number' ? node.y : (Math.random() * (liveContainerHeight - 100) + 50);\r\n        node.fx = null; // Explicitly nullify fx/fy if position from prop is not definitive.\r\n        node.fy = null;\r\n\r\n        // For consistency or if other parts of the code expect node.position to exist:\r\n        // Update node.position to reflect the initial x,y that will be used by the simulation (if fx/fy are null).\r\n        // This ensures that if this node object is reused, its .position reflects its current state.\r\n        node.position = { x: node.x, y: node.y };\r\n      }\r\n    });\r\n    // console.log('[D3 Data] Nodes after position init:', JSON.parse(JSON.stringify(nodes))); // Deep copy for logging\r\n\r\n    const nodeMap = {};\r\n    nodes.forEach(node => { nodeMap[node._id] = node; });\r\n    const processedEdges = edges.map(edge => ({\r\n      id: edge._id,\r\n      source: nodeMap[edge.source] || edge.source,\r\n      target: nodeMap[edge.target] || edge.target,\r\n      type: edge.type,\r\n      _id: edge._id\r\n    }));\r\n    // console.log('[D3 Data] Processed Edges:', JSON.parse(JSON.stringify(processedEdges)));\r\n\r\n    simulation\r\n      .nodes(nodes)\r\n      .on('tick', ticked);\r\n    simulation.force('link').links(processedEdges);\r\n\r\n    const linkElements = linkGroup.selectAll('path.link')\r\n      .data(processedEdges, d => d.id)\r\n      .join('path')\r\n      .attr('class', 'link')\r\n      .attr('data-id', d => d.id)\r\n      .attr('stroke', '#A8C3A4')\r\n      .attr('stroke-width', 2)\r\n      .attr('fill', 'none')\r\n      .attr('marker-end', 'url(#arrow)');\r\n    linkElements.on('click', handleEdgeClick);\r\n    // console.log('[D3 Elements] linkElements count:', linkElements.size());\r\n\r\n    const nodeElements = nodeGroup.selectAll('g.node')\r\n  .data(nodes, d => d._id)\r\n  .join(\r\n    enter => {\r\n      const g = enter.append('g')\r\n        .attr('class', 'node')\r\n        .attr('data-id', d => d._id);\r\n      \r\n      // Only apply drag behavior in select mode\r\n      if (interactionMode === 'select') {\r\n        g.call(dragBehavior(simulation, svg, liveContainerWidth, liveContainerHeight));\r\n      }\r\n\r\n      g.append('circle')\r\n        .attr('r', 12)\r\n        .attr('fill', '#2E7D32')\r\n        .attr('stroke', '#1B5E20')\r\n        .attr('stroke-width', 1.5)\r\n        .style('pointer-events', 'all');\r\n\r\n      g.append('text')\r\n        .text(d => d.title || d._id?.substring(0, 6))\r\n        .attr('x', 16).attr('y', 5).attr('fill', '#FAF3E0').attr('text-anchor', 'start');\r\n\r\n      return g;\r\n    },\r\n    update => {\r\n      // Re-apply or remove drag behavior based on current mode\r\n      if (interactionMode === 'select') {\r\n        update.call(dragBehavior(simulation, svg, liveContainerWidth, liveContainerHeight));\r\n      } else {\r\n        // Remove drag behavior\r\n        update.on('.drag', null);\r\n      }\r\n      return update;\r\n    },\r\n    exit => exit.remove()\r\n  );\r\n\r\n    // console.log('[D3 Elements] nodeElements count:', nodeElements.size());\r\n\r\n    const circles = nodeElements.select('circle');\r\n    circles.on('click', handleNodeClick).style('pointer-events', 'all');\r\n\r\n    function handleEdgeClick(event, d) {\r\n      console.log('[Edge Click] Attempted on edge:', d.id, 'Mode:', interactionMode);\r\n      event.stopPropagation();\r\n      if (interactionMode === 'select') {\r\n        d3.selectAll('.link').classed('selected', false);\r\n        d3.select(event.currentTarget).classed('selected', true);\r\n        setSelectedEdge(d);\r\n        if (onNodeClick) { // This onNodeClick(null) is to deselect any selected node\r\n          console.log(\"handleEdgeClick: Calling onNodeClick(null) to deselect node.\");\r\n          onNodeClick(null); // Deselects any selected node in App.js\r\n        } else {\r\n          console.log(\"handleEdgeClick: onNodeClick prop is undefined (cannot deselect node).\");\r\n        }\r\n      } else {\r\n        console.log(\"handleEdgeClick: Not in 'select' mode. Current mode:\", interactionMode, \"No action taken.\");\r\n      }\r\n    }\r\n\r\n    function ticked() {\r\n      // console.log('[Ticked] Simulation tick occurred.');\r\n      // if (nodes.length > 0 && nodes[0]) {\r\n      //     console.log(`[Ticked] Sample node 0: x=${nodes[0].x}, y=${nodes[0].y}, fx=${nodes[0].fx}, fy=${nodes[0].fy}`);\r\n      // }\r\n      // if (linkElements.size() > 0 && processedEdges.length > 0 && processedEdges[0]) {\r\n      //   const firstEdge = processedEdges[0];\r\n      //   if (firstEdge && firstEdge.source && typeof firstEdge.source.x === 'number' && firstEdge.target && typeof firstEdge.target.x === 'number') {\r\n      //        console.log(`[Ticked] Sample link 0 source: x=${firstEdge.source.x}, y=${firstEdge.source.y}. Target: x=${firstEdge.target.x}, y=${firstEdge.target.y}`);\r\n      //   }\r\n      // }\r\n\r\n      linkElements.attr('d', d => {\r\n        const sourceXPos = d.source.fx != null ? d.source.fx : d.source.x;\r\n        const sourceYPos = d.source.fy != null ? d.source.fy : d.source.y;\r\n        const targetXPos = d.target.fx != null ? d.target.fx : d.target.x;\r\n        const targetYPos = d.target.fy != null ? d.target.fy : d.target.y;\r\n\r\n        const sourceX = typeof sourceXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, sourceXPos)) : 0;\r\n        const sourceY = typeof sourceYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, sourceYPos)) : 0;\r\n        const targetX = typeof targetXPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, targetXPos)) : 0;\r\n        const targetY = typeof targetYPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, targetYPos)) : 0;\r\n        return `M${sourceX},${sourceY}L${targetX},${targetY}`;\r\n      });\r\n\r\n      nodeElements.attr('transform', d => {\r\n        const xPos = d.fx != null ? d.fx : d.x;\r\n        const yPos = d.fy != null ? d.fy : d.y;\r\n\r\n        const x = typeof xPos === 'number' ? Math.max(15, Math.min(liveContainerWidth - 15, xPos)) : 0;\r\n        const y = typeof yPos === 'number' ? Math.max(15, Math.min(liveContainerHeight - 15, yPos)) : 0;\r\n        return `translate(${x},${y})`;\r\n      });\r\n    }\r\n\r\n    // TEMPORARILY COMMENT OUT THE SIMULATION KICK TO TEST ZOOM ISSUE\r\n    // simulation.alpha(0.3).restart(); // Previous state\r\n    simulation.alpha(0.1).restart(); // Re-enable with a gentle kick\r\n    simulation.alphaTarget(0); // Ensure this runs to keep the simulation cool\r\n    console.log('[Graph Effect - Main D3] Gentle simulation kick (alpha 0.1) re-enabled. Alpha target set to 0.');\r\n\r\n    // Cleanup for the main useEffect\r\n    return () => {\r\n      svg.on('click.diagnostic', null);\r\n      // Do not stop simulation here as it's persistent. Stop on unmount.\r\n      if (linkingState.current.tempLink) {\r\n        linkingState.current.tempLink.remove();\r\n      }\r\n      linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n      if (clickTimeout.current) {\r\n        clearTimeout(clickTimeout.current);\r\n      }\r\n    };\r\n  }, [nodes, edges, onNodeClick, onNodeDoubleClick, onCreateEdge, onDeleteEdge, interactionMode, setInteractionMode, onBackgroundClick, isAnyPanelVisible, handleMouseMoveLinking, handleMouseUpLinking]);\r\n\r\n  // Add a separate useEffect for stopping the simulation on component unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (simulationRef.current) {\r\n        console.log('[Graph Unmount] Stopping simulation.');\r\n        simulationRef.current.stop();\r\n      }\r\n    };\r\n  }, []); // Empty dependency array means this runs once on mount for the return (cleanup) function\r\n\r\n  // Handle keyboard delete for selected edges\r\n  useEffect(() => {\r\n    const handleKeyDown = (event) => {\r\n      if ((event.key === 'Delete' || event.key === 'Backspace') && selectedEdge) {\r\n        if (selectedEdge && selectedEdge._id && onDeleteEdge) {\r\n          onDeleteEdge(selectedEdge._id);\r\n          setSelectedEdge(null);\r\n        }\r\n      }\r\n    };\r\n\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [selectedEdge, onDeleteEdge]);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      setIsSvgMounted(true);\r\n    }\r\n    return () => setIsSvgMounted(false);\r\n  }, []);\r\n\r\n\r\n\r\n\r\nfunction dragBehavior(sim, svgInstance, containerWidth, containerHeight) {\r\n  // Only return drag behavior if we're in select mode\r\n  if (interactionMode !== 'select') {\r\n    return d3.drag(); // Return empty drag behavior that does nothing\r\n  }\r\n  \r\n  return d3.drag()\r\n    .on('start', function(event, d) {\r\n      event.sourceEvent.stopPropagation();\r\n      // Only handle dragging in select mode\r\n      if (!event.active) sim.alphaTarget(0.3).restart();\r\n      d.fx = Math.max(15, Math.min(containerWidth - 15, d.x));\r\n      d.fy = Math.max(15, Math.min(containerHeight - 15, d.y));\r\n    })\r\n    .on('drag', function(event, d) {\r\n      event.sourceEvent.stopPropagation();\r\n      d.fx = Math.max(15, Math.min(containerWidth - 15, event.x));\r\n      d.fy = Math.max(15, Math.min(containerHeight - 15, event.y));\r\n      d.position = { x: d.fx, y: d.fy };\r\n    })\r\n    .on('end', async function(event, d) {\r\n      const wasClick = Math.abs(event.dx) < 2 && Math.abs(event.dy) < 2;\r\n      if (!wasClick && api?.updateNode) {\r\n        await api.updateNode(d._id, { position: { x: d.fx, y: d.fy } })\r\n          .catch(err => console.error(\"Failed to update node position:\", err));\r\n      }\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleNodeClick = (event, d) => {\r\n  console.log(`[Node Click Handler] Node: ${d._id}, Mode: ${interactionMode}, DefaultPrevented: ${event.defaultPrevented}`);\r\n  \r\n  if (event.defaultPrevented) {\r\n    console.log('[Node Click Handler] DefaultPrevented, returning early (likely drag related).');\r\n    return;\r\n  }\r\n\r\n  if (interactionMode === 'connect') {\r\n    // Handle connection logic\r\n    if (!linkingState.current.isLinking) {\r\n      // Start a new connection\r\n      console.log('Starting connection from node:', d._id);\r\n      linkingState.current = {\r\n        isLinking: true,\r\n        sourceNode: d,\r\n        tempLink: d3.select(svgRef.current).append('path')\r\n          .attr('class', 'temp-link')\r\n          .attr('d', `M${d.x},${d.y}L${d.x},${d.y}`)\r\n          .attr('stroke-dasharray', '5,5')\r\n          .attr('stroke', '#B87333')\r\n          .attr('stroke-width', 2)\r\n          .attr('fill', 'none')\r\n          .attr('marker-end', 'url(#arrow)')\r\n          .raise()\r\n      };\r\n      \r\n      // Add visual feedback to the source node\r\n      d3.select(event.currentTarget).select('circle')\r\n        .attr('stroke', '#B87333')\r\n        .attr('stroke-width', 3);\r\n        \r\n    } else {\r\n      // Complete the connection\r\n      if (linkingState.current.sourceNode && linkingState.current.sourceNode._id !== d._id) {\r\n        console.log('Completing connection from', linkingState.current.sourceNode._id, 'to', d._id);\r\n        if (onCreateEdge) {\r\n          onCreateEdge(linkingState.current.sourceNode._id, d._id);\r\n        }\r\n      } else if (linkingState.current.sourceNode._id === d._id) {\r\n        console.log('Cannot connect node to itself');\r\n      }\r\n      \r\n      // Clean up and reset visual feedback\r\n      linkingState.current.tempLink?.remove();\r\n      \r\n      // Reset source node visual feedback\r\n      d3.selectAll('.node circle')\r\n        .attr('stroke', '#1B5E20')\r\n        .attr('stroke-width', 1.5);\r\n      \r\n      linkingState.current.isLinking = false;\r\n      linkingState.current.sourceNode = null;\r\n      linkingState.current.tempLink = null;\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Handle select mode clicks (existing logic)\r\n  if (clickTimeout.current) { // Double-click\r\n    clearTimeout(clickTimeout.current);\r\n    clickTimeout.current = null;\r\n    console.log(`[Node Click Handler] Double-click on node ${d._id}.`);\r\n    if (onNodeDoubleClick) {\r\n      onNodeDoubleClick(d);\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Single-click in select mode\r\n  clickTimeout.current = setTimeout(() => {\r\n    clickTimeout.current = null;\r\n    console.log(`[Node Click Handler - Select Mode] Processing single click for node ${d._id}.`);\r\n    setSelectedEdge(null);\r\n    if (onNodeClick) {\r\n      onNodeClick(d);\r\n    }\r\n  }, 250);\r\n};\r\n\r\n\r\n\r\n\r\n  // Handle edge deletion\r\n  const handleDeleteEdge = () => {\r\n    if (selectedEdge && selectedEdge._id && onDeleteEdge) {\r\n      onDeleteEdge(selectedEdge._id);\r\n      setSelectedEdge(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-wrapper\" onClick={(e) => {\r\n      console.log('[Graph Wrapper Click] Target:', e.target, 'CurrentTarget:', e.currentTarget);\r\n      if (e.target === e.currentTarget) {\r\n        console.log('[Graph Wrapper Click] Click was directly on wrapper.');\r\n        if (onBackgroundClick) {\r\n          onBackgroundClick();\r\n        }\r\n      }\r\n    }}>\r\n      {nodes && nodes.length > 0 ? (\r\n        <svg ref={svgRef} className=\"graph-svg\" />\r\n      ) : (\r\n        <div className=\"graph-svg empty-graph-placeholder\">\r\n          <div className=\"empty-graph-message\">\r\n            <p>This canvas is empty. Start by creating a new node!</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className=\"graph-controls\">\r\n        {selectedEdge && (\r\n          <button\r\n            onClick={handleDeleteEdge}\r\n            className=\"button danger\"\r\n          >\r\n            <TrashIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            Remove Edge\r\n          </button>\r\n        )}\r\n        <div className=\"button-row\">\r\n          <button\r\n            onClick={() => {\r\n              // Pass current dimensions when calling onCreateNew\r\n              if (onCreateNew) {\r\n                onCreateNew({\r\n                  graphWidth: graphDimensionsRef.current.width,\r\n                  graphHeight: graphDimensionsRef.current.height\r\n                });\r\n              }\r\n            }}\r\n            className=\"button primary\"\r\n          >\r\n            <PlusIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n            Create New Node\r\n          </button>\r\n\r\n\r\n\r\n\r\n\r\n <button\r\n  onClick={() => {\r\n    const newMode = interactionMode === 'connect' ? 'select' : 'connect';\r\n    setInteractionMode(newMode);\r\n    \r\n    // Reset any existing connection state\r\n    if (newMode === 'select') {\r\n      d3.select(svgRef.current).selectAll('.temp-link').remove();\r\n      linkingState.current = { sourceNode: null, tempLink: null, isLinking: false };\r\n    }\r\n  }}\r\n  className={`button accent ${interactionMode === 'connect' ? 'active' : ''}`}\r\n>\r\n  <LinkIcon style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\r\n  {interactionMode === 'connect' ? 'Stop Connecting' : 'Connect Nodes'}\r\n</button>\r\n\r\n\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}